import * as outputs from "../types/output";
export declare namespace actions {
    namespace v1alpha1 {
        /**
         * AutoscalingListener is the Schema for the autoscalinglisteners API
         */
        interface AutoscalingListener {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "actions.github.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "AutoscalingListener";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.actions.v1alpha1.AutoscalingListenerSpec;
            /**
             * AutoscalingListenerStatus defines the observed state of AutoscalingListener
             */
            status: {
                [key: string]: string;
            };
        }
        /**
         * AutoscalingListenerSpec defines the desired state of AutoscalingListener
         */
        interface AutoscalingListenerSpec {
            /**
             * Required
             */
            autoscalingRunnerSetName: string;
            /**
             * Required
             */
            autoscalingRunnerSetNamespace: string;
            /**
             * Required
             */
            ephemeralRunnerSetName: string;
            /**
             * Required
             */
            githubConfigSecret: string;
            /**
             * Required
             */
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.AutoscalingListenerSpecGithubServerTLS;
            /**
             * Required
             */
            image: string;
            /**
             * Required
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingListenerSpecImagePullSecrets[];
            /**
             * Required
             */
            maxRunners: number;
            /**
             * Required
             */
            minRunners: number;
            proxy: outputs.actions.v1alpha1.AutoscalingListenerSpecProxy;
            /**
             * Required
             */
            runnerScaleSetId: number;
            template: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplate;
        }
        interface AutoscalingListenerSpecGithubServerTLS {
            certificateFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecGithubServerTLSCertificateFrom;
        }
        /**
         * Required
         */
        interface AutoscalingListenerSpecGithubServerTLSCertificateFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecGithubServerTLSCertificateFromConfigMapKeyRef;
        }
        /**
         * Required
         */
        interface AutoscalingListenerSpecGithubServerTLSCertificateFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface AutoscalingListenerSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface AutoscalingListenerSpecGithubServerTLSCertificateFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch;
        }
        interface AutoscalingListenerSpecGithubServerTLSPatch {
            certificateFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecGithubServerTLSCertificateFromPatch;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingListenerSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingListenerSpecImagePullSecretsPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * AutoscalingListenerSpec defines the desired state of AutoscalingListener
         */
        interface AutoscalingListenerSpecPatch {
            /**
             * Required
             */
            autoscalingRunnerSetName: string;
            /**
             * Required
             */
            autoscalingRunnerSetNamespace: string;
            /**
             * Required
             */
            ephemeralRunnerSetName: string;
            /**
             * Required
             */
            githubConfigSecret: string;
            /**
             * Required
             */
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.AutoscalingListenerSpecGithubServerTLSPatch;
            /**
             * Required
             */
            image: string;
            /**
             * Required
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingListenerSpecImagePullSecretsPatch[];
            /**
             * Required
             */
            maxRunners: number;
            /**
             * Required
             */
            minRunners: number;
            proxy: outputs.actions.v1alpha1.AutoscalingListenerSpecProxyPatch;
            /**
             * Required
             */
            runnerScaleSetId: number;
            template: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplatePatch;
        }
        interface AutoscalingListenerSpecProxy {
            http: outputs.actions.v1alpha1.AutoscalingListenerSpecProxyHttp;
            https: outputs.actions.v1alpha1.AutoscalingListenerSpecProxyHttps;
            noProxy: string[];
        }
        interface AutoscalingListenerSpecProxyHttp {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingListenerSpecProxyHttpPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingListenerSpecProxyHttps {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingListenerSpecProxyHttpsPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingListenerSpecProxyPatch {
            http: outputs.actions.v1alpha1.AutoscalingListenerSpecProxyHttpPatch;
            https: outputs.actions.v1alpha1.AutoscalingListenerSpecProxyHttpsPatch;
            noProxy: string[];
        }
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        interface AutoscalingListenerSpecTemplate {
            metadata: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateMetadata;
            spec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpec;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface AutoscalingListenerSpecTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface AutoscalingListenerSpecTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        interface AutoscalingListenerSpecTemplatePatch {
            metadata: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecPatch;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface AutoscalingListenerSpecTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainers[];
            dnsConfig: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainers[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecResourceClaims[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSchedulingGates[];
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumes[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface AutoscalingListenerSpecTemplateSpecAffinity {
            nodeAffinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinity;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPatch {
            nodeAffinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPatch;
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingListenerSpecTemplateSpecContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingListenerSpecTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingListenerSpecTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingListenerSpecTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface AutoscalingListenerSpecTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface AutoscalingListenerSpecTemplateSpecDnsConfigOptions {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface AutoscalingListenerSpecTemplateSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface AutoscalingListenerSpecTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStop;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface AutoscalingListenerSpecTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface AutoscalingListenerSpecTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingListenerSpecTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingListenerSpecTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingListenerSpecTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface AutoscalingListenerSpecTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface AutoscalingListenerSpecTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface AutoscalingListenerSpecTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecContainersPatch[];
            dnsConfig: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecInitContainersPatch[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecResourceClaimsPatch[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPatch[];
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface AutoscalingListenerSpecTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface AutoscalingListenerSpecTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface AutoscalingListenerSpecTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecResourceClaimsSource;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface AutoscalingListenerSpecTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecResourceClaimsSourcePatch;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface AutoscalingListenerSpecTemplateSpecResourceClaimsSource {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface AutoscalingListenerSpecTemplateSpecResourceClaimsSourcePatch {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface AutoscalingListenerSpecTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface AutoscalingListenerSpecTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextWindowsOptions;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingListenerSpecTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface AutoscalingListenerSpecTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface AutoscalingListenerSpecTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface AutoscalingListenerSpecTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumes {
            awsElasticBlockStore: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesAzureDisk;
            azureFile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesAzureFile;
            cephfs: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCephfs;
            cinder: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCinder;
            configMap: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesConfigMap;
            csi: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCsi;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeral;
            fc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFc;
            flexVolume: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFlexVolume;
            flocker: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesGitRepo;
            glusterfs: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesGlusterfs;
            hostPath: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesHostPath;
            iscsi: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesIscsi;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPortworxVolume;
            projected: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjected;
            quobyte: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesQuobyte;
            rbd: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesRbd;
            scaleIO: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesScaleIO;
            secret: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesSecret;
            storageos: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesVsphereVolume;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIItemsPatch[];
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFlexVolumeSecretRef;
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCephfsPatch;
            cinder: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCinderPatch;
            configMap: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesConfigMapPatch;
            csi: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesEphemeralPatch;
            fc: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFcPatch;
            flexVolume: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesHostPathPatch;
            iscsi: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesQuobytePatch;
            rbd: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesScaleIOPatch;
            secret: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesSecretPatch;
            storageos: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesVsphereVolumePatch;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSources[];
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSources {
            configMap: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesPatch {
            configMap: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }
        /**
         * secret information about the secret data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret information about the secret data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingListenerSpecTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface AutoscalingListenerSpecTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * AutoscalingRunnerSet is the Schema for the autoscalingrunnersets API
         */
        interface AutoscalingRunnerSet {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "actions.github.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "AutoscalingRunnerSet";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpec;
            status: outputs.actions.v1alpha1.AutoscalingRunnerSetStatus;
        }
        /**
         * AutoscalingRunnerSetSpec defines the desired state of AutoscalingRunnerSet
         */
        interface AutoscalingRunnerSetSpec {
            /**
             * Required
             */
            githubConfigSecret: string;
            /**
             * Required
             */
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecGithubServerTLS;
            listenerTemplate: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplate;
            maxRunners: number;
            minRunners: number;
            proxy: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecProxy;
            runnerGroup: string;
            runnerScaleSetName: string;
            template: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplate;
        }
        interface AutoscalingRunnerSetSpecGithubServerTLS {
            certificateFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecGithubServerTLSCertificateFrom;
        }
        /**
         * Required
         */
        interface AutoscalingRunnerSetSpecGithubServerTLSCertificateFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecGithubServerTLSCertificateFromConfigMapKeyRef;
        }
        /**
         * Required
         */
        interface AutoscalingRunnerSetSpecGithubServerTLSCertificateFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface AutoscalingRunnerSetSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface AutoscalingRunnerSetSpecGithubServerTLSCertificateFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch;
        }
        interface AutoscalingRunnerSetSpecGithubServerTLSPatch {
            certificateFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecGithubServerTLSCertificateFromPatch;
        }
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        interface AutoscalingRunnerSetSpecListenerTemplate {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateMetadata;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpec;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface AutoscalingRunnerSetSpecListenerTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface AutoscalingRunnerSetSpecListenerTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * PodTemplateSpec describes the data a pod should have when created from a template
         */
        interface AutoscalingRunnerSetSpecListenerTemplatePatch {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecPatch;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainers[];
            dnsConfig: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainers[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaims[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSchedulingGates[];
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumes[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinity {
            nodeAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinity;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPatch {
            nodeAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPatch;
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfigOptions {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStop;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecContainersPatch[];
            dnsConfig: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecInitContainersPatch[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaimsPatch[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPatch[];
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaimsSource;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaimsSourcePatch;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaimsSource {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecResourceClaimsSourcePatch {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextWindowsOptions;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumes {
            awsElasticBlockStore: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureDisk;
            azureFile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureFile;
            cephfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfs;
            cinder: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinder;
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMap;
            csi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsi;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeral;
            fc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFc;
            flexVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolume;
            flocker: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGitRepo;
            glusterfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGlusterfs;
            hostPath: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesHostPath;
            iscsi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsi;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPortworxVolume;
            projected: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjected;
            quobyte: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesQuobyte;
            rbd: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbd;
            scaleIO: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIO;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecret;
            storageos: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesVsphereVolume;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIItemsPatch[];
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolumeSecretRef;
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCephfsPatch;
            cinder: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCinderPatch;
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesConfigMapPatch;
            csi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesEphemeralPatch;
            fc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFcPatch;
            flexVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesHostPathPatch;
            iscsi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesQuobytePatch;
            rbd: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIOPatch;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecretPatch;
            storageos: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesVsphereVolumePatch;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSources[];
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSources {
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesPatch {
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }
        /**
         * secret information about the secret data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret information about the secret data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecListenerTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * AutoscalingRunnerSetSpec defines the desired state of AutoscalingRunnerSet
         */
        interface AutoscalingRunnerSetSpecPatch {
            /**
             * Required
             */
            githubConfigSecret: string;
            /**
             * Required
             */
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecGithubServerTLSPatch;
            listenerTemplate: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecListenerTemplatePatch;
            maxRunners: number;
            minRunners: number;
            proxy: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecProxyPatch;
            runnerGroup: string;
            runnerScaleSetName: string;
            template: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplatePatch;
        }
        interface AutoscalingRunnerSetSpecProxy {
            http: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecProxyHttp;
            https: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecProxyHttps;
            noProxy: string[];
        }
        interface AutoscalingRunnerSetSpecProxyHttp {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingRunnerSetSpecProxyHttpPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingRunnerSetSpecProxyHttps {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingRunnerSetSpecProxyHttpsPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface AutoscalingRunnerSetSpecProxyPatch {
            http: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecProxyHttpPatch;
            https: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecProxyHttpsPatch;
            noProxy: string[];
        }
        /**
         * Required
         */
        interface AutoscalingRunnerSetSpecTemplate {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateMetadata;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpec;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface AutoscalingRunnerSetSpecTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface AutoscalingRunnerSetSpecTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Required
         */
        interface AutoscalingRunnerSetSpecTemplatePatch {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecPatch;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface AutoscalingRunnerSetSpecTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainers[];
            dnsConfig: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainers[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecResourceClaims[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSchedulingGates[];
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumes[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinity {
            nodeAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinity;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPatch {
            nodeAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPatch;
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecDnsConfigOptions {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStop;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersResources;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecycle {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbe {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface AutoscalingRunnerSetSpecTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface AutoscalingRunnerSetSpecTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface AutoscalingRunnerSetSpecTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecContainersPatch[];
            dnsConfig: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecInitContainersPatch[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecResourceClaimsPatch[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPatch[];
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface AutoscalingRunnerSetSpecTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface AutoscalingRunnerSetSpecTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecResourceClaimsSource;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecResourceClaimsSourcePatch;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecResourceClaimsSource {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecResourceClaimsSourcePatch {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextWindowsOptions;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumes {
            awsElasticBlockStore: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesAzureDisk;
            azureFile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesAzureFile;
            cephfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCephfs;
            cinder: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCinder;
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMap;
            csi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCsi;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeral;
            fc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFc;
            flexVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolume;
            flocker: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesGitRepo;
            glusterfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesGlusterfs;
            hostPath: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesHostPath;
            iscsi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesIscsi;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPortworxVolume;
            projected: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjected;
            quobyte: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesQuobyte;
            rbd: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesRbd;
            scaleIO: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIO;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesSecret;
            storageos: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesVsphereVolume;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIItemsPatch[];
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolumeSecretRef;
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCephfsPatch;
            cinder: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCinderPatch;
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesConfigMapPatch;
            csi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesEphemeralPatch;
            fc: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFcPatch;
            flexVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesHostPathPatch;
            iscsi: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesQuobytePatch;
            rbd: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIOPatch;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesSecretPatch;
            storageos: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesVsphereVolumePatch;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSources[];
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSources {
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesPatch {
            configMap: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }
        /**
         * secret information about the secret data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret information about the secret data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.AutoscalingRunnerSetSpecTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface AutoscalingRunnerSetSpecTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * AutoscalingRunnerSetStatus defines the observed state of AutoscalingRunnerSet
         */
        interface AutoscalingRunnerSetStatus {
            currentRunners: number;
            failedEphemeralRunners: number;
            pendingEphemeralRunners: number;
            runningEphemeralRunners: number;
            state: string;
        }
        /**
         * AutoscalingRunnerSetStatus defines the observed state of AutoscalingRunnerSet
         */
        interface AutoscalingRunnerSetStatusPatch {
            currentRunners: number;
            failedEphemeralRunners: number;
            pendingEphemeralRunners: number;
            runningEphemeralRunners: number;
            state: string;
        }
        /**
         * EphemeralRunner is the Schema for the ephemeralrunners API
         */
        interface EphemeralRunner {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "actions.github.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "EphemeralRunner";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSpec;
            status: outputs.actions.v1alpha1.EphemeralRunnerStatus;
        }
        /**
         * EphemeralRunnerSet is the Schema for the ephemeralrunnersets API
         */
        interface EphemeralRunnerSet {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "actions.github.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "EphemeralRunnerSet";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSetSpec;
            status: outputs.actions.v1alpha1.EphemeralRunnerSetStatus;
        }
        /**
         * EphemeralRunnerSetSpec defines the desired state of EphemeralRunnerSet
         */
        interface EphemeralRunnerSetSpec {
            ephemeralRunnerSpec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpec;
            /**
             * Replicas is the number of desired EphemeralRunner resources in the k8s namespace.
             */
            replicas: number;
        }
        /**
         * EphemeralRunnerSpec defines the desired state of EphemeralRunner
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpec {
            githubConfigSecret: string;
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLS;
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecMetadata;
            proxy: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecProxy;
            proxySecretRef: string;
            runnerScaleSetId: number;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpec;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLS {
            certificateFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFrom;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRef;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSPatch {
            certificateFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSCertificateFromPatch;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * EphemeralRunnerSpec defines the desired state of EphemeralRunner
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecPatch {
            githubConfigSecret: string;
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecGithubServerTLSPatch;
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecMetadataPatch;
            proxy: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecProxyPatch;
            proxySecretRef: string;
            runnerScaleSetId: number;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecPatch;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecProxy {
            http: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttp;
            https: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttps;
            noProxy: string[];
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttp {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttpPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttps {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttpsPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecProxyPatch {
            http: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttpPatch;
            https: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecProxyHttpsPatch;
            noProxy: string[];
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainers[];
            dnsConfig: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfig;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecHostAliases[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainers[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaims[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSchedulingGates[];
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumes[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinity {
            nodeAffinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinity;
            podAffinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinity;
            podAntiAffinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinity;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPatch {
            nodeAffinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPatch;
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResources;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecycle {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfigOptions {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResources;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecycle {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStop;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecImagePullSecretsPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResources;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecycle {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecContainersPatch[];
            dnsConfig: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecInitContainersPatch[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaimsPatch[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSchedulingGatesPatch[];
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPatch[];
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaimsSource;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaimsSourcePatch;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaimsSource {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecResourceClaimsSourcePatch {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSchedulingGates {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSysctls[];
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextWindowsOptions;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraints {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumes {
            awsElasticBlockStore: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureDisk;
            azureFile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureFile;
            cephfs: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfs;
            cinder: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinder;
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMap;
            csi: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsi;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPI;
            emptyDir: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEmptyDir;
            ephemeral: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeral;
            fc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFc;
            flexVolume: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolume;
            flocker: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlocker;
            gcePersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGcePersistentDisk;
            gitRepo: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGitRepo;
            glusterfs: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGlusterfs;
            hostPath: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesHostPath;
            iscsi: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsi;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesNfs;
            persistentVolumeClaim: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPortworxVolume;
            projected: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjected;
            quobyte: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesQuobyte;
            rbd: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbd;
            scaleIO: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIO;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecret;
            storageos: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageos;
            vsphereVolume: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesVsphereVolume;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinderSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIItemsPatch[];
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplate;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolumeSecretRef;
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolumeSecretRefPatch;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGitRepo {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesHostPath {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesNfs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPatch {
            awsElasticBlockStore: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureDiskPatch;
            azureFile: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesAzureFilePatch;
            cephfs: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCephfsPatch;
            cinder: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCinderPatch;
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesConfigMapPatch;
            csi: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesCsiPatch;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEmptyDirPatch;
            ephemeral: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesEphemeralPatch;
            fc: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFcPatch;
            flexVolume: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlexVolumePatch;
            flocker: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGitRepoPatch;
            glusterfs: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesGlusterfsPatch;
            hostPath: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesHostPathPatch;
            iscsi: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesIscsiPatch;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPortworxVolumePatch;
            projected: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedPatch;
            quobyte: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesQuobytePatch;
            rbd: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbdPatch;
            scaleIO: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIOPatch;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecretPatch;
            storageos: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageosPatch;
            vsphereVolume: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesVsphereVolumePatch;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSources[];
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSources {
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountToken;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesPatch {
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }
        /**
         * secret information about the secret data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret information about the secret data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesQuobyte {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesQuobytePatch {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbdSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSetSpecEphemeralRunnerSpecSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * EphemeralRunnerSetSpec defines the desired state of EphemeralRunnerSet
         */
        interface EphemeralRunnerSetSpecPatch {
            ephemeralRunnerSpec: outputs.actions.v1alpha1.EphemeralRunnerSetSpecEphemeralRunnerSpecPatch;
            /**
             * Replicas is the number of desired EphemeralRunner resources in the k8s namespace.
             */
            replicas: number;
        }
        /**
         * EphemeralRunnerSetStatus defines the observed state of EphemeralRunnerSet
         */
        interface EphemeralRunnerSetStatus {
            /**
             * CurrentReplicas is the number of currently running EphemeralRunner resources being managed by this EphemeralRunnerSet.
             */
            currentReplicas: number;
            failedEphemeralRunners: number;
            pendingEphemeralRunners: number;
            runningEphemeralRunners: number;
        }
        /**
         * EphemeralRunnerSetStatus defines the observed state of EphemeralRunnerSet
         */
        interface EphemeralRunnerSetStatusPatch {
            /**
             * CurrentReplicas is the number of currently running EphemeralRunner resources being managed by this EphemeralRunnerSet.
             */
            currentReplicas: number;
            failedEphemeralRunners: number;
            pendingEphemeralRunners: number;
            runningEphemeralRunners: number;
        }
        /**
         * EphemeralRunnerSpec defines the desired state of EphemeralRunner
         */
        interface EphemeralRunnerSpec {
            githubConfigSecret: string;
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.EphemeralRunnerSpecGithubServerTLS;
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSpecMetadata;
            proxy: outputs.actions.v1alpha1.EphemeralRunnerSpecProxy;
            proxySecretRef: string;
            runnerScaleSetId: number;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpec;
        }
        interface EphemeralRunnerSpecGithubServerTLS {
            certificateFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecGithubServerTLSCertificateFrom;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSpecGithubServerTLSCertificateFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRef;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Required
         */
        interface EphemeralRunnerSpecGithubServerTLSCertificateFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecGithubServerTLSCertificateFromConfigMapKeyRefPatch;
        }
        interface EphemeralRunnerSpecGithubServerTLSPatch {
            certificateFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecGithubServerTLSCertificateFromPatch;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface EphemeralRunnerSpecMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        interface EphemeralRunnerSpecMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * EphemeralRunnerSpec defines the desired state of EphemeralRunner
         */
        interface EphemeralRunnerSpecPatch {
            githubConfigSecret: string;
            githubConfigUrl: string;
            githubServerTLS: outputs.actions.v1alpha1.EphemeralRunnerSpecGithubServerTLSPatch;
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSpecMetadataPatch;
            proxy: outputs.actions.v1alpha1.EphemeralRunnerSpecProxyPatch;
            proxySecretRef: string;
            runnerScaleSetId: number;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecPatch;
        }
        interface EphemeralRunnerSpecProxy {
            http: outputs.actions.v1alpha1.EphemeralRunnerSpecProxyHttp;
            https: outputs.actions.v1alpha1.EphemeralRunnerSpecProxyHttps;
            noProxy: string[];
        }
        interface EphemeralRunnerSpecProxyHttp {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSpecProxyHttpPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSpecProxyHttps {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSpecProxyHttpsPatch {
            credentialSecretRef: string;
            /**
             * Required
             */
            url: string;
        }
        interface EphemeralRunnerSpecProxyPatch {
            http: outputs.actions.v1alpha1.EphemeralRunnerSpecProxyHttpPatch;
            https: outputs.actions.v1alpha1.EphemeralRunnerSpecProxyHttpsPatch;
            noProxy: string[];
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface EphemeralRunnerSpecSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainers[];
            dnsConfig: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecDnsConfig;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecHostAliases[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainers[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecResourceClaims[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSchedulingGates[];
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumes[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface EphemeralRunnerSpecSpecAffinity {
            nodeAffinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinity;
            podAffinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinity;
            podAntiAffinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinity;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }
        /**
         * Describes node affinity scheduling rules for the pod.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }
        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        interface EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }
        /**
         * If specified, the pod's scheduling constraints
         */
        interface EphemeralRunnerSpecSpecAffinityPatch {
            nodeAffinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPatch;
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }
        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over a set of resources, in this case pods.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        interface EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            namespaceSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSpecSpecContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersResources;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSpecSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSpecSpecContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSpecSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSpecSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSpecSpecContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSpecSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSpecSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSpecSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSpecSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSpecSpecContainersLifecycle {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSpecSpecContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSpecSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSpecSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSpecSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSpecSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSpecSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSpecSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSpecSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSpecSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface EphemeralRunnerSpecSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface EphemeralRunnerSpecSpecDnsConfigOptions {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        interface EphemeralRunnerSpecSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name: string;
            value: string;
        }
        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        interface EphemeralRunnerSpecSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches: string[];
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersResources;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecycle {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStop;
        }
        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Probes are not allowed for ephemeral containers.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSpecSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface EphemeralRunnerSpecSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        interface EphemeralRunnerSpecSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface EphemeralRunnerSpecSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        interface EphemeralRunnerSpecSpecImagePullSecretsPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSpecSpecInitContainers {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvFrom[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecycle;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersPorts[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbe;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersResources;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContext;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFrom;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvFrom {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvFromSecretRef;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * The ConfigMap to select from
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }
        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvFromPatch {
            configMapRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvFromSecretRefPatch;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * The Secret to select from
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }
        /**
         * EnvVar represents an environment variable present in a Container.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value: string;
            valueFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromPatch;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRef;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a ConfigMap.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Selects a key of a secret in the pod's namespace
         */
        interface EphemeralRunnerSpecSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecycle {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStart;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStop;
        }
        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePatch {
            postStart: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopPatch;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStart {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStop {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocket;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopHttpGetPatch;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        interface EphemeralRunnerSpecSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * A single application container that you want to run within a pod.
         */
        interface EphemeralRunnerSpecSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersEnvFromPatch[];
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersPortsPatch[];
            readinessProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbePatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersResourcesPatch;
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSpecSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * ContainerPort represents a network port in a single container.
         */
        interface EphemeralRunnerSpecSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSpecSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        interface EphemeralRunnerSpecSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptions;
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }
        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            capabilities: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbe {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * Exec specifies the action to take.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }
        /**
         * HTTPGet specifies the http request to perform.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme: string;
        }
        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbePatch {
            exec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        interface EphemeralRunnerSpecSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSpecSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        interface EphemeralRunnerSpecSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSpecSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        interface EphemeralRunnerSpecSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly: boolean;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface EphemeralRunnerSpecSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        interface EphemeralRunnerSpecSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }
        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        interface EphemeralRunnerSpecSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecContainersPatch[];
            dnsConfig: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecInitContainersPatch[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {
                [key: string]: string;
            };
            os: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {
                [key: string]: number | string;
            };
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable.
             */
            resourceClaims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecResourceClaimsPatch[];
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. More info:  https://git.k8s.io/enhancements/keps/sig-scheduling/3521-pod-scheduling-readiness.
             *  This is an alpha-level feature enabled by PodSchedulingReadiness feature gate.
             */
            schedulingGates: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSchedulingGatesPatch[];
            securityContext: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPatch[];
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface EphemeralRunnerSpecSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        interface EphemeralRunnerSpecSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface EphemeralRunnerSpecSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecResourceClaimsSource;
        }
        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        interface EphemeralRunnerSpecSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecResourceClaimsSourcePatch;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface EphemeralRunnerSpecSpecResourceClaimsSource {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * Source describes where to find the ResourceClaim.
         */
        interface EphemeralRunnerSpecSpecResourceClaimsSourcePatch {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface EphemeralRunnerSpecSpecSchedulingGates {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        interface EphemeralRunnerSpecSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: string;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface EphemeralRunnerSpecSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextSysctls[];
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextWindowsOptions;
        }
        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        interface EphemeralRunnerSpecSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecSecurityContextWindowsOptionsPatch;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        interface EphemeralRunnerSpecSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are:
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface EphemeralRunnerSpecSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * Sysctl defines a kernel parameter to be set
         */
        interface EphemeralRunnerSpecSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        interface EphemeralRunnerSpecSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface EphemeralRunnerSpecSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        interface EphemeralRunnerSpecSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface EphemeralRunnerSpecSpecTopologySpreadConstraints {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        interface EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        interface EphemeralRunnerSpecSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface EphemeralRunnerSpecSpecVolumes {
            awsElasticBlockStore: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesAzureDisk;
            azureFile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesAzureFile;
            cephfs: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCephfs;
            cinder: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCinder;
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesConfigMap;
            csi: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCsi;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPI;
            emptyDir: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEmptyDir;
            ephemeral: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeral;
            fc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFc;
            flexVolume: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFlexVolume;
            flocker: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFlocker;
            gcePersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesGcePersistentDisk;
            gitRepo: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesGitRepo;
            glusterfs: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesGlusterfs;
            hostPath: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesHostPath;
            iscsi: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesIscsi;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesNfs;
            persistentVolumeClaim: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPortworxVolume;
            projected: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjected;
            quobyte: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesQuobyte;
            rbd: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesRbd;
            scaleIO: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesScaleIO;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesSecret;
            storageos: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesStorageos;
            vsphereVolume: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesVsphereVolume;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface EphemeralRunnerSpecSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        interface EphemeralRunnerSpecSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSpecSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSpecSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface EphemeralRunnerSpecSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        interface EphemeralRunnerSpecSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface EphemeralRunnerSpecSpecVolumesCinderSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        interface EphemeralRunnerSpecSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface EphemeralRunnerSpecSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap represents a configMap that should populate this volume
         */
        interface EphemeralRunnerSpecSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface EphemeralRunnerSpecSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface EphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        interface EphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        interface EphemeralRunnerSpecSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {
                [key: string]: string;
            };
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        interface EphemeralRunnerSpecSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIItemsPatch[];
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface EphemeralRunnerSpecSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        interface EphemeralRunnerSpecSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit: number | string;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplate;
        }
        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {
                [key: string]: string;
            };
            finalizers: string[];
            labels: {
                [key: string]: string;
            };
            name: string;
            namespace: string;
        }
        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         *  Required, must not be nil.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }
        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: string;
        }
        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
             *  This field is immutable. It can only be set for containers.
             */
            claims: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {
                [key: string]: number | string;
            };
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {
                [key: string]: number | string;
            };
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values: string[];
        }
        /**
         * selector is a label query over volumes to consider for binding.
         */
        interface EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {
                [key: string]: string;
            };
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface EphemeralRunnerSpecSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFlexVolumeSecretRef;
        }
        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        interface EphemeralRunnerSpecSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {
                [key: string]: string;
            };
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFlexVolumeSecretRefPatch;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface EphemeralRunnerSpecSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        interface EphemeralRunnerSpecSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface EphemeralRunnerSpecSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        interface EphemeralRunnerSpecSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface EphemeralRunnerSpecSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        interface EphemeralRunnerSpecSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface EphemeralRunnerSpecSpecVolumesGitRepo {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        interface EphemeralRunnerSpecSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface EphemeralRunnerSpecSpecVolumesHostPath {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        interface EphemeralRunnerSpecSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface EphemeralRunnerSpecSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        interface EphemeralRunnerSpecSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface EphemeralRunnerSpecSpecVolumesNfs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        interface EphemeralRunnerSpecSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }
        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        interface EphemeralRunnerSpecSpecVolumesPatch {
            awsElasticBlockStore: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesAzureDiskPatch;
            azureFile: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesAzureFilePatch;
            cephfs: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCephfsPatch;
            cinder: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCinderPatch;
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesConfigMapPatch;
            csi: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesCsiPatch;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEmptyDirPatch;
            ephemeral: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesEphemeralPatch;
            fc: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFcPatch;
            flexVolume: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFlexVolumePatch;
            flocker: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesGitRepoPatch;
            glusterfs: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesGlusterfsPatch;
            hostPath: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesHostPathPatch;
            iscsi: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesIscsiPatch;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesPortworxVolumePatch;
            projected: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedPatch;
            quobyte: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesQuobytePatch;
            rbd: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesRbdPatch;
            scaleIO: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesScaleIOPatch;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesSecretPatch;
            storageos: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesStorageosPatch;
            vsphereVolume: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesVsphereVolumePatch;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface EphemeralRunnerSpecSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        interface EphemeralRunnerSpecSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly: boolean;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSpecSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSpecSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSpecSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSpecSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface EphemeralRunnerSpecSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSources[];
        }
        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSources {
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountToken;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * configMap information about the configMap data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItems[];
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }
        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }
        /**
         * downwardAPI information about the downwardAPI data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }
        /**
         * Projection that may be projected along with other supported volume types
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesPatch {
            configMap: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }
        /**
         * secret information about the secret data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret information about the secret data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        interface EphemeralRunnerSpecSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSpecSpecVolumesQuobyte {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        interface EphemeralRunnerSpecSpecVolumesQuobytePatch {
            /**
             * group to map volume access to Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        interface EphemeralRunnerSpecSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface EphemeralRunnerSpecSpecVolumesRbdSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        interface EphemeralRunnerSpecSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSpecSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSpecSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface EphemeralRunnerSpecSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        interface EphemeralRunnerSpecSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface EphemeralRunnerSpecSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * Maps a string key to a path within a volume.
         */
        interface EphemeralRunnerSpecSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: string;
        }
        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        interface EphemeralRunnerSpecSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSpecSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        interface EphemeralRunnerSpecSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.actions.v1alpha1.EphemeralRunnerSpecSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface EphemeralRunnerSpecSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        interface EphemeralRunnerSpecSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSpecSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        interface EphemeralRunnerSpecSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }
        /**
         * EphemeralRunnerStatus defines the observed state of EphemeralRunner
         */
        interface EphemeralRunnerStatus {
            failures: {
                [key: string]: boolean;
            };
            jobDisplayName: string;
            jobRepositoryName: string;
            jobRequestId: number;
            jobWorkflowRef: string;
            message: string;
            /**
             * Phase describes phases where EphemeralRunner can be in. The underlying type is a PodPhase, but the meaning is more restrictive
             *  The PodFailed phase should be set only when EphemeralRunner fails to start after multiple retries. That signals that this EphemeralRunner won't work, and manual inspection is required
             *  The PodSucceded phase should be set only when confirmed that EphemeralRunner actually executed the job and has been removed from the service.
             */
            phase: string;
            /**
             * Turns true only if the runner is online.
             */
            ready: boolean;
            reason: string;
            runnerId: number;
            runnerJITConfig: string;
            runnerName: string;
            workflowRunId: number;
        }
        /**
         * EphemeralRunnerStatus defines the observed state of EphemeralRunner
         */
        interface EphemeralRunnerStatusPatch {
            failures: {
                [key: string]: boolean;
            };
            jobDisplayName: string;
            jobRepositoryName: string;
            jobRequestId: number;
            jobWorkflowRef: string;
            message: string;
            /**
             * Phase describes phases where EphemeralRunner can be in. The underlying type is a PodPhase, but the meaning is more restrictive
             *  The PodFailed phase should be set only when EphemeralRunner fails to start after multiple retries. That signals that this EphemeralRunner won't work, and manual inspection is required
             *  The PodSucceded phase should be set only when confirmed that EphemeralRunner actually executed the job and has been removed from the service.
             */
            phase: string;
            /**
             * Turns true only if the runner is online.
             */
            ready: boolean;
            reason: string;
            runnerId: number;
            runnerJITConfig: string;
            runnerName: string;
            workflowRunId: number;
        }
    }
}
export declare namespace meta {
    namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
        }
        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }
        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {
                [key: string]: string;
            };
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {
                [key: string]: string;
            };
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntry[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReference[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }
        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {
                [key: string]: string;
            };
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {
                [key: string]: string;
            };
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntryPatch[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReferencePatch[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }
        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }
        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }
    }
}
