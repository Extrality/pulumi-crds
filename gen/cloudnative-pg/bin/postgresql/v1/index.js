"use strict";
// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionPatch = exports.SubscriptionList = exports.Subscription = exports.ScheduledBackupPatch = exports.ScheduledBackupList = exports.ScheduledBackup = exports.PublicationPatch = exports.PublicationList = exports.Publication = exports.PoolerPatch = exports.PoolerList = exports.Pooler = exports.ImageCatalogPatch = exports.ImageCatalogList = exports.ImageCatalog = exports.FailoverQuorumPatch = exports.FailoverQuorumList = exports.FailoverQuorum = exports.DatabasePatch = exports.DatabaseList = exports.Database = exports.ClusterPatch = exports.ClusterList = exports.ClusterImageCatalogPatch = exports.ClusterImageCatalogList = exports.ClusterImageCatalog = exports.Cluster = exports.BackupPatch = exports.BackupList = exports.Backup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.Backup = null;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));
exports.BackupList = null;
utilities.lazyLoad(exports, ["BackupList"], () => require("./backupList"));
exports.BackupPatch = null;
utilities.lazyLoad(exports, ["BackupPatch"], () => require("./backupPatch"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.ClusterImageCatalog = null;
utilities.lazyLoad(exports, ["ClusterImageCatalog"], () => require("./clusterImageCatalog"));
exports.ClusterImageCatalogList = null;
utilities.lazyLoad(exports, ["ClusterImageCatalogList"], () => require("./clusterImageCatalogList"));
exports.ClusterImageCatalogPatch = null;
utilities.lazyLoad(exports, ["ClusterImageCatalogPatch"], () => require("./clusterImageCatalogPatch"));
exports.ClusterList = null;
utilities.lazyLoad(exports, ["ClusterList"], () => require("./clusterList"));
exports.ClusterPatch = null;
utilities.lazyLoad(exports, ["ClusterPatch"], () => require("./clusterPatch"));
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.DatabaseList = null;
utilities.lazyLoad(exports, ["DatabaseList"], () => require("./databaseList"));
exports.DatabasePatch = null;
utilities.lazyLoad(exports, ["DatabasePatch"], () => require("./databasePatch"));
exports.FailoverQuorum = null;
utilities.lazyLoad(exports, ["FailoverQuorum"], () => require("./failoverQuorum"));
exports.FailoverQuorumList = null;
utilities.lazyLoad(exports, ["FailoverQuorumList"], () => require("./failoverQuorumList"));
exports.FailoverQuorumPatch = null;
utilities.lazyLoad(exports, ["FailoverQuorumPatch"], () => require("./failoverQuorumPatch"));
exports.ImageCatalog = null;
utilities.lazyLoad(exports, ["ImageCatalog"], () => require("./imageCatalog"));
exports.ImageCatalogList = null;
utilities.lazyLoad(exports, ["ImageCatalogList"], () => require("./imageCatalogList"));
exports.ImageCatalogPatch = null;
utilities.lazyLoad(exports, ["ImageCatalogPatch"], () => require("./imageCatalogPatch"));
exports.Pooler = null;
utilities.lazyLoad(exports, ["Pooler"], () => require("./pooler"));
exports.PoolerList = null;
utilities.lazyLoad(exports, ["PoolerList"], () => require("./poolerList"));
exports.PoolerPatch = null;
utilities.lazyLoad(exports, ["PoolerPatch"], () => require("./poolerPatch"));
exports.Publication = null;
utilities.lazyLoad(exports, ["Publication"], () => require("./publication"));
exports.PublicationList = null;
utilities.lazyLoad(exports, ["PublicationList"], () => require("./publicationList"));
exports.PublicationPatch = null;
utilities.lazyLoad(exports, ["PublicationPatch"], () => require("./publicationPatch"));
exports.ScheduledBackup = null;
utilities.lazyLoad(exports, ["ScheduledBackup"], () => require("./scheduledBackup"));
exports.ScheduledBackupList = null;
utilities.lazyLoad(exports, ["ScheduledBackupList"], () => require("./scheduledBackupList"));
exports.ScheduledBackupPatch = null;
utilities.lazyLoad(exports, ["ScheduledBackupPatch"], () => require("./scheduledBackupPatch"));
exports.Subscription = null;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));
exports.SubscriptionList = null;
utilities.lazyLoad(exports, ["SubscriptionList"], () => require("./subscriptionList"));
exports.SubscriptionPatch = null;
utilities.lazyLoad(exports, ["SubscriptionPatch"], () => require("./subscriptionPatch"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:postgresql.cnpg.io/v1:Backup":
                return new exports.Backup(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:BackupList":
                return new exports.BackupList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:BackupPatch":
                return new exports.BackupPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalog":
                return new exports.ClusterImageCatalog(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalogList":
                return new exports.ClusterImageCatalogList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalogPatch":
                return new exports.ClusterImageCatalogPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ClusterList":
                return new exports.ClusterList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ClusterPatch":
                return new exports.ClusterPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:Database":
                return new exports.Database(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:DatabaseList":
                return new exports.DatabaseList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:DatabasePatch":
                return new exports.DatabasePatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:FailoverQuorum":
                return new exports.FailoverQuorum(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:FailoverQuorumList":
                return new exports.FailoverQuorumList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:FailoverQuorumPatch":
                return new exports.FailoverQuorumPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ImageCatalog":
                return new exports.ImageCatalog(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ImageCatalogList":
                return new exports.ImageCatalogList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ImageCatalogPatch":
                return new exports.ImageCatalogPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:Pooler":
                return new exports.Pooler(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:PoolerList":
                return new exports.PoolerList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:PoolerPatch":
                return new exports.PoolerPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:Publication":
                return new exports.Publication(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:PublicationList":
                return new exports.PublicationList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:PublicationPatch":
                return new exports.PublicationPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ScheduledBackup":
                return new exports.ScheduledBackup(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ScheduledBackupList":
                return new exports.ScheduledBackupList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:ScheduledBackupPatch":
                return new exports.ScheduledBackupPatch(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:Subscription":
                return new exports.Subscription(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:SubscriptionList":
                return new exports.SubscriptionList(name, undefined, { urn });
            case "kubernetes:postgresql.cnpg.io/v1:SubscriptionPatch":
                return new exports.SubscriptionPatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudnative-pg", "postgresql.cnpg.io/v1", _module);
//# sourceMappingURL=index.js.map