"use strict";
// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VhostPatch = exports.VhostList = exports.Vhost = exports.UserPatch = exports.UserList = exports.User = exports.TopicPermissionPatch = exports.TopicPermissionList = exports.TopicPermission = exports.ShovelPatch = exports.ShovelList = exports.Shovel = exports.SchemaReplicationPatch = exports.SchemaReplicationList = exports.SchemaReplication = exports.QueuePatch = exports.QueueList = exports.Queue = exports.PolicyPatch = exports.PolicyList = exports.Policy = exports.PermissionPatch = exports.PermissionList = exports.Permission = exports.OperatorPolicyPatch = exports.OperatorPolicyList = exports.OperatorPolicy = exports.FederationPatch = exports.FederationList = exports.Federation = exports.ExchangePatch = exports.ExchangeList = exports.Exchange = exports.BindingPatch = exports.BindingList = exports.Binding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.Binding = null;
utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));
exports.BindingList = null;
utilities.lazyLoad(exports, ["BindingList"], () => require("./bindingList"));
exports.BindingPatch = null;
utilities.lazyLoad(exports, ["BindingPatch"], () => require("./bindingPatch"));
exports.Exchange = null;
utilities.lazyLoad(exports, ["Exchange"], () => require("./exchange"));
exports.ExchangeList = null;
utilities.lazyLoad(exports, ["ExchangeList"], () => require("./exchangeList"));
exports.ExchangePatch = null;
utilities.lazyLoad(exports, ["ExchangePatch"], () => require("./exchangePatch"));
exports.Federation = null;
utilities.lazyLoad(exports, ["Federation"], () => require("./federation"));
exports.FederationList = null;
utilities.lazyLoad(exports, ["FederationList"], () => require("./federationList"));
exports.FederationPatch = null;
utilities.lazyLoad(exports, ["FederationPatch"], () => require("./federationPatch"));
exports.OperatorPolicy = null;
utilities.lazyLoad(exports, ["OperatorPolicy"], () => require("./operatorPolicy"));
exports.OperatorPolicyList = null;
utilities.lazyLoad(exports, ["OperatorPolicyList"], () => require("./operatorPolicyList"));
exports.OperatorPolicyPatch = null;
utilities.lazyLoad(exports, ["OperatorPolicyPatch"], () => require("./operatorPolicyPatch"));
exports.Permission = null;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));
exports.PermissionList = null;
utilities.lazyLoad(exports, ["PermissionList"], () => require("./permissionList"));
exports.PermissionPatch = null;
utilities.lazyLoad(exports, ["PermissionPatch"], () => require("./permissionPatch"));
exports.Policy = null;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));
exports.PolicyList = null;
utilities.lazyLoad(exports, ["PolicyList"], () => require("./policyList"));
exports.PolicyPatch = null;
utilities.lazyLoad(exports, ["PolicyPatch"], () => require("./policyPatch"));
exports.Queue = null;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));
exports.QueueList = null;
utilities.lazyLoad(exports, ["QueueList"], () => require("./queueList"));
exports.QueuePatch = null;
utilities.lazyLoad(exports, ["QueuePatch"], () => require("./queuePatch"));
exports.SchemaReplication = null;
utilities.lazyLoad(exports, ["SchemaReplication"], () => require("./schemaReplication"));
exports.SchemaReplicationList = null;
utilities.lazyLoad(exports, ["SchemaReplicationList"], () => require("./schemaReplicationList"));
exports.SchemaReplicationPatch = null;
utilities.lazyLoad(exports, ["SchemaReplicationPatch"], () => require("./schemaReplicationPatch"));
exports.Shovel = null;
utilities.lazyLoad(exports, ["Shovel"], () => require("./shovel"));
exports.ShovelList = null;
utilities.lazyLoad(exports, ["ShovelList"], () => require("./shovelList"));
exports.ShovelPatch = null;
utilities.lazyLoad(exports, ["ShovelPatch"], () => require("./shovelPatch"));
exports.TopicPermission = null;
utilities.lazyLoad(exports, ["TopicPermission"], () => require("./topicPermission"));
exports.TopicPermissionList = null;
utilities.lazyLoad(exports, ["TopicPermissionList"], () => require("./topicPermissionList"));
exports.TopicPermissionPatch = null;
utilities.lazyLoad(exports, ["TopicPermissionPatch"], () => require("./topicPermissionPatch"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.UserList = null;
utilities.lazyLoad(exports, ["UserList"], () => require("./userList"));
exports.UserPatch = null;
utilities.lazyLoad(exports, ["UserPatch"], () => require("./userPatch"));
exports.Vhost = null;
utilities.lazyLoad(exports, ["Vhost"], () => require("./vhost"));
exports.VhostList = null;
utilities.lazyLoad(exports, ["VhostList"], () => require("./vhostList"));
exports.VhostPatch = null;
utilities.lazyLoad(exports, ["VhostPatch"], () => require("./vhostPatch"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:rabbitmq.com/v1beta1:Binding":
                return new exports.Binding(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:BindingList":
                return new exports.BindingList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:BindingPatch":
                return new exports.BindingPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Exchange":
                return new exports.Exchange(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:ExchangeList":
                return new exports.ExchangeList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:ExchangePatch":
                return new exports.ExchangePatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Federation":
                return new exports.Federation(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:FederationList":
                return new exports.FederationList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:FederationPatch":
                return new exports.FederationPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:OperatorPolicy":
                return new exports.OperatorPolicy(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:OperatorPolicyList":
                return new exports.OperatorPolicyList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:OperatorPolicyPatch":
                return new exports.OperatorPolicyPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Permission":
                return new exports.Permission(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:PermissionList":
                return new exports.PermissionList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:PermissionPatch":
                return new exports.PermissionPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Policy":
                return new exports.Policy(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:PolicyList":
                return new exports.PolicyList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:PolicyPatch":
                return new exports.PolicyPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Queue":
                return new exports.Queue(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:QueueList":
                return new exports.QueueList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:QueuePatch":
                return new exports.QueuePatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:SchemaReplication":
                return new exports.SchemaReplication(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:SchemaReplicationList":
                return new exports.SchemaReplicationList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:SchemaReplicationPatch":
                return new exports.SchemaReplicationPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Shovel":
                return new exports.Shovel(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:ShovelList":
                return new exports.ShovelList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:ShovelPatch":
                return new exports.ShovelPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:TopicPermission":
                return new exports.TopicPermission(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:TopicPermissionList":
                return new exports.TopicPermissionList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:TopicPermissionPatch":
                return new exports.TopicPermissionPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:User":
                return new exports.User(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:UserList":
                return new exports.UserList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:UserPatch":
                return new exports.UserPatch(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:Vhost":
                return new exports.Vhost(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:VhostList":
                return new exports.VhostList(name, undefined, { urn });
            case "kubernetes:rabbitmq.com/v1beta1:VhostPatch":
                return new exports.VhostPatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rabbitmq-topology-operator", "rabbitmq.com/v1beta1", _module);
//# sourceMappingURL=index.js.map