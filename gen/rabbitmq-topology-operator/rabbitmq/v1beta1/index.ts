// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BindingArgs } from "./binding";
export type Binding = import("./binding").Binding;
export const Binding: typeof import("./binding").Binding = null as any;
utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));

export { BindingListArgs } from "./bindingList";
export type BindingList = import("./bindingList").BindingList;
export const BindingList: typeof import("./bindingList").BindingList = null as any;
utilities.lazyLoad(exports, ["BindingList"], () => require("./bindingList"));

export { BindingPatchArgs } from "./bindingPatch";
export type BindingPatch = import("./bindingPatch").BindingPatch;
export const BindingPatch: typeof import("./bindingPatch").BindingPatch = null as any;
utilities.lazyLoad(exports, ["BindingPatch"], () => require("./bindingPatch"));

export { ExchangeArgs } from "./exchange";
export type Exchange = import("./exchange").Exchange;
export const Exchange: typeof import("./exchange").Exchange = null as any;
utilities.lazyLoad(exports, ["Exchange"], () => require("./exchange"));

export { ExchangeListArgs } from "./exchangeList";
export type ExchangeList = import("./exchangeList").ExchangeList;
export const ExchangeList: typeof import("./exchangeList").ExchangeList = null as any;
utilities.lazyLoad(exports, ["ExchangeList"], () => require("./exchangeList"));

export { ExchangePatchArgs } from "./exchangePatch";
export type ExchangePatch = import("./exchangePatch").ExchangePatch;
export const ExchangePatch: typeof import("./exchangePatch").ExchangePatch = null as any;
utilities.lazyLoad(exports, ["ExchangePatch"], () => require("./exchangePatch"));

export { FederationArgs } from "./federation";
export type Federation = import("./federation").Federation;
export const Federation: typeof import("./federation").Federation = null as any;
utilities.lazyLoad(exports, ["Federation"], () => require("./federation"));

export { FederationListArgs } from "./federationList";
export type FederationList = import("./federationList").FederationList;
export const FederationList: typeof import("./federationList").FederationList = null as any;
utilities.lazyLoad(exports, ["FederationList"], () => require("./federationList"));

export { FederationPatchArgs } from "./federationPatch";
export type FederationPatch = import("./federationPatch").FederationPatch;
export const FederationPatch: typeof import("./federationPatch").FederationPatch = null as any;
utilities.lazyLoad(exports, ["FederationPatch"], () => require("./federationPatch"));

export { OperatorPolicyArgs } from "./operatorPolicy";
export type OperatorPolicy = import("./operatorPolicy").OperatorPolicy;
export const OperatorPolicy: typeof import("./operatorPolicy").OperatorPolicy = null as any;
utilities.lazyLoad(exports, ["OperatorPolicy"], () => require("./operatorPolicy"));

export { OperatorPolicyListArgs } from "./operatorPolicyList";
export type OperatorPolicyList = import("./operatorPolicyList").OperatorPolicyList;
export const OperatorPolicyList: typeof import("./operatorPolicyList").OperatorPolicyList = null as any;
utilities.lazyLoad(exports, ["OperatorPolicyList"], () => require("./operatorPolicyList"));

export { OperatorPolicyPatchArgs } from "./operatorPolicyPatch";
export type OperatorPolicyPatch = import("./operatorPolicyPatch").OperatorPolicyPatch;
export const OperatorPolicyPatch: typeof import("./operatorPolicyPatch").OperatorPolicyPatch = null as any;
utilities.lazyLoad(exports, ["OperatorPolicyPatch"], () => require("./operatorPolicyPatch"));

export { PermissionArgs } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PermissionListArgs } from "./permissionList";
export type PermissionList = import("./permissionList").PermissionList;
export const PermissionList: typeof import("./permissionList").PermissionList = null as any;
utilities.lazyLoad(exports, ["PermissionList"], () => require("./permissionList"));

export { PermissionPatchArgs } from "./permissionPatch";
export type PermissionPatch = import("./permissionPatch").PermissionPatch;
export const PermissionPatch: typeof import("./permissionPatch").PermissionPatch = null as any;
utilities.lazyLoad(exports, ["PermissionPatch"], () => require("./permissionPatch"));

export { PolicyArgs } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyListArgs } from "./policyList";
export type PolicyList = import("./policyList").PolicyList;
export const PolicyList: typeof import("./policyList").PolicyList = null as any;
utilities.lazyLoad(exports, ["PolicyList"], () => require("./policyList"));

export { PolicyPatchArgs } from "./policyPatch";
export type PolicyPatch = import("./policyPatch").PolicyPatch;
export const PolicyPatch: typeof import("./policyPatch").PolicyPatch = null as any;
utilities.lazyLoad(exports, ["PolicyPatch"], () => require("./policyPatch"));

export { QueueArgs } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { QueueListArgs } from "./queueList";
export type QueueList = import("./queueList").QueueList;
export const QueueList: typeof import("./queueList").QueueList = null as any;
utilities.lazyLoad(exports, ["QueueList"], () => require("./queueList"));

export { QueuePatchArgs } from "./queuePatch";
export type QueuePatch = import("./queuePatch").QueuePatch;
export const QueuePatch: typeof import("./queuePatch").QueuePatch = null as any;
utilities.lazyLoad(exports, ["QueuePatch"], () => require("./queuePatch"));

export { SchemaReplicationArgs } from "./schemaReplication";
export type SchemaReplication = import("./schemaReplication").SchemaReplication;
export const SchemaReplication: typeof import("./schemaReplication").SchemaReplication = null as any;
utilities.lazyLoad(exports, ["SchemaReplication"], () => require("./schemaReplication"));

export { SchemaReplicationListArgs } from "./schemaReplicationList";
export type SchemaReplicationList = import("./schemaReplicationList").SchemaReplicationList;
export const SchemaReplicationList: typeof import("./schemaReplicationList").SchemaReplicationList = null as any;
utilities.lazyLoad(exports, ["SchemaReplicationList"], () => require("./schemaReplicationList"));

export { SchemaReplicationPatchArgs } from "./schemaReplicationPatch";
export type SchemaReplicationPatch = import("./schemaReplicationPatch").SchemaReplicationPatch;
export const SchemaReplicationPatch: typeof import("./schemaReplicationPatch").SchemaReplicationPatch = null as any;
utilities.lazyLoad(exports, ["SchemaReplicationPatch"], () => require("./schemaReplicationPatch"));

export { ShovelArgs } from "./shovel";
export type Shovel = import("./shovel").Shovel;
export const Shovel: typeof import("./shovel").Shovel = null as any;
utilities.lazyLoad(exports, ["Shovel"], () => require("./shovel"));

export { ShovelListArgs } from "./shovelList";
export type ShovelList = import("./shovelList").ShovelList;
export const ShovelList: typeof import("./shovelList").ShovelList = null as any;
utilities.lazyLoad(exports, ["ShovelList"], () => require("./shovelList"));

export { ShovelPatchArgs } from "./shovelPatch";
export type ShovelPatch = import("./shovelPatch").ShovelPatch;
export const ShovelPatch: typeof import("./shovelPatch").ShovelPatch = null as any;
utilities.lazyLoad(exports, ["ShovelPatch"], () => require("./shovelPatch"));

export { TopicPermissionArgs } from "./topicPermission";
export type TopicPermission = import("./topicPermission").TopicPermission;
export const TopicPermission: typeof import("./topicPermission").TopicPermission = null as any;
utilities.lazyLoad(exports, ["TopicPermission"], () => require("./topicPermission"));

export { TopicPermissionListArgs } from "./topicPermissionList";
export type TopicPermissionList = import("./topicPermissionList").TopicPermissionList;
export const TopicPermissionList: typeof import("./topicPermissionList").TopicPermissionList = null as any;
utilities.lazyLoad(exports, ["TopicPermissionList"], () => require("./topicPermissionList"));

export { TopicPermissionPatchArgs } from "./topicPermissionPatch";
export type TopicPermissionPatch = import("./topicPermissionPatch").TopicPermissionPatch;
export const TopicPermissionPatch: typeof import("./topicPermissionPatch").TopicPermissionPatch = null as any;
utilities.lazyLoad(exports, ["TopicPermissionPatch"], () => require("./topicPermissionPatch"));

export { UserArgs } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserListArgs } from "./userList";
export type UserList = import("./userList").UserList;
export const UserList: typeof import("./userList").UserList = null as any;
utilities.lazyLoad(exports, ["UserList"], () => require("./userList"));

export { UserPatchArgs } from "./userPatch";
export type UserPatch = import("./userPatch").UserPatch;
export const UserPatch: typeof import("./userPatch").UserPatch = null as any;
utilities.lazyLoad(exports, ["UserPatch"], () => require("./userPatch"));

export { VhostArgs } from "./vhost";
export type Vhost = import("./vhost").Vhost;
export const Vhost: typeof import("./vhost").Vhost = null as any;
utilities.lazyLoad(exports, ["Vhost"], () => require("./vhost"));

export { VhostListArgs } from "./vhostList";
export type VhostList = import("./vhostList").VhostList;
export const VhostList: typeof import("./vhostList").VhostList = null as any;
utilities.lazyLoad(exports, ["VhostList"], () => require("./vhostList"));

export { VhostPatchArgs } from "./vhostPatch";
export type VhostPatch = import("./vhostPatch").VhostPatch;
export const VhostPatch: typeof import("./vhostPatch").VhostPatch = null as any;
utilities.lazyLoad(exports, ["VhostPatch"], () => require("./vhostPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:rabbitmq.com/v1beta1:Binding":
                return new Binding(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:BindingList":
                return new BindingList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:BindingPatch":
                return new BindingPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Exchange":
                return new Exchange(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:ExchangeList":
                return new ExchangeList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:ExchangePatch":
                return new ExchangePatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Federation":
                return new Federation(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:FederationList":
                return new FederationList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:FederationPatch":
                return new FederationPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:OperatorPolicy":
                return new OperatorPolicy(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:OperatorPolicyList":
                return new OperatorPolicyList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:OperatorPolicyPatch":
                return new OperatorPolicyPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:PermissionList":
                return new PermissionList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:PermissionPatch":
                return new PermissionPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:PolicyList":
                return new PolicyList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:PolicyPatch":
                return new PolicyPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:QueueList":
                return new QueueList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:QueuePatch":
                return new QueuePatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:SchemaReplication":
                return new SchemaReplication(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:SchemaReplicationList":
                return new SchemaReplicationList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:SchemaReplicationPatch":
                return new SchemaReplicationPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Shovel":
                return new Shovel(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:ShovelList":
                return new ShovelList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:ShovelPatch":
                return new ShovelPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:TopicPermission":
                return new TopicPermission(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:TopicPermissionList":
                return new TopicPermissionList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:TopicPermissionPatch":
                return new TopicPermissionPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:User":
                return new User(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:UserList":
                return new UserList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:UserPatch":
                return new UserPatch(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:Vhost":
                return new Vhost(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:VhostList":
                return new VhostList(name, <any>undefined, { urn })
            case "kubernetes:rabbitmq.com/v1beta1:VhostPatch":
                return new VhostPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rabbitmq-topology-operator", "rabbitmq.com/v1beta1", _module)
