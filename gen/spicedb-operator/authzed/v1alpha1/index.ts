// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { SpiceDBClusterArgs } from "./spiceDBCluster";
export type SpiceDBCluster = import("./spiceDBCluster").SpiceDBCluster;
export const SpiceDBCluster: typeof import("./spiceDBCluster").SpiceDBCluster = null as any;
utilities.lazyLoad(exports, ["SpiceDBCluster"], () => require("./spiceDBCluster"));

export { SpiceDBClusterListArgs } from "./spiceDBClusterList";
export type SpiceDBClusterList = import("./spiceDBClusterList").SpiceDBClusterList;
export const SpiceDBClusterList: typeof import("./spiceDBClusterList").SpiceDBClusterList = null as any;
utilities.lazyLoad(exports, ["SpiceDBClusterList"], () => require("./spiceDBClusterList"));

export { SpiceDBClusterPatchArgs } from "./spiceDBClusterPatch";
export type SpiceDBClusterPatch = import("./spiceDBClusterPatch").SpiceDBClusterPatch;
export const SpiceDBClusterPatch: typeof import("./spiceDBClusterPatch").SpiceDBClusterPatch = null as any;
utilities.lazyLoad(exports, ["SpiceDBClusterPatch"], () => require("./spiceDBClusterPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:authzed.com/v1alpha1:SpiceDBCluster":
                return new SpiceDBCluster(name, <any>undefined, { urn })
            case "kubernetes:authzed.com/v1alpha1:SpiceDBClusterList":
                return new SpiceDBClusterList(name, <any>undefined, { urn })
            case "kubernetes:authzed.com/v1alpha1:SpiceDBClusterPatch":
                return new SpiceDBClusterPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("spicedb-operator", "authzed.com/v1alpha1", _module)
