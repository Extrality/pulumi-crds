// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace gateway {
    export namespace v1alpha1 {
        /**
         * Backend allows the user to configure the endpoints of a backend and
         * the behavior of the connection from Envoy Proxy to the backend.
         */
        export interface Backend {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Backend";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.BackendSpec;
            status: outputs.gateway.v1alpha1.BackendStatus;
        }

        /**
         * Spec defines the desired state of Backend.
         */
        export interface BackendSpec {
            /**
             * AppProtocols defines the application protocols to be supported when connecting to the backend.
             */
            appProtocols: string[];
            /**
             * Endpoints defines the endpoints to be used when connecting to the backend.
             */
            endpoints: outputs.gateway.v1alpha1.BackendSpecEndpoints[];
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            tls: outputs.gateway.v1alpha1.BackendSpecTls;
            /**
             * Type defines the type of the backend. Defaults to "Endpoints"
             */
            type: string;
        }

        /**
         * BackendEndpoint describes a backend endpoint, which can be either a fully-qualified domain name, IP address or unix domain socket
         * corresponding to Envoy's Address: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address
         */
        export interface BackendSpecEndpoints {
            fqdn: outputs.gateway.v1alpha1.BackendSpecEndpointsFqdn;
            /**
             * Hostname defines an optional hostname for the backend endpoint.
             */
            hostname: string;
            ip: outputs.gateway.v1alpha1.BackendSpecEndpointsIp;
            unix: outputs.gateway.v1alpha1.BackendSpecEndpointsUnix;
            /**
             * Zone defines the service zone of the backend endpoint.
             */
            zone: string;
        }

        /**
         * FQDN defines a FQDN endpoint
         */
        export interface BackendSpecEndpointsFqdn {
            /**
             * Hostname defines the FQDN hostname of the backend endpoint.
             */
            hostname: string;
            /**
             * Port defines the port of the backend endpoint.
             */
            port: number;
        }

        /**
         * FQDN defines a FQDN endpoint
         */
        export interface BackendSpecEndpointsFqdnPatch {
            /**
             * Hostname defines the FQDN hostname of the backend endpoint.
             */
            hostname: string;
            /**
             * Port defines the port of the backend endpoint.
             */
            port: number;
        }

        /**
         * IP defines an IP endpoint. Supports both IPv4 and IPv6 addresses.
         */
        export interface BackendSpecEndpointsIp {
            /**
             * Address defines the IP address of the backend endpoint.
             * Supports both IPv4 and IPv6 addresses.
             */
            address: string;
            /**
             * Port defines the port of the backend endpoint.
             */
            port: number;
        }

        /**
         * IP defines an IP endpoint. Supports both IPv4 and IPv6 addresses.
         */
        export interface BackendSpecEndpointsIpPatch {
            /**
             * Address defines the IP address of the backend endpoint.
             * Supports both IPv4 and IPv6 addresses.
             */
            address: string;
            /**
             * Port defines the port of the backend endpoint.
             */
            port: number;
        }

        /**
         * BackendEndpoint describes a backend endpoint, which can be either a fully-qualified domain name, IP address or unix domain socket
         * corresponding to Envoy's Address: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address
         */
        export interface BackendSpecEndpointsPatch {
            fqdn: outputs.gateway.v1alpha1.BackendSpecEndpointsFqdnPatch;
            /**
             * Hostname defines an optional hostname for the backend endpoint.
             */
            hostname: string;
            ip: outputs.gateway.v1alpha1.BackendSpecEndpointsIpPatch;
            unix: outputs.gateway.v1alpha1.BackendSpecEndpointsUnixPatch;
            /**
             * Zone defines the service zone of the backend endpoint.
             */
            zone: string;
        }

        /**
         * Unix defines the unix domain socket endpoint
         */
        export interface BackendSpecEndpointsUnix {
            /**
             * Path defines the unix domain socket path of the backend endpoint.
             * The path length must not exceed 108 characters.
             */
            path: string;
        }

        /**
         * Unix defines the unix domain socket endpoint
         */
        export interface BackendSpecEndpointsUnixPatch {
            /**
             * Path defines the unix domain socket path of the backend endpoint.
             * The path length must not exceed 108 characters.
             */
            path: string;
        }

        /**
         * Spec defines the desired state of Backend.
         */
        export interface BackendSpecPatch {
            /**
             * AppProtocols defines the application protocols to be supported when connecting to the backend.
             */
            appProtocols: string[];
            /**
             * Endpoints defines the endpoints to be used when connecting to the backend.
             */
            endpoints: outputs.gateway.v1alpha1.BackendSpecEndpointsPatch[];
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            tls: outputs.gateway.v1alpha1.BackendSpecTlsPatch;
            /**
             * Type defines the type of the backend. Defaults to "Endpoints"
             */
            type: string;
        }

        /**
         * TLS defines the TLS settings for the backend.
         * If TLS is specified here and a BackendTLSPolicy is also configured for the backend, the final TLS settings will
         * be a merge of both configurations. In case of overlapping fields, the values defined in the BackendTLSPolicy will
         * take precedence.
         */
        export interface BackendSpecTls {
            /**
             * CACertificateRefs contains one or more references to Kubernetes objects that
             * contain TLS certificates of the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the backend.
             *
             * A single reference to a Kubernetes ConfigMap or a Kubernetes Secret,
             * with the CA certificate in a key named `ca.crt` is currently supported.
             *
             * If CACertificateRefs is empty or unspecified, then WellKnownCACertificates must be
             * specified. Only one of CACertificateRefs or WellKnownCACertificates may be specified,
             * not both.
             */
            caCertificateRefs: outputs.gateway.v1alpha1.BackendSpecTlsCaCertificateRefs[];
            /**
             * InsecureSkipVerify indicates whether the upstream's certificate verification
             * should be skipped. Defaults to "false".
             */
            insecureSkipVerify: boolean;
            /**
             * WellKnownCACertificates specifies whether system CA certificates may be used in
             * the TLS handshake between the gateway and backend pod.
             *
             * If WellKnownCACertificates is unspecified or empty (""), then CACertificateRefs
             * must be specified with at least one entry for a valid configuration. Only one of
             * CACertificateRefs or WellKnownCACertificates may be specified, not both.
             */
            wellKnownCACertificates: string;
        }

        /**
         * LocalObjectReference identifies an API object within the namespace of the
         * referrer.
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface BackendSpecTlsCaCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * LocalObjectReference identifies an API object within the namespace of the
         * referrer.
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface BackendSpecTlsCaCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * TLS defines the TLS settings for the backend.
         * If TLS is specified here and a BackendTLSPolicy is also configured for the backend, the final TLS settings will
         * be a merge of both configurations. In case of overlapping fields, the values defined in the BackendTLSPolicy will
         * take precedence.
         */
        export interface BackendSpecTlsPatch {
            /**
             * CACertificateRefs contains one or more references to Kubernetes objects that
             * contain TLS certificates of the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the backend.
             *
             * A single reference to a Kubernetes ConfigMap or a Kubernetes Secret,
             * with the CA certificate in a key named `ca.crt` is currently supported.
             *
             * If CACertificateRefs is empty or unspecified, then WellKnownCACertificates must be
             * specified. Only one of CACertificateRefs or WellKnownCACertificates may be specified,
             * not both.
             */
            caCertificateRefs: outputs.gateway.v1alpha1.BackendSpecTlsCaCertificateRefsPatch[];
            /**
             * InsecureSkipVerify indicates whether the upstream's certificate verification
             * should be skipped. Defaults to "false".
             */
            insecureSkipVerify: boolean;
            /**
             * WellKnownCACertificates specifies whether system CA certificates may be used in
             * the TLS handshake between the gateway and backend pod.
             *
             * If WellKnownCACertificates is unspecified or empty (""), then CACertificateRefs
             * must be specified with at least one entry for a valid configuration. Only one of
             * CACertificateRefs or WellKnownCACertificates may be specified, not both.
             */
            wellKnownCACertificates: string;
        }

        /**
         * Status defines the current status of Backend.
         */
        export interface BackendStatus {
            /**
             * Conditions describe the current conditions of the Backend.
             */
            conditions: outputs.gateway.v1alpha1.BackendStatusConditions[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface BackendStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface BackendStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Status defines the current status of Backend.
         */
        export interface BackendStatusPatch {
            /**
             * Conditions describe the current conditions of the Backend.
             */
            conditions: outputs.gateway.v1alpha1.BackendStatusConditionsPatch[];
        }

        /**
         * BackendTrafficPolicy allows the user to configure the behavior of the connection
         * between the Envoy Proxy listener and the backend service.
         */
        export interface BackendTrafficPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "BackendTrafficPolicy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.BackendTrafficPolicySpec;
            status: outputs.gateway.v1alpha1.BackendTrafficPolicyStatus;
        }

        /**
         * spec defines the desired state of BackendTrafficPolicy.
         */
        export interface BackendTrafficPolicySpec {
            circuitBreaker: outputs.gateway.v1alpha1.BackendTrafficPolicySpecCircuitBreaker;
            /**
             * The compression config for the http streams.
             */
            compression: outputs.gateway.v1alpha1.BackendTrafficPolicySpecCompression[];
            connection: outputs.gateway.v1alpha1.BackendTrafficPolicySpecConnection;
            dns: outputs.gateway.v1alpha1.BackendTrafficPolicySpecDns;
            faultInjection: outputs.gateway.v1alpha1.BackendTrafficPolicySpecFaultInjection;
            healthCheck: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheck;
            http2: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHttp2;
            /**
             * HTTPUpgrade defines the configuration for HTTP protocol upgrades.
             * If not specified, the default upgrade configuration(websocket) will be used.
             */
            httpUpgrade: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHttpUpgrade[];
            loadBalancer: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancer;
            /**
             * MergeType determines how this configuration is merged with existing BackendTrafficPolicy
             * configurations targeting a parent resource. When set, this configuration will be merged
             * into a parent BackendTrafficPolicy (i.e. the one targeting a Gateway or Listener).
             * This field cannot be set when targeting a parent resource (Gateway).
             * If unset, no merging occurs, and only the most specific configuration takes effect.
             */
            mergeType: string;
            proxyProtocol: outputs.gateway.v1alpha1.BackendTrafficPolicySpecProxyProtocol;
            rateLimit: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimit;
            requestBuffer: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRequestBuffer;
            /**
             * ResponseOverride defines the configuration to override specific responses with a custom one.
             * If multiple configurations are specified, the first one to match wins.
             */
            responseOverride: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverride[];
            retry: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetry;
            targetRef: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetRef;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetRefs[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetSelectors[];
            tcpKeepalive: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTcpKeepalive;
            telemetry: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTelemetry;
            timeout: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTimeout;
            /**
             * UseClientProtocol configures Envoy to prefer sending requests to backends using
             * the same HTTP protocol that the incoming request used. Defaults to false, which means
             * that Envoy will use the protocol indicated by the attached BackendRef.
             */
            useClientProtocol: boolean;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface BackendTrafficPolicySpecCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.BackendTrafficPolicySpecCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface BackendTrafficPolicySpecCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.BackendTrafficPolicySpecCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface BackendTrafficPolicySpecCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface BackendTrafficPolicySpecCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Compression defines the config of enabling compression.
         * This can help reduce the bandwidth at the expense of higher CPU.
         */
        export interface BackendTrafficPolicySpecCompression {
            /**
             * The configuration for Brotli compressor.
             */
            brotli: {[key: string]: string};
            /**
             * The configuration for GZIP compressor.
             */
            gzip: {[key: string]: string};
            /**
             * CompressorType defines the compressor type to use for compression.
             */
            type: string;
        }

        /**
         * Compression defines the config of enabling compression.
         * This can help reduce the bandwidth at the expense of higher CPU.
         */
        export interface BackendTrafficPolicySpecCompressionPatch {
            /**
             * The configuration for Brotli compressor.
             */
            brotli: {[key: string]: string};
            /**
             * The configuration for GZIP compressor.
             */
            gzip: {[key: string]: string};
            /**
             * CompressorType defines the compressor type to use for compression.
             */
            type: string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface BackendTrafficPolicySpecConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface BackendTrafficPolicySpecConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface BackendTrafficPolicySpecDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface BackendTrafficPolicySpecDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * FaultInjection defines the fault injection policy to be applied. This configuration can be used to
         * inject delays and abort requests to mimic failure scenarios such as service failures and overloads
         */
        export interface BackendTrafficPolicySpecFaultInjection {
            abort: outputs.gateway.v1alpha1.BackendTrafficPolicySpecFaultInjectionAbort;
            delay: outputs.gateway.v1alpha1.BackendTrafficPolicySpecFaultInjectionDelay;
        }

        /**
         * If specified, the request will be aborted if it meets the configuration criteria.
         */
        export interface BackendTrafficPolicySpecFaultInjectionAbort {
            /**
             * GrpcStatus specifies the GRPC status code to be returned
             */
            grpcStatus: number;
            /**
             * StatusCode specifies the HTTP status code to be returned
             */
            httpStatus: number;
            /**
             * Percentage specifies the percentage of requests to be aborted. Default 100%, if set 0, no requests will be aborted. Accuracy to 0.0001%.
             */
            percentage: number;
        }

        /**
         * If specified, the request will be aborted if it meets the configuration criteria.
         */
        export interface BackendTrafficPolicySpecFaultInjectionAbortPatch {
            /**
             * GrpcStatus specifies the GRPC status code to be returned
             */
            grpcStatus: number;
            /**
             * StatusCode specifies the HTTP status code to be returned
             */
            httpStatus: number;
            /**
             * Percentage specifies the percentage of requests to be aborted. Default 100%, if set 0, no requests will be aborted. Accuracy to 0.0001%.
             */
            percentage: number;
        }

        /**
         * If specified, a delay will be injected into the request.
         */
        export interface BackendTrafficPolicySpecFaultInjectionDelay {
            /**
             * FixedDelay specifies the fixed delay duration
             */
            fixedDelay: string;
            /**
             * Percentage specifies the percentage of requests to be delayed. Default 100%, if set 0, no requests will be delayed. Accuracy to 0.0001%.
             */
            percentage: number;
        }

        /**
         * If specified, a delay will be injected into the request.
         */
        export interface BackendTrafficPolicySpecFaultInjectionDelayPatch {
            /**
             * FixedDelay specifies the fixed delay duration
             */
            fixedDelay: string;
            /**
             * Percentage specifies the percentage of requests to be delayed. Default 100%, if set 0, no requests will be delayed. Accuracy to 0.0001%.
             */
            percentage: number;
        }

        /**
         * FaultInjection defines the fault injection policy to be applied. This configuration can be used to
         * inject delays and abort requests to mimic failure scenarios such as service failures and overloads
         */
        export interface BackendTrafficPolicySpecFaultInjectionPatch {
            abort: outputs.gateway.v1alpha1.BackendTrafficPolicySpecFaultInjectionAbortPatch;
            delay: outputs.gateway.v1alpha1.BackendTrafficPolicySpecFaultInjectionDelayPatch;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface BackendTrafficPolicySpecHealthCheck {
            active: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface BackendTrafficPolicySpecHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface BackendTrafficPolicySpecHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface BackendTrafficPolicySpecHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface BackendTrafficPolicySpecHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface BackendTrafficPolicySpecHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface BackendTrafficPolicySpecHealthCheckPatch {
            active: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface BackendTrafficPolicySpecHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface BackendTrafficPolicySpecHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * ProtocolUpgradeConfig specifies the configuration for protocol upgrades.
         */
        export interface BackendTrafficPolicySpecHttpUpgrade {
            connect: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHttpUpgradeConnect;
            /**
             * Type is the case-insensitive type of protocol upgrade.
             * e.g. `websocket`, `CONNECT`, `spdy/3.1` etc.
             */
            type: string;
        }

        /**
         * Connect specifies the configuration for the CONNECT config.
         * This is allowed only when type is CONNECT.
         */
        export interface BackendTrafficPolicySpecHttpUpgradeConnect {
            /**
             * Terminate the CONNECT request, and forwards the payload as raw TCP data.
             */
            terminate: boolean;
        }

        /**
         * Connect specifies the configuration for the CONNECT config.
         * This is allowed only when type is CONNECT.
         */
        export interface BackendTrafficPolicySpecHttpUpgradeConnectPatch {
            /**
             * Terminate the CONNECT request, and forwards the payload as raw TCP data.
             */
            terminate: boolean;
        }

        /**
         * ProtocolUpgradeConfig specifies the configuration for protocol upgrades.
         */
        export interface BackendTrafficPolicySpecHttpUpgradePatch {
            connect: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHttpUpgradeConnectPatch;
            /**
             * Type is the case-insensitive type of protocol upgrade.
             * e.g. `websocket`, `CONNECT`, `spdy/3.1` etc.
             */
            type: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface BackendTrafficPolicySpecLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface BackendTrafficPolicySpecLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface BackendTrafficPolicySpecLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface BackendTrafficPolicySpecLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface BackendTrafficPolicySpecLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface BackendTrafficPolicySpecLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface BackendTrafficPolicySpecLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface BackendTrafficPolicySpecLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface BackendTrafficPolicySpecLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface BackendTrafficPolicySpecLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface BackendTrafficPolicySpecLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface BackendTrafficPolicySpecLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface BackendTrafficPolicySpecLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface BackendTrafficPolicySpecLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface BackendTrafficPolicySpecLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface BackendTrafficPolicySpecLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * spec defines the desired state of BackendTrafficPolicy.
         */
        export interface BackendTrafficPolicySpecPatch {
            circuitBreaker: outputs.gateway.v1alpha1.BackendTrafficPolicySpecCircuitBreakerPatch;
            /**
             * The compression config for the http streams.
             */
            compression: outputs.gateway.v1alpha1.BackendTrafficPolicySpecCompressionPatch[];
            connection: outputs.gateway.v1alpha1.BackendTrafficPolicySpecConnectionPatch;
            dns: outputs.gateway.v1alpha1.BackendTrafficPolicySpecDnsPatch;
            faultInjection: outputs.gateway.v1alpha1.BackendTrafficPolicySpecFaultInjectionPatch;
            healthCheck: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHttp2Patch;
            /**
             * HTTPUpgrade defines the configuration for HTTP protocol upgrades.
             * If not specified, the default upgrade configuration(websocket) will be used.
             */
            httpUpgrade: outputs.gateway.v1alpha1.BackendTrafficPolicySpecHttpUpgradePatch[];
            loadBalancer: outputs.gateway.v1alpha1.BackendTrafficPolicySpecLoadBalancerPatch;
            /**
             * MergeType determines how this configuration is merged with existing BackendTrafficPolicy
             * configurations targeting a parent resource. When set, this configuration will be merged
             * into a parent BackendTrafficPolicy (i.e. the one targeting a Gateway or Listener).
             * This field cannot be set when targeting a parent resource (Gateway).
             * If unset, no merging occurs, and only the most specific configuration takes effect.
             */
            mergeType: string;
            proxyProtocol: outputs.gateway.v1alpha1.BackendTrafficPolicySpecProxyProtocolPatch;
            rateLimit: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitPatch;
            requestBuffer: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRequestBufferPatch;
            /**
             * ResponseOverride defines the configuration to override specific responses with a custom one.
             * If multiple configurations are specified, the first one to match wins.
             */
            responseOverride: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverridePatch[];
            retry: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryPatch;
            targetRef: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetRefPatch;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetRefsPatch[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetSelectorsPatch[];
            tcpKeepalive: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTcpKeepalivePatch;
            telemetry: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTelemetryPatch;
            timeout: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTimeoutPatch;
            /**
             * UseClientProtocol configures Envoy to prefer sending requests to backends using
             * the same HTTP protocol that the incoming request used. Defaults to false, which means
             * that Envoy will use the protocol indicated by the attached BackendRef.
             */
            useClientProtocol: boolean;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface BackendTrafficPolicySpecProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface BackendTrafficPolicySpecProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * RateLimit allows the user to limit the number of incoming requests
         * to a predefined value based on attributes within the traffic flow.
         */
        export interface BackendTrafficPolicySpecRateLimit {
            global: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobal;
            local: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocal;
            /**
             * Type decides the scope for the RateLimits.
             * Valid RateLimitType values are "Global" or "Local".
             */
            type: string;
        }

        /**
         * Global defines global rate limit configuration.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobal {
            /**
             * Rules are a list of RateLimit selectors and limits. Each rule and its
             * associated limit is applied in a mutually exclusive way. If a request
             * matches multiple rules, each of their associated limits get applied, so a
             * single request might increase the rate limit counters for multiple rules
             * if selected. The rate limit service will return a logical OR of the individual
             * rate limit decisions of all matching rules. For example, if a request
             * matches two rules, one rate limited and one not, the final decision will be
             * to rate limit the request.
             */
            rules: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRules[];
        }

        /**
         * Global defines global rate limit configuration.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalPatch {
            /**
             * Rules are a list of RateLimit selectors and limits. Each rule and its
             * associated limit is applied in a mutually exclusive way. If a request
             * matches multiple rules, each of their associated limits get applied, so a
             * single request might increase the rate limit counters for multiple rules
             * if selected. The rate limit service will return a logical OR of the individual
             * rate limit decisions of all matching rules. For example, if a request
             * matches two rules, one rate limited and one not, the final decision will be
             * to rate limit the request.
             */
            rules: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesPatch[];
        }

        /**
         * RateLimitRule defines the semantics for matching attributes
         * from the incoming requests, and setting limits for them.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRules {
            /**
             * ClientSelectors holds the list of select conditions to select
             * specific clients using attributes from the traffic flow.
             * All individual select conditions must hold True for this rule
             * and its limit to be applied.
             *
             * If no client selectors are specified, the rule applies to all traffic of
             * the targeted Route.
             *
             * If the policy targets a Gateway, the rule applies to each Route of the Gateway.
             * Please note that each Route has its own rate limit counters. For example,
             * if a Gateway has two Routes, and the policy has a rule with limit 10rps,
             * each Route will have its own 10rps limit.
             */
            clientSelectors: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectors[];
            cost: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCost;
            limit: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesLimit;
            /**
             * Shared determines whether this rate limit rule applies across all the policy targets.
             * If set to true, the rule is treated as a common bucket and is shared across all policy targets (xRoutes).
             * Default: false.
             */
            shared: boolean;
        }

        /**
         * RateLimitSelectCondition specifies the attributes within the traffic flow that can
         * be used to select a subset of clients to be ratelimited.
         * All the individual conditions must hold True for the overall condition to hold True.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectors {
            /**
             * Headers is a list of request headers to match. Multiple header values are ANDed together,
             * meaning, a request MUST match all the specified headers.
             * At least one of headers or sourceCIDR condition must be specified.
             */
            headers: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsHeaders[];
            sourceCIDR: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsSourceCIDR;
        }

        /**
         * HeaderMatch defines the match attributes within the HTTP Headers of the request.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsHeaders {
            /**
             * Invert specifies whether the value match result will be inverted.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            invert: boolean;
            /**
             * Name of the HTTP header.
             * The header name is case-insensitive unless PreserveHeaderCase is set to true.
             * For example, "Foo" and "foo" are considered the same header.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             */
            type: string;
            /**
             * Value within the HTTP header.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            value: string;
        }

        /**
         * HeaderMatch defines the match attributes within the HTTP Headers of the request.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsHeadersPatch {
            /**
             * Invert specifies whether the value match result will be inverted.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            invert: boolean;
            /**
             * Name of the HTTP header.
             * The header name is case-insensitive unless PreserveHeaderCase is set to true.
             * For example, "Foo" and "foo" are considered the same header.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             */
            type: string;
            /**
             * Value within the HTTP header.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            value: string;
        }

        /**
         * RateLimitSelectCondition specifies the attributes within the traffic flow that can
         * be used to select a subset of clients to be ratelimited.
         * All the individual conditions must hold True for the overall condition to hold True.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsPatch {
            /**
             * Headers is a list of request headers to match. Multiple header values are ANDed together,
             * meaning, a request MUST match all the specified headers.
             * At least one of headers or sourceCIDR condition must be specified.
             */
            headers: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsHeadersPatch[];
            sourceCIDR: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsSourceCIDRPatch;
        }

        /**
         * SourceCIDR is the client IP Address range to match on.
         * At least one of headers or sourceCIDR condition must be specified.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsSourceCIDR {
            type: string;
            /**
             * Value is the IP CIDR that represents the range of Source IP Addresses of the client.
             * These could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header.
             * For example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`.
             */
            value: string;
        }

        /**
         * SourceCIDR is the client IP Address range to match on.
         * At least one of headers or sourceCIDR condition must be specified.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsSourceCIDRPatch {
            type: string;
            /**
             * Value is the IP CIDR that represents the range of Source IP Addresses of the client.
             * These could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header.
             * For example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`.
             */
            value: string;
        }

        /**
         * Cost specifies the cost of requests and responses for the rule.
         *
         * This is optional and if not specified, the default behavior is to reduce the rate limit counters by 1 on
         * the request path and do not reduce the rate limit counters on the response path.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCost {
            request: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostRequest;
            response: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostResponse;
        }

        /**
         * Cost specifies the cost of requests and responses for the rule.
         *
         * This is optional and if not specified, the default behavior is to reduce the rate limit counters by 1 on
         * the request path and do not reduce the rate limit counters on the response path.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostPatch {
            request: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostRequestPatch;
            response: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostResponsePatch;
        }

        /**
         * Request specifies the number to reduce the rate limit counters
         * on the request path. If this is not specified, the default behavior
         * is to reduce the rate limit counters by 1.
         *
         * When Envoy receives a request that matches the rule, it tries to reduce the
         * rate limit counters by the specified number. If the counter doesn't have
         * enough capacity, the request is rate limited.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostRequest {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostRequestMetadata;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostRequestMetadata {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostRequestMetadataPatch {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Request specifies the number to reduce the rate limit counters
         * on the request path. If this is not specified, the default behavior
         * is to reduce the rate limit counters by 1.
         *
         * When Envoy receives a request that matches the rule, it tries to reduce the
         * rate limit counters by the specified number. If the counter doesn't have
         * enough capacity, the request is rate limited.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostRequestPatch {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostRequestMetadataPatch;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Response specifies the number to reduce the rate limit counters
         * after the response is sent back to the client or the request stream is closed.
         *
         * The cost is used to reduce the rate limit counters for the matching requests.
         * Since the reduction happens after the request stream is complete, the rate limit
         * won't be enforced for the current request, but for the subsequent matching requests.
         *
         * This is optional and if not specified, the rate limit counters are not reduced
         * on the response path.
         *
         * Currently, this is only supported for HTTP Global Rate Limits.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostResponse {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostResponseMetadata;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostResponseMetadata {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostResponseMetadataPatch {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Response specifies the number to reduce the rate limit counters
         * after the response is sent back to the client or the request stream is closed.
         *
         * The cost is used to reduce the rate limit counters for the matching requests.
         * Since the reduction happens after the request stream is complete, the rate limit
         * won't be enforced for the current request, but for the subsequent matching requests.
         *
         * This is optional and if not specified, the rate limit counters are not reduced
         * on the response path.
         *
         * Currently, this is only supported for HTTP Global Rate Limits.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesCostResponsePatch {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostResponseMetadataPatch;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Limit holds the rate limit values.
         * This limit is applied for traffic flows when the selectors
         * compute to True, causing the request to be counted towards the limit.
         * The limit is enforced and the request is ratelimited, i.e. a response with
         * 429 HTTP status code is sent back to the client when
         * the selected requests have reached the limit.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesLimit {
            requests: number;
            /**
             * RateLimitUnit specifies the intervals for setting rate limits.
             * Valid RateLimitUnit values are "Second", "Minute", "Hour", "Day", "Month" and "Year".
             */
            unit: string;
        }

        /**
         * Limit holds the rate limit values.
         * This limit is applied for traffic flows when the selectors
         * compute to True, causing the request to be counted towards the limit.
         * The limit is enforced and the request is ratelimited, i.e. a response with
         * 429 HTTP status code is sent back to the client when
         * the selected requests have reached the limit.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesLimitPatch {
            requests: number;
            /**
             * RateLimitUnit specifies the intervals for setting rate limits.
             * Valid RateLimitUnit values are "Second", "Minute", "Hour", "Day", "Month" and "Year".
             */
            unit: string;
        }

        /**
         * RateLimitRule defines the semantics for matching attributes
         * from the incoming requests, and setting limits for them.
         */
        export interface BackendTrafficPolicySpecRateLimitGlobalRulesPatch {
            /**
             * ClientSelectors holds the list of select conditions to select
             * specific clients using attributes from the traffic flow.
             * All individual select conditions must hold True for this rule
             * and its limit to be applied.
             *
             * If no client selectors are specified, the rule applies to all traffic of
             * the targeted Route.
             *
             * If the policy targets a Gateway, the rule applies to each Route of the Gateway.
             * Please note that each Route has its own rate limit counters. For example,
             * if a Gateway has two Routes, and the policy has a rule with limit 10rps,
             * each Route will have its own 10rps limit.
             */
            clientSelectors: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesClientSelectorsPatch[];
            cost: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesCostPatch;
            limit: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalRulesLimitPatch;
            /**
             * Shared determines whether this rate limit rule applies across all the policy targets.
             * If set to true, the rule is treated as a common bucket and is shared across all policy targets (xRoutes).
             * Default: false.
             */
            shared: boolean;
        }

        /**
         * Local defines local rate limit configuration.
         */
        export interface BackendTrafficPolicySpecRateLimitLocal {
            /**
             * Rules are a list of RateLimit selectors and limits. If a request matches
             * multiple rules, the strictest limit is applied. For example, if a request
             * matches two rules, one with 10rps and one with 20rps, the final limit will
             * be based on the rule with 10rps.
             */
            rules: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRules[];
        }

        /**
         * Local defines local rate limit configuration.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalPatch {
            /**
             * Rules are a list of RateLimit selectors and limits. If a request matches
             * multiple rules, the strictest limit is applied. For example, if a request
             * matches two rules, one with 10rps and one with 20rps, the final limit will
             * be based on the rule with 10rps.
             */
            rules: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesPatch[];
        }

        /**
         * RateLimitRule defines the semantics for matching attributes
         * from the incoming requests, and setting limits for them.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRules {
            /**
             * ClientSelectors holds the list of select conditions to select
             * specific clients using attributes from the traffic flow.
             * All individual select conditions must hold True for this rule
             * and its limit to be applied.
             *
             * If no client selectors are specified, the rule applies to all traffic of
             * the targeted Route.
             *
             * If the policy targets a Gateway, the rule applies to each Route of the Gateway.
             * Please note that each Route has its own rate limit counters. For example,
             * if a Gateway has two Routes, and the policy has a rule with limit 10rps,
             * each Route will have its own 10rps limit.
             */
            clientSelectors: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesClientSelectors[];
            cost: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCost;
            limit: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesLimit;
            /**
             * Shared determines whether this rate limit rule applies across all the policy targets.
             * If set to true, the rule is treated as a common bucket and is shared across all policy targets (xRoutes).
             * Default: false.
             */
            shared: boolean;
        }

        /**
         * RateLimitSelectCondition specifies the attributes within the traffic flow that can
         * be used to select a subset of clients to be ratelimited.
         * All the individual conditions must hold True for the overall condition to hold True.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesClientSelectors {
            /**
             * Headers is a list of request headers to match. Multiple header values are ANDed together,
             * meaning, a request MUST match all the specified headers.
             * At least one of headers or sourceCIDR condition must be specified.
             */
            headers: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsHeaders[];
            sourceCIDR: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsSourceCIDR;
        }

        /**
         * HeaderMatch defines the match attributes within the HTTP Headers of the request.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsHeaders {
            /**
             * Invert specifies whether the value match result will be inverted.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            invert: boolean;
            /**
             * Name of the HTTP header.
             * The header name is case-insensitive unless PreserveHeaderCase is set to true.
             * For example, "Foo" and "foo" are considered the same header.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             */
            type: string;
            /**
             * Value within the HTTP header.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            value: string;
        }

        /**
         * HeaderMatch defines the match attributes within the HTTP Headers of the request.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsHeadersPatch {
            /**
             * Invert specifies whether the value match result will be inverted.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            invert: boolean;
            /**
             * Name of the HTTP header.
             * The header name is case-insensitive unless PreserveHeaderCase is set to true.
             * For example, "Foo" and "foo" are considered the same header.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             */
            type: string;
            /**
             * Value within the HTTP header.
             * Do not set this field when Type="Distinct", implying matching on any/all unique
             * values within the header.
             */
            value: string;
        }

        /**
         * RateLimitSelectCondition specifies the attributes within the traffic flow that can
         * be used to select a subset of clients to be ratelimited.
         * All the individual conditions must hold True for the overall condition to hold True.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsPatch {
            /**
             * Headers is a list of request headers to match. Multiple header values are ANDed together,
             * meaning, a request MUST match all the specified headers.
             * At least one of headers or sourceCIDR condition must be specified.
             */
            headers: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsHeadersPatch[];
            sourceCIDR: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsSourceCIDRPatch;
        }

        /**
         * SourceCIDR is the client IP Address range to match on.
         * At least one of headers or sourceCIDR condition must be specified.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsSourceCIDR {
            type: string;
            /**
             * Value is the IP CIDR that represents the range of Source IP Addresses of the client.
             * These could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header.
             * For example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`.
             */
            value: string;
        }

        /**
         * SourceCIDR is the client IP Address range to match on.
         * At least one of headers or sourceCIDR condition must be specified.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsSourceCIDRPatch {
            type: string;
            /**
             * Value is the IP CIDR that represents the range of Source IP Addresses of the client.
             * These could also be the intermediate addresses through which the request has flown through and is part of the  `X-Forwarded-For` header.
             * For example, `192.168.0.1/32`, `192.168.0.0/24`, `001:db8::/64`.
             */
            value: string;
        }

        /**
         * Cost specifies the cost of requests and responses for the rule.
         *
         * This is optional and if not specified, the default behavior is to reduce the rate limit counters by 1 on
         * the request path and do not reduce the rate limit counters on the response path.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCost {
            request: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostRequest;
            response: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostResponse;
        }

        /**
         * Cost specifies the cost of requests and responses for the rule.
         *
         * This is optional and if not specified, the default behavior is to reduce the rate limit counters by 1 on
         * the request path and do not reduce the rate limit counters on the response path.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostPatch {
            request: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostRequestPatch;
            response: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostResponsePatch;
        }

        /**
         * Request specifies the number to reduce the rate limit counters
         * on the request path. If this is not specified, the default behavior
         * is to reduce the rate limit counters by 1.
         *
         * When Envoy receives a request that matches the rule, it tries to reduce the
         * rate limit counters by the specified number. If the counter doesn't have
         * enough capacity, the request is rate limited.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostRequest {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostRequestMetadata;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostRequestMetadata {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostRequestMetadataPatch {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Request specifies the number to reduce the rate limit counters
         * on the request path. If this is not specified, the default behavior
         * is to reduce the rate limit counters by 1.
         *
         * When Envoy receives a request that matches the rule, it tries to reduce the
         * rate limit counters by the specified number. If the counter doesn't have
         * enough capacity, the request is rate limited.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostRequestPatch {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostRequestMetadataPatch;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Response specifies the number to reduce the rate limit counters
         * after the response is sent back to the client or the request stream is closed.
         *
         * The cost is used to reduce the rate limit counters for the matching requests.
         * Since the reduction happens after the request stream is complete, the rate limit
         * won't be enforced for the current request, but for the subsequent matching requests.
         *
         * This is optional and if not specified, the rate limit counters are not reduced
         * on the response path.
         *
         * Currently, this is only supported for HTTP Global Rate Limits.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostResponse {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostResponseMetadata;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostResponseMetadata {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Metadata specifies the per-request metadata to retrieve the usage number from.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostResponseMetadataPatch {
            /**
             * Key is the key to retrieve the usage number from the filter metadata.
             */
            key: string;
            /**
             * Namespace is the namespace of the dynamic metadata.
             */
            namespace: string;
        }

        /**
         * Response specifies the number to reduce the rate limit counters
         * after the response is sent back to the client or the request stream is closed.
         *
         * The cost is used to reduce the rate limit counters for the matching requests.
         * Since the reduction happens after the request stream is complete, the rate limit
         * won't be enforced for the current request, but for the subsequent matching requests.
         *
         * This is optional and if not specified, the rate limit counters are not reduced
         * on the response path.
         *
         * Currently, this is only supported for HTTP Global Rate Limits.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesCostResponsePatch {
            /**
             * From specifies where to get the rate limit cost. Currently, only "Number" and "Metadata" are supported.
             */
            from: string;
            metadata: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostResponseMetadataPatch;
            /**
             * Number specifies the fixed usage number to reduce the rate limit counters.
             * Using zero can be used to only check the rate limit counters without reducing them.
             */
            number: number;
        }

        /**
         * Limit holds the rate limit values.
         * This limit is applied for traffic flows when the selectors
         * compute to True, causing the request to be counted towards the limit.
         * The limit is enforced and the request is ratelimited, i.e. a response with
         * 429 HTTP status code is sent back to the client when
         * the selected requests have reached the limit.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesLimit {
            requests: number;
            /**
             * RateLimitUnit specifies the intervals for setting rate limits.
             * Valid RateLimitUnit values are "Second", "Minute", "Hour", "Day", "Month" and "Year".
             */
            unit: string;
        }

        /**
         * Limit holds the rate limit values.
         * This limit is applied for traffic flows when the selectors
         * compute to True, causing the request to be counted towards the limit.
         * The limit is enforced and the request is ratelimited, i.e. a response with
         * 429 HTTP status code is sent back to the client when
         * the selected requests have reached the limit.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesLimitPatch {
            requests: number;
            /**
             * RateLimitUnit specifies the intervals for setting rate limits.
             * Valid RateLimitUnit values are "Second", "Minute", "Hour", "Day", "Month" and "Year".
             */
            unit: string;
        }

        /**
         * RateLimitRule defines the semantics for matching attributes
         * from the incoming requests, and setting limits for them.
         */
        export interface BackendTrafficPolicySpecRateLimitLocalRulesPatch {
            /**
             * ClientSelectors holds the list of select conditions to select
             * specific clients using attributes from the traffic flow.
             * All individual select conditions must hold True for this rule
             * and its limit to be applied.
             *
             * If no client selectors are specified, the rule applies to all traffic of
             * the targeted Route.
             *
             * If the policy targets a Gateway, the rule applies to each Route of the Gateway.
             * Please note that each Route has its own rate limit counters. For example,
             * if a Gateway has two Routes, and the policy has a rule with limit 10rps,
             * each Route will have its own 10rps limit.
             */
            clientSelectors: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesClientSelectorsPatch[];
            cost: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesCostPatch;
            limit: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalRulesLimitPatch;
            /**
             * Shared determines whether this rate limit rule applies across all the policy targets.
             * If set to true, the rule is treated as a common bucket and is shared across all policy targets (xRoutes).
             * Default: false.
             */
            shared: boolean;
        }

        /**
         * RateLimit allows the user to limit the number of incoming requests
         * to a predefined value based on attributes within the traffic flow.
         */
        export interface BackendTrafficPolicySpecRateLimitPatch {
            global: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitGlobalPatch;
            local: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRateLimitLocalPatch;
            /**
             * Type decides the scope for the RateLimits.
             * Valid RateLimitType values are "Global" or "Local".
             */
            type: string;
        }

        /**
         * RequestBuffer allows the gateway to buffer and fully receive each request from a client before continuing to send the request
         * upstream to the backends. This can be helpful to shield your backend servers from slow clients, and also to enforce a maximum size per request
         * as any requests larger than the buffer size will be rejected.
         *
         * This can have a negative performance impact so should only be enabled when necessary.
         *
         * When enabling this option, you should also configure your connection buffer size to account for these request buffers. There will also be an
         * increase in memory usage for Envoy that should be accounted for in your deployment settings.
         */
        export interface BackendTrafficPolicySpecRequestBuffer {
            /**
             * Limit specifies the maximum allowed size in bytes for each incoming request buffer.
             * If exceeded, the request will be rejected with HTTP 413 Content Too Large.
             *
             * Accepts values in resource.Quantity format (e.g., "10Mi", "500Ki").
             */
            limit: number | string;
        }

        /**
         * RequestBuffer allows the gateway to buffer and fully receive each request from a client before continuing to send the request
         * upstream to the backends. This can be helpful to shield your backend servers from slow clients, and also to enforce a maximum size per request
         * as any requests larger than the buffer size will be rejected.
         *
         * This can have a negative performance impact so should only be enabled when necessary.
         *
         * When enabling this option, you should also configure your connection buffer size to account for these request buffers. There will also be an
         * increase in memory usage for Envoy that should be accounted for in your deployment settings.
         */
        export interface BackendTrafficPolicySpecRequestBufferPatch {
            /**
             * Limit specifies the maximum allowed size in bytes for each incoming request buffer.
             * If exceeded, the request will be rejected with HTTP 413 Content Too Large.
             *
             * Accepts values in resource.Quantity format (e.g., "10Mi", "500Ki").
             */
            limit: number | string;
        }

        /**
         * ResponseOverride defines the configuration to override specific responses with a custom one.
         */
        export interface BackendTrafficPolicySpecResponseOverride {
            match: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideMatch;
            redirect: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideRedirect;
            response: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideResponse;
        }

        /**
         * Match configuration.
         */
        export interface BackendTrafficPolicySpecResponseOverrideMatch {
            /**
             * Status code to match on. The match evaluates to true if any of the matches are successful.
             */
            statusCodes: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideMatchStatusCodes[];
        }

        /**
         * Match configuration.
         */
        export interface BackendTrafficPolicySpecResponseOverrideMatchPatch {
            /**
             * Status code to match on. The match evaluates to true if any of the matches are successful.
             */
            statusCodes: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideMatchStatusCodesPatch[];
        }

        /**
         * StatusCodeMatch defines the configuration for matching a status code.
         */
        export interface BackendTrafficPolicySpecResponseOverrideMatchStatusCodes {
            range: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideMatchStatusCodesRange;
            /**
             * Type is the type of value.
             * Valid values are Value and Range, default is Value.
             */
            type: string;
            /**
             * Value contains the value of the status code.
             */
            value: number;
        }

        /**
         * StatusCodeMatch defines the configuration for matching a status code.
         */
        export interface BackendTrafficPolicySpecResponseOverrideMatchStatusCodesPatch {
            range: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideMatchStatusCodesRangePatch;
            /**
             * Type is the type of value.
             * Valid values are Value and Range, default is Value.
             */
            type: string;
            /**
             * Value contains the value of the status code.
             */
            value: number;
        }

        /**
         * Range contains the range of status codes.
         */
        export interface BackendTrafficPolicySpecResponseOverrideMatchStatusCodesRange {
            /**
             * End of the range, including the end value.
             */
            end: number;
            /**
             * Start of the range, including the start value.
             */
            start: number;
        }

        /**
         * Range contains the range of status codes.
         */
        export interface BackendTrafficPolicySpecResponseOverrideMatchStatusCodesRangePatch {
            /**
             * End of the range, including the end value.
             */
            end: number;
            /**
             * Start of the range, including the start value.
             */
            start: number;
        }

        /**
         * ResponseOverride defines the configuration to override specific responses with a custom one.
         */
        export interface BackendTrafficPolicySpecResponseOverridePatch {
            match: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideMatchPatch;
            redirect: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideRedirectPatch;
            response: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideResponsePatch;
        }

        /**
         * Redirect configuration
         */
        export interface BackendTrafficPolicySpecResponseOverrideRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             */
            hostname: string;
            path: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideRedirectPath;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If redirect scheme is not-empty, the well-known port associated with the redirect scheme will be used.
             * Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a
             * well-known port or redirect scheme is empty, the listener port of the Gateway will be used.
             *
             * Port will not be added in the 'Location' header if scheme is HTTP and port is 80
             * or scheme is HTTPS and port is 443.
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             */
            statusCode: number;
        }

        /**
         * Redirect configuration
         */
        export interface BackendTrafficPolicySpecResponseOverrideRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             */
            hostname: string;
            path: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideRedirectPathPatch;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If redirect scheme is not-empty, the well-known port associated with the redirect scheme will be used.
             * Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a
             * well-known port or redirect scheme is empty, the listener port of the Gateway will be used.
             *
             * Port will not be added in the 'Location' header if scheme is HTTP and port is 80
             * or scheme is HTTPS and port is 443.
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             */
            statusCode: number;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         * Only ReplaceFullPath path modifier is supported currently.
         */
        export interface BackendTrafficPolicySpecResponseOverrideRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         * Only ReplaceFullPath path modifier is supported currently.
         */
        export interface BackendTrafficPolicySpecResponseOverrideRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Response configuration.
         */
        export interface BackendTrafficPolicySpecResponseOverrideResponse {
            body: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideResponseBody;
            /**
             * Content Type of the response. This will be set in the Content-Type header.
             */
            contentType: string;
            /**
             * Status Code of the Custom Response
             * If unset, does not override the status of response.
             */
            statusCode: number;
        }

        /**
         * Body of the Custom Response
         * Supports Envoy command operators for dynamic content (see https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators).
         */
        export interface BackendTrafficPolicySpecResponseOverrideResponseBody {
            /**
             * Inline contains the value as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the body value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideResponseBodyValueRef;
        }

        /**
         * Body of the Custom Response
         * Supports Envoy command operators for dynamic content (see https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators).
         */
        export interface BackendTrafficPolicySpecResponseOverrideResponseBodyPatch {
            /**
             * Inline contains the value as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the body value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideResponseBodyValueRefPatch;
        }

        /**
         * ValueRef contains the contents of the body
         * specified as a local object reference.
         * Only a reference to ConfigMap is supported.
         *
         * The value of key `response.body` in the ConfigMap will be used as the response body.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface BackendTrafficPolicySpecResponseOverrideResponseBodyValueRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ValueRef contains the contents of the body
         * specified as a local object reference.
         * Only a reference to ConfigMap is supported.
         *
         * The value of key `response.body` in the ConfigMap will be used as the response body.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface BackendTrafficPolicySpecResponseOverrideResponseBodyValueRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * Response configuration.
         */
        export interface BackendTrafficPolicySpecResponseOverrideResponsePatch {
            body: outputs.gateway.v1alpha1.BackendTrafficPolicySpecResponseOverrideResponseBodyPatch;
            /**
             * Content Type of the response. This will be set in the Content-Type header.
             */
            contentType: string;
            /**
             * Status Code of the Custom Response
             * If unset, does not override the status of response.
             */
            statusCode: number;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface BackendTrafficPolicySpecRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface BackendTrafficPolicySpecRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface BackendTrafficPolicySpecRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface BackendTrafficPolicySpecRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface BackendTrafficPolicySpecRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface BackendTrafficPolicySpecRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.BackendTrafficPolicySpecRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface BackendTrafficPolicySpecRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface BackendTrafficPolicySpecRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface BackendTrafficPolicySpecTargetRef {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface BackendTrafficPolicySpecTargetRefPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface BackendTrafficPolicySpecTargetRefs {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface BackendTrafficPolicySpecTargetRefsPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        export interface BackendTrafficPolicySpecTargetSelectors {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetSelectorsMatchExpressions[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BackendTrafficPolicySpecTargetSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface BackendTrafficPolicySpecTargetSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        export interface BackendTrafficPolicySpecTargetSelectorsPatch {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTargetSelectorsMatchExpressionsPatch[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface BackendTrafficPolicySpecTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface BackendTrafficPolicySpecTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Telemetry configures the telemetry settings for the policy target (Gateway or xRoute).
         * This will override the telemetry settings in the EnvoyProxy resource.
         */
        export interface BackendTrafficPolicySpecTelemetry {
            tracing: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTelemetryTracing;
        }

        /**
         * Telemetry configures the telemetry settings for the policy target (Gateway or xRoute).
         * This will override the telemetry settings in the EnvoyProxy resource.
         */
        export interface BackendTrafficPolicySpecTelemetryPatch {
            tracing: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTelemetryTracingPatch;
        }

        /**
         * Tracing configures the tracing settings for the backend or HTTPRoute.
         */
        export interface BackendTrafficPolicySpecTelemetryTracing {
            /**
             * CustomTags defines the custom tags to add to each span.
             * If provider is kubernetes, pod name and namespace are added by default.
             */
            customTags: {[key: string]: {[key: string]: string}};
            samplingFraction: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTelemetryTracingSamplingFraction;
        }

        /**
         * Tracing configures the tracing settings for the backend or HTTPRoute.
         */
        export interface BackendTrafficPolicySpecTelemetryTracingPatch {
            /**
             * CustomTags defines the custom tags to add to each span.
             * If provider is kubernetes, pod name and namespace are added by default.
             */
            customTags: {[key: string]: {[key: string]: string}};
            samplingFraction: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTelemetryTracingSamplingFractionPatch;
        }

        /**
         * SamplingFraction represents the fraction of requests that should be
         * selected for tracing if no prior sampling decision has been made.
         *
         * This will take precedence over sampling fraction on EnvoyProxy if set.
         */
        export interface BackendTrafficPolicySpecTelemetryTracingSamplingFraction {
            denominator: number;
            numerator: number;
        }

        /**
         * SamplingFraction represents the fraction of requests that should be
         * selected for tracing if no prior sampling decision has been made.
         *
         * This will take precedence over sampling fraction on EnvoyProxy if set.
         */
        export interface BackendTrafficPolicySpecTelemetryTracingSamplingFractionPatch {
            denominator: number;
            numerator: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface BackendTrafficPolicySpecTimeout {
            http: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface BackendTrafficPolicySpecTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface BackendTrafficPolicySpecTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface BackendTrafficPolicySpecTimeoutPatch {
            http: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.BackendTrafficPolicySpecTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface BackendTrafficPolicySpecTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface BackendTrafficPolicySpecTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * status defines the current status of BackendTrafficPolicy.
         */
        export interface BackendTrafficPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.BackendTrafficPolicyStatusAncestors[];
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface BackendTrafficPolicyStatusAncestors {
            ancestorRef: outputs.gateway.v1alpha1.BackendTrafficPolicyStatusAncestorsAncestorRef;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.BackendTrafficPolicyStatusAncestorsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface BackendTrafficPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface BackendTrafficPolicyStatusAncestorsAncestorRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface BackendTrafficPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface BackendTrafficPolicyStatusAncestorsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface BackendTrafficPolicyStatusAncestorsPatch {
            ancestorRef: outputs.gateway.v1alpha1.BackendTrafficPolicyStatusAncestorsAncestorRefPatch;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.BackendTrafficPolicyStatusAncestorsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * status defines the current status of BackendTrafficPolicy.
         */
        export interface BackendTrafficPolicyStatusPatch {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.BackendTrafficPolicyStatusAncestorsPatch[];
        }

        /**
         * ClientTrafficPolicy allows the user to configure the behavior of the connection
         * between the downstream client and Envoy Proxy listener.
         */
        export interface ClientTrafficPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ClientTrafficPolicy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.ClientTrafficPolicySpec;
            status: outputs.gateway.v1alpha1.ClientTrafficPolicyStatus;
        }

        /**
         * Spec defines the desired state of ClientTrafficPolicy.
         */
        export interface ClientTrafficPolicySpec {
            clientIPDetection: outputs.gateway.v1alpha1.ClientTrafficPolicySpecClientIPDetection;
            connection: outputs.gateway.v1alpha1.ClientTrafficPolicySpecConnection;
            /**
             * EnableProxyProtocol interprets the ProxyProtocol header and adds the
             * Client Address into the X-Forwarded-For header.
             * Note Proxy Protocol must be present when this field is set, else the connection
             * is closed.
             *
             * Deprecated: Use ProxyProtocol instead.
             */
            enableProxyProtocol: boolean;
            headers: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeaders;
            healthCheck: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHealthCheck;
            http1: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHttp1;
            http2: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHttp2;
            /**
             * HTTP3 provides HTTP/3 configuration on the listener.
             */
            http3: {[key: string]: string};
            path: outputs.gateway.v1alpha1.ClientTrafficPolicySpecPath;
            proxyProtocol: outputs.gateway.v1alpha1.ClientTrafficPolicySpecProxyProtocol;
            targetRef: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetRef;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetRefs[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetSelectors[];
            tcpKeepalive: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTimeout;
            tls: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTls;
        }

        /**
         * ClientIPDetectionSettings provides configuration for determining the original client IP address for requests.
         */
        export interface ClientTrafficPolicySpecClientIPDetection {
            customHeader: outputs.gateway.v1alpha1.ClientTrafficPolicySpecClientIPDetectionCustomHeader;
            xForwardedFor: outputs.gateway.v1alpha1.ClientTrafficPolicySpecClientIPDetectionXForwardedFor;
        }

        /**
         * CustomHeader provides configuration for determining the client IP address for a request based on
         * a trusted custom HTTP header. This uses the custom_header original IP detection extension.
         * Refer to https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto
         * for more details.
         */
        export interface ClientTrafficPolicySpecClientIPDetectionCustomHeader {
            /**
             * FailClosed is a switch used to control the flow of traffic when client IP detection
             * fails. If set to true, the listener will respond with 403 Forbidden when the client
             * IP address cannot be determined.
             */
            failClosed: boolean;
            /**
             * Name of the header containing the original downstream remote address, if present.
             */
            name: string;
        }

        /**
         * CustomHeader provides configuration for determining the client IP address for a request based on
         * a trusted custom HTTP header. This uses the custom_header original IP detection extension.
         * Refer to https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto
         * for more details.
         */
        export interface ClientTrafficPolicySpecClientIPDetectionCustomHeaderPatch {
            /**
             * FailClosed is a switch used to control the flow of traffic when client IP detection
             * fails. If set to true, the listener will respond with 403 Forbidden when the client
             * IP address cannot be determined.
             */
            failClosed: boolean;
            /**
             * Name of the header containing the original downstream remote address, if present.
             */
            name: string;
        }

        /**
         * ClientIPDetectionSettings provides configuration for determining the original client IP address for requests.
         */
        export interface ClientTrafficPolicySpecClientIPDetectionPatch {
            customHeader: outputs.gateway.v1alpha1.ClientTrafficPolicySpecClientIPDetectionCustomHeaderPatch;
            xForwardedFor: outputs.gateway.v1alpha1.ClientTrafficPolicySpecClientIPDetectionXForwardedForPatch;
        }

        /**
         * XForwardedForSettings provides configuration for using X-Forwarded-For headers for determining the client IP address.
         */
        export interface ClientTrafficPolicySpecClientIPDetectionXForwardedFor {
            /**
             * NumTrustedHops controls the number of additional ingress proxy hops from the right side of XFF HTTP
             * headers to trust when determining the origin client's IP address.
             * Only one of NumTrustedHops and TrustedCIDRs must be set.
             */
            numTrustedHops: number;
            /**
             * TrustedCIDRs is a list of CIDR ranges to trust when evaluating
             * the remote IP address to determine the original client’s IP address.
             * When the remote IP address matches a trusted CIDR and the x-forwarded-for header was sent,
             * each entry in the x-forwarded-for header is evaluated from right to left
             * and the first public non-trusted address is used as the original client address.
             * If all addresses in x-forwarded-for are within the trusted list, the first (leftmost) entry is used.
             * Only one of NumTrustedHops and TrustedCIDRs must be set.
             */
            trustedCIDRs: string[];
        }

        /**
         * XForwardedForSettings provides configuration for using X-Forwarded-For headers for determining the client IP address.
         */
        export interface ClientTrafficPolicySpecClientIPDetectionXForwardedForPatch {
            /**
             * NumTrustedHops controls the number of additional ingress proxy hops from the right side of XFF HTTP
             * headers to trust when determining the origin client's IP address.
             * Only one of NumTrustedHops and TrustedCIDRs must be set.
             */
            numTrustedHops: number;
            /**
             * TrustedCIDRs is a list of CIDR ranges to trust when evaluating
             * the remote IP address to determine the original client’s IP address.
             * When the remote IP address matches a trusted CIDR and the x-forwarded-for header was sent,
             * each entry in the x-forwarded-for header is evaluated from right to left
             * and the first public non-trusted address is used as the original client address.
             * If all addresses in x-forwarded-for are within the trusted list, the first (leftmost) entry is used.
             * Only one of NumTrustedHops and TrustedCIDRs must be set.
             */
            trustedCIDRs: string[];
        }

        /**
         * Connection includes client connection settings.
         */
        export interface ClientTrafficPolicySpecConnection {
            /**
             * BufferLimit provides configuration for the maximum buffer size in bytes for each incoming connection.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             * Default: 32768 bytes.
             */
            bufferLimit: number | string;
            connectionLimit: outputs.gateway.v1alpha1.ClientTrafficPolicySpecConnectionConnectionLimit;
            /**
             * MaxAcceptPerSocketEvent provides configuration for the maximum number of connections to accept from the kernel
             * per socket event. If there are more than MaxAcceptPerSocketEvent connections pending accept, connections over
             * this threshold will be accepted in later event loop iterations.
             * Defaults to 1 and can be disabled by setting to 0 for allowing unlimited accepted connections.
             */
            maxAcceptPerSocketEvent: number;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each incoming socket.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * ConnectionLimit defines limits related to connections
         */
        export interface ClientTrafficPolicySpecConnectionConnectionLimit {
            /**
             * CloseDelay defines the delay to use before closing connections that are rejected
             * once the limit value is reached.
             * Default: none.
             */
            closeDelay: string;
            /**
             * Value of the maximum concurrent connections limit.
             * When the limit is reached, incoming connections will be closed after the CloseDelay duration.
             */
            value: number;
        }

        /**
         * ConnectionLimit defines limits related to connections
         */
        export interface ClientTrafficPolicySpecConnectionConnectionLimitPatch {
            /**
             * CloseDelay defines the delay to use before closing connections that are rejected
             * once the limit value is reached.
             * Default: none.
             */
            closeDelay: string;
            /**
             * Value of the maximum concurrent connections limit.
             * When the limit is reached, incoming connections will be closed after the CloseDelay duration.
             */
            value: number;
        }

        /**
         * Connection includes client connection settings.
         */
        export interface ClientTrafficPolicySpecConnectionPatch {
            /**
             * BufferLimit provides configuration for the maximum buffer size in bytes for each incoming connection.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             * Default: 32768 bytes.
             */
            bufferLimit: number | string;
            connectionLimit: outputs.gateway.v1alpha1.ClientTrafficPolicySpecConnectionConnectionLimitPatch;
            /**
             * MaxAcceptPerSocketEvent provides configuration for the maximum number of connections to accept from the kernel
             * per socket event. If there are more than MaxAcceptPerSocketEvent connections pending accept, connections over
             * this threshold will be accepted in later event loop iterations.
             * Defaults to 1 and can be disabled by setting to 0 for allowing unlimited accepted connections.
             */
            maxAcceptPerSocketEvent: number;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each incoming socket.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * HeaderSettings provides configuration for header management.
         */
        export interface ClientTrafficPolicySpecHeaders {
            /**
             * DisableRateLimitHeaders configures Envoy Proxy to omit the "X-RateLimit-" response headers
             * when rate limiting is enabled.
             */
            disableRateLimitHeaders: boolean;
            earlyRequestHeaders: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersEarlyRequestHeaders;
            /**
             * EnableEnvoyHeaders configures Envoy Proxy to add the "X-Envoy-" headers to requests
             * and responses.
             */
            enableEnvoyHeaders: boolean;
            /**
             * PreserveXRequestID configures Envoy to keep the X-Request-ID header if passed for a request that is edge
             * (Edge request is the request from external clients to front Envoy) and not reset it, which is the current Envoy behaviour.
             * Defaults to false and cannot be combined with RequestID.
             * Deprecated: use RequestID=Preserve instead
             */
            preserveXRequestID: boolean;
            /**
             * RequestID configures Envoy's behavior for handling the `X-Request-ID` header.
             * Defaults to `Generate` and builds the `X-Request-ID` for every request and ignores pre-existing values from the edge.
             * (An "edge request" refers to a request from an external client to the Envoy entrypoint.)
             */
            requestID: string;
            /**
             * WithUnderscoresAction configures the action to take when an HTTP header with underscores
             * is encountered. The default action is to reject the request.
             */
            withUnderscoresAction: string;
            xForwardedClientCert: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersXForwardedClientCert;
        }

        /**
         * EarlyRequestHeaders defines settings for early request header modification, before envoy performs
         * routing, tracing and built-in header manipulation.
         */
        export interface ClientTrafficPolicySpecHeadersEarlyRequestHeaders {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersEarlyRequestHeadersAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersEarlyRequestHeadersSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface ClientTrafficPolicySpecHeadersEarlyRequestHeadersAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface ClientTrafficPolicySpecHeadersEarlyRequestHeadersAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * EarlyRequestHeaders defines settings for early request header modification, before envoy performs
         * routing, tracing and built-in header manipulation.
         */
        export interface ClientTrafficPolicySpecHeadersEarlyRequestHeadersPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersEarlyRequestHeadersAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersEarlyRequestHeadersSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface ClientTrafficPolicySpecHeadersEarlyRequestHeadersSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface ClientTrafficPolicySpecHeadersEarlyRequestHeadersSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HeaderSettings provides configuration for header management.
         */
        export interface ClientTrafficPolicySpecHeadersPatch {
            /**
             * DisableRateLimitHeaders configures Envoy Proxy to omit the "X-RateLimit-" response headers
             * when rate limiting is enabled.
             */
            disableRateLimitHeaders: boolean;
            earlyRequestHeaders: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersEarlyRequestHeadersPatch;
            /**
             * EnableEnvoyHeaders configures Envoy Proxy to add the "X-Envoy-" headers to requests
             * and responses.
             */
            enableEnvoyHeaders: boolean;
            /**
             * PreserveXRequestID configures Envoy to keep the X-Request-ID header if passed for a request that is edge
             * (Edge request is the request from external clients to front Envoy) and not reset it, which is the current Envoy behaviour.
             * Defaults to false and cannot be combined with RequestID.
             * Deprecated: use RequestID=Preserve instead
             */
            preserveXRequestID: boolean;
            /**
             * RequestID configures Envoy's behavior for handling the `X-Request-ID` header.
             * Defaults to `Generate` and builds the `X-Request-ID` for every request and ignores pre-existing values from the edge.
             * (An "edge request" refers to a request from an external client to the Envoy entrypoint.)
             */
            requestID: string;
            /**
             * WithUnderscoresAction configures the action to take when an HTTP header with underscores
             * is encountered. The default action is to reject the request.
             */
            withUnderscoresAction: string;
            xForwardedClientCert: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersXForwardedClientCertPatch;
        }

        /**
         * XForwardedClientCert configures how Envoy Proxy handle the x-forwarded-client-cert (XFCC) HTTP header.
         *
         * x-forwarded-client-cert (XFCC) is an HTTP header used to forward the certificate
         * information of part or all of the clients or proxies that a request has flowed through,
         * on its way from the client to the server.
         *
         * Envoy proxy may choose to sanitize/append/forward the XFCC header before proxying the request.
         *
         * If not set, the default behavior is sanitizing the XFCC header.
         */
        export interface ClientTrafficPolicySpecHeadersXForwardedClientCert {
            /**
             * CertDetailsToAdd specifies the fields in the client certificate to be forwarded in the XFCC header.
             *
             * Hash(the SHA 256 digest of the current client certificate) and By(the Subject Alternative Name)
             * are always included if the client certificate is forwarded.
             *
             * This field is only applicable when the mode is set to `AppendForward` or
             * `SanitizeSet` and the client connection is mTLS.
             */
            certDetailsToAdd: string[];
            /**
             * Mode defines how XFCC header is handled by Envoy Proxy.
             * If not set, the default mode is `Sanitize`.
             */
            mode: string;
        }

        /**
         * XForwardedClientCert configures how Envoy Proxy handle the x-forwarded-client-cert (XFCC) HTTP header.
         *
         * x-forwarded-client-cert (XFCC) is an HTTP header used to forward the certificate
         * information of part or all of the clients or proxies that a request has flowed through,
         * on its way from the client to the server.
         *
         * Envoy proxy may choose to sanitize/append/forward the XFCC header before proxying the request.
         *
         * If not set, the default behavior is sanitizing the XFCC header.
         */
        export interface ClientTrafficPolicySpecHeadersXForwardedClientCertPatch {
            /**
             * CertDetailsToAdd specifies the fields in the client certificate to be forwarded in the XFCC header.
             *
             * Hash(the SHA 256 digest of the current client certificate) and By(the Subject Alternative Name)
             * are always included if the client certificate is forwarded.
             *
             * This field is only applicable when the mode is set to `AppendForward` or
             * `SanitizeSet` and the client connection is mTLS.
             */
            certDetailsToAdd: string[];
            /**
             * Mode defines how XFCC header is handled by Envoy Proxy.
             * If not set, the default mode is `Sanitize`.
             */
            mode: string;
        }

        /**
         * HealthCheck provides configuration for determining whether the HTTP/HTTPS listener is healthy.
         */
        export interface ClientTrafficPolicySpecHealthCheck {
            /**
             * Path specifies the HTTP path to match on for health check requests.
             */
            path: string;
        }

        /**
         * HealthCheck provides configuration for determining whether the HTTP/HTTPS listener is healthy.
         */
        export interface ClientTrafficPolicySpecHealthCheckPatch {
            /**
             * Path specifies the HTTP path to match on for health check requests.
             */
            path: string;
        }

        /**
         * HTTP1 provides HTTP/1 configuration on the listener.
         */
        export interface ClientTrafficPolicySpecHttp1 {
            /**
             * EnableTrailers defines if HTTP/1 trailers should be proxied by Envoy.
             */
            enableTrailers: boolean;
            http10: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHttp1Http10;
            /**
             * PreserveHeaderCase defines if Envoy should preserve the letter case of headers.
             * By default, Envoy will lowercase all the headers.
             */
            preserveHeaderCase: boolean;
        }

        /**
         * HTTP10 turns on support for HTTP/1.0 and HTTP/0.9 requests.
         */
        export interface ClientTrafficPolicySpecHttp1Http10 {
            /**
             * UseDefaultHost defines if the HTTP/1.0 request is missing the Host header,
             * then the hostname associated with the listener should be injected into the
             * request.
             * If this is not set and an HTTP/1.0 request arrives without a host, then
             * it will be rejected.
             */
            useDefaultHost: boolean;
        }

        /**
         * HTTP10 turns on support for HTTP/1.0 and HTTP/0.9 requests.
         */
        export interface ClientTrafficPolicySpecHttp1Http10Patch {
            /**
             * UseDefaultHost defines if the HTTP/1.0 request is missing the Host header,
             * then the hostname associated with the listener should be injected into the
             * request.
             * If this is not set and an HTTP/1.0 request arrives without a host, then
             * it will be rejected.
             */
            useDefaultHost: boolean;
        }

        /**
         * HTTP1 provides HTTP/1 configuration on the listener.
         */
        export interface ClientTrafficPolicySpecHttp1Patch {
            /**
             * EnableTrailers defines if HTTP/1 trailers should be proxied by Envoy.
             */
            enableTrailers: boolean;
            http10: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHttp1Http10Patch;
            /**
             * PreserveHeaderCase defines if Envoy should preserve the letter case of headers.
             * By default, Envoy will lowercase all the headers.
             */
            preserveHeaderCase: boolean;
        }

        /**
         * HTTP2 provides HTTP/2 configuration on the listener.
         */
        export interface ClientTrafficPolicySpecHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration on the listener.
         */
        export interface ClientTrafficPolicySpecHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * Spec defines the desired state of ClientTrafficPolicy.
         */
        export interface ClientTrafficPolicySpecPatch {
            clientIPDetection: outputs.gateway.v1alpha1.ClientTrafficPolicySpecClientIPDetectionPatch;
            connection: outputs.gateway.v1alpha1.ClientTrafficPolicySpecConnectionPatch;
            /**
             * EnableProxyProtocol interprets the ProxyProtocol header and adds the
             * Client Address into the X-Forwarded-For header.
             * Note Proxy Protocol must be present when this field is set, else the connection
             * is closed.
             *
             * Deprecated: Use ProxyProtocol instead.
             */
            enableProxyProtocol: boolean;
            headers: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHeadersPatch;
            healthCheck: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHealthCheckPatch;
            http1: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHttp1Patch;
            http2: outputs.gateway.v1alpha1.ClientTrafficPolicySpecHttp2Patch;
            /**
             * HTTP3 provides HTTP/3 configuration on the listener.
             */
            http3: {[key: string]: string};
            path: outputs.gateway.v1alpha1.ClientTrafficPolicySpecPathPatch;
            proxyProtocol: outputs.gateway.v1alpha1.ClientTrafficPolicySpecProxyProtocolPatch;
            targetRef: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetRefPatch;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetRefsPatch[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetSelectorsPatch[];
            tcpKeepalive: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTimeoutPatch;
            tls: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsPatch;
        }

        /**
         * Path enables managing how the incoming path set by clients can be normalized.
         */
        export interface ClientTrafficPolicySpecPath {
            /**
             * DisableMergeSlashes allows disabling the default configuration of merging adjacent
             * slashes in the path.
             * Note that slash merging is not part of the HTTP spec and is provided for convenience.
             */
            disableMergeSlashes: boolean;
            /**
             * EscapedSlashesAction determines how %2f, %2F, %5c, or %5C sequences in the path URI
             * should be handled.
             * The default is UnescapeAndRedirect.
             */
            escapedSlashesAction: string;
        }

        /**
         * Path enables managing how the incoming path set by clients can be normalized.
         */
        export interface ClientTrafficPolicySpecPathPatch {
            /**
             * DisableMergeSlashes allows disabling the default configuration of merging adjacent
             * slashes in the path.
             * Note that slash merging is not part of the HTTP spec and is provided for convenience.
             */
            disableMergeSlashes: boolean;
            /**
             * EscapedSlashesAction determines how %2f, %2F, %5c, or %5C sequences in the path URI
             * should be handled.
             * The default is UnescapeAndRedirect.
             */
            escapedSlashesAction: string;
        }

        /**
         * ProxyProtocol configures the Proxy Protocol settings. When configured,
         * the Proxy Protocol header will be interpreted and the Client Address
         * will be added into the X-Forwarded-For header.
         * If both EnableProxyProtocol and ProxyProtocol are set, ProxyProtocol takes precedence.
         */
        export interface ClientTrafficPolicySpecProxyProtocol {
            /**
             * Optional allows requests without a Proxy Protocol header to be proxied.
             * If set to true, the listener will accept requests without a Proxy Protocol header.
             * If set to false, the listener will reject requests without a Proxy Protocol header.
             * If not set, the default behavior is to reject requests without a Proxy Protocol header.
             * Warning: Optional breaks conformance with the specification. Only enable if ALL traffic to the listener comes from a trusted source.
             * For more information on security implications, see haproxy.org/download/2.1/doc/proxy-protocol.txt
             */
            optional: boolean;
        }

        /**
         * ProxyProtocol configures the Proxy Protocol settings. When configured,
         * the Proxy Protocol header will be interpreted and the Client Address
         * will be added into the X-Forwarded-For header.
         * If both EnableProxyProtocol and ProxyProtocol are set, ProxyProtocol takes precedence.
         */
        export interface ClientTrafficPolicySpecProxyProtocolPatch {
            /**
             * Optional allows requests without a Proxy Protocol header to be proxied.
             * If set to true, the listener will accept requests without a Proxy Protocol header.
             * If set to false, the listener will reject requests without a Proxy Protocol header.
             * If not set, the default behavior is to reject requests without a Proxy Protocol header.
             * Warning: Optional breaks conformance with the specification. Only enable if ALL traffic to the listener comes from a trusted source.
             * For more information on security implications, see haproxy.org/download/2.1/doc/proxy-protocol.txt
             */
            optional: boolean;
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface ClientTrafficPolicySpecTargetRef {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface ClientTrafficPolicySpecTargetRefPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface ClientTrafficPolicySpecTargetRefs {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface ClientTrafficPolicySpecTargetRefsPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        export interface ClientTrafficPolicySpecTargetSelectors {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetSelectorsMatchExpressions[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClientTrafficPolicySpecTargetSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClientTrafficPolicySpecTargetSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        export interface ClientTrafficPolicySpecTargetSelectorsPatch {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTargetSelectorsMatchExpressionsPatch[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TcpKeepalive settings associated with the downstream client connection.
         * If defined, sets SO_KEEPALIVE on the listener socket to enable TCP Keepalives.
         * Disabled by default.
         */
        export interface ClientTrafficPolicySpecTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the downstream client connection.
         * If defined, sets SO_KEEPALIVE on the listener socket to enable TCP Keepalives.
         * Disabled by default.
         */
        export interface ClientTrafficPolicySpecTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the client connections.
         */
        export interface ClientTrafficPolicySpecTimeout {
            http: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface ClientTrafficPolicySpecTimeoutHttp {
            /**
             * IdleTimeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            idleTimeout: string;
            /**
             * RequestReceivedTimeout is the duration envoy waits for the complete request reception. This timer starts upon request
             * initiation and stops when either the last byte of the request is sent upstream or when the response begins.
             */
            requestReceivedTimeout: string;
            /**
             *  The stream idle timeout defines the amount of time a stream can exist without any upstream or downstream activity.
             *  Default: 5 minutes.
             */
            streamIdleTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface ClientTrafficPolicySpecTimeoutHttpPatch {
            /**
             * IdleTimeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            idleTimeout: string;
            /**
             * RequestReceivedTimeout is the duration envoy waits for the complete request reception. This timer starts upon request
             * initiation and stops when either the last byte of the request is sent upstream or when the response begins.
             */
            requestReceivedTimeout: string;
            /**
             *  The stream idle timeout defines the amount of time a stream can exist without any upstream or downstream activity.
             *  Default: 5 minutes.
             */
            streamIdleTimeout: string;
        }

        /**
         * Timeout settings for the client connections.
         */
        export interface ClientTrafficPolicySpecTimeoutPatch {
            http: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface ClientTrafficPolicySpecTimeoutTcp {
            /**
             * IdleTimeout for a TCP connection. Idle time is defined as a period in which there are no
             * bytes sent or received on either the upstream or downstream connection.
             * Default: 1 hour.
             */
            idleTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface ClientTrafficPolicySpecTimeoutTcpPatch {
            /**
             * IdleTimeout for a TCP connection. Idle time is defined as a period in which there are no
             * bytes sent or received on either the upstream or downstream connection.
             * Default: 1 hour.
             */
            idleTimeout: string;
        }

        /**
         * TLS settings configure TLS termination settings with the downstream client.
         */
        export interface ClientTrafficPolicySpecTls {
            /**
             * ALPNProtocols supplies the list of ALPN protocols that should be
             * exposed by the listener or used by the proxy to connect to the backend.
             * Defaults:
             * 1. HTTPS Routes: h2 and http/1.1 are enabled in listener context.
             * 2. Other Routes: ALPN is disabled.
             * 3. Backends: proxy uses the appropriate ALPN options for the backend protocol.
             * When an empty list is provided, the ALPN TLS extension is disabled.
             * Supported values are:
             * - http/1.0
             * - http/1.1
             * - h2
             */
            alpnProtocols: string[];
            /**
             * Ciphers specifies the set of cipher suites supported when
             * negotiating TLS 1.0 - 1.2. This setting has no effect for TLS 1.3.
             * In non-FIPS Envoy Proxy builds the default cipher list is:
             * - [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
             * - [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             * In builds using BoringSSL FIPS the default cipher list is:
             * - ECDHE-ECDSA-AES128-GCM-SHA256
             * - ECDHE-RSA-AES128-GCM-SHA256
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             */
            ciphers: string[];
            clientValidation: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidation;
            /**
             * ECDHCurves specifies the set of supported ECDH curves.
             * In non-FIPS Envoy Proxy builds the default curves are:
             * - X25519
             * - P-256
             * In builds using BoringSSL FIPS the default curve is:
             * - P-256
             */
            ecdhCurves: string[];
            /**
             * Max specifies the maximal TLS protocol version to allow
             * The default is TLS 1.3 if this is not specified.
             */
            maxVersion: string;
            /**
             * Min specifies the minimal TLS protocol version to allow.
             * The default is TLS 1.2 if this is not specified.
             */
            minVersion: string;
            session: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsSession;
            /**
             * SignatureAlgorithms specifies which signature algorithms the listener should
             * support.
             */
            signatureAlgorithms: string[];
        }

        /**
         * ClientValidation specifies the configuration to validate the client
         * initiating the TLS connection to the Gateway listener.
         */
        export interface ClientTrafficPolicySpecTlsClientValidation {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single reference to a Kubernetes ConfigMap or a Kubernetes Secret,
             * with the CA certificate in a key named `ca.crt` is currently supported.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached.
             */
            caCertificateRefs: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationCaCertificateRefs[];
            /**
             * An optional list of hex-encoded SHA-256 hashes. If specified, Envoy will
             * verify that the SHA-256 of the DER-encoded presented certificate matches
             * one of the specified values.
             */
            certificateHashes: string[];
            /**
             * Optional set to true accepts connections even when a client doesn't present a certificate.
             * Defaults to false, which rejects connections without a valid client certificate.
             */
            optional: boolean;
            /**
             * An optional list of base64-encoded SHA-256 hashes. If specified, Envoy will
             * verify that the SHA-256 of the DER-encoded Subject Public Key Information
             * (SPKI) of the presented certificate matches one of the specified values.
             */
            spkiHashes: string[];
            subjectAltNames: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNames;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationCaCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationCaCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * ClientValidation specifies the configuration to validate the client
         * initiating the TLS connection to the Gateway listener.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationPatch {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single reference to a Kubernetes ConfigMap or a Kubernetes Secret,
             * with the CA certificate in a key named `ca.crt` is currently supported.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached.
             */
            caCertificateRefs: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationCaCertificateRefsPatch[];
            /**
             * An optional list of hex-encoded SHA-256 hashes. If specified, Envoy will
             * verify that the SHA-256 of the DER-encoded presented certificate matches
             * one of the specified values.
             */
            certificateHashes: string[];
            /**
             * Optional set to true accepts connections even when a client doesn't present a certificate.
             * Defaults to false, which rejects connections without a valid client certificate.
             */
            optional: boolean;
            /**
             * An optional list of base64-encoded SHA-256 hashes. If specified, Envoy will
             * verify that the SHA-256 of the DER-encoded Subject Public Key Information
             * (SPKI) of the presented certificate matches one of the specified values.
             */
            spkiHashes: string[];
            subjectAltNames: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesPatch;
        }

        /**
         * An optional list of Subject Alternative name matchers. If specified, Envoy
         * will verify that the Subject Alternative Name of the presented certificate
         * matches one of the specified matchers
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNames {
            /**
             * DNS names matchers
             */
            dnsNames: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesDnsNames[];
            /**
             * Email addresses matchers
             */
            emailAddresses: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesEmailAddresses[];
            /**
             * IP addresses matchers
             */
            ipAddresses: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesIpAddresses[];
            /**
             * Other names matchers
             */
            otherNames: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesOtherNames[];
            /**
             * URIs matchers
             */
            uris: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesUris[];
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesDnsNames {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesDnsNamesPatch {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesEmailAddresses {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesEmailAddressesPatch {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesIpAddresses {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesIpAddressesPatch {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesOtherNames {
            /**
             * OID Value
             */
            oid: string;
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesOtherNamesPatch {
            /**
             * OID Value
             */
            oid: string;
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * An optional list of Subject Alternative name matchers. If specified, Envoy
         * will verify that the Subject Alternative Name of the presented certificate
         * matches one of the specified matchers
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesPatch {
            /**
             * DNS names matchers
             */
            dnsNames: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesDnsNamesPatch[];
            /**
             * Email addresses matchers
             */
            emailAddresses: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesEmailAddressesPatch[];
            /**
             * IP addresses matchers
             */
            ipAddresses: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesIpAddressesPatch[];
            /**
             * Other names matchers
             */
            otherNames: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesOtherNamesPatch[];
            /**
             * URIs matchers
             */
            uris: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesUrisPatch[];
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesUris {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface ClientTrafficPolicySpecTlsClientValidationSubjectAltNamesUrisPatch {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * TLS settings configure TLS termination settings with the downstream client.
         */
        export interface ClientTrafficPolicySpecTlsPatch {
            /**
             * ALPNProtocols supplies the list of ALPN protocols that should be
             * exposed by the listener or used by the proxy to connect to the backend.
             * Defaults:
             * 1. HTTPS Routes: h2 and http/1.1 are enabled in listener context.
             * 2. Other Routes: ALPN is disabled.
             * 3. Backends: proxy uses the appropriate ALPN options for the backend protocol.
             * When an empty list is provided, the ALPN TLS extension is disabled.
             * Supported values are:
             * - http/1.0
             * - http/1.1
             * - h2
             */
            alpnProtocols: string[];
            /**
             * Ciphers specifies the set of cipher suites supported when
             * negotiating TLS 1.0 - 1.2. This setting has no effect for TLS 1.3.
             * In non-FIPS Envoy Proxy builds the default cipher list is:
             * - [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
             * - [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             * In builds using BoringSSL FIPS the default cipher list is:
             * - ECDHE-ECDSA-AES128-GCM-SHA256
             * - ECDHE-RSA-AES128-GCM-SHA256
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             */
            ciphers: string[];
            clientValidation: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsClientValidationPatch;
            /**
             * ECDHCurves specifies the set of supported ECDH curves.
             * In non-FIPS Envoy Proxy builds the default curves are:
             * - X25519
             * - P-256
             * In builds using BoringSSL FIPS the default curve is:
             * - P-256
             */
            ecdhCurves: string[];
            /**
             * Max specifies the maximal TLS protocol version to allow
             * The default is TLS 1.3 if this is not specified.
             */
            maxVersion: string;
            /**
             * Min specifies the minimal TLS protocol version to allow.
             * The default is TLS 1.2 if this is not specified.
             */
            minVersion: string;
            session: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsSessionPatch;
            /**
             * SignatureAlgorithms specifies which signature algorithms the listener should
             * support.
             */
            signatureAlgorithms: string[];
        }

        /**
         * Session defines settings related to TLS session management.
         */
        export interface ClientTrafficPolicySpecTlsSession {
            resumption: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsSessionResumption;
        }

        /**
         * Session defines settings related to TLS session management.
         */
        export interface ClientTrafficPolicySpecTlsSessionPatch {
            resumption: outputs.gateway.v1alpha1.ClientTrafficPolicySpecTlsSessionResumptionPatch;
        }

        /**
         * Resumption determines the proxy's supported TLS session resumption option.
         * By default, Envoy Gateway does not enable session resumption. Use sessionResumption to
         * enable stateful and stateless session resumption. Users should consider security impacts
         * of different resumption methods. Performance gains from resumption are diminished when
         * Envoy proxy is deployed with more than one replica.
         */
        export interface ClientTrafficPolicySpecTlsSessionResumption {
            /**
             * Stateful defines setting for stateful (session-id based) session resumption
             */
            stateful: {[key: string]: string};
            /**
             * Stateless defines setting for stateless (session-ticket based) session resumption
             */
            stateless: {[key: string]: string};
        }

        /**
         * Resumption determines the proxy's supported TLS session resumption option.
         * By default, Envoy Gateway does not enable session resumption. Use sessionResumption to
         * enable stateful and stateless session resumption. Users should consider security impacts
         * of different resumption methods. Performance gains from resumption are diminished when
         * Envoy proxy is deployed with more than one replica.
         */
        export interface ClientTrafficPolicySpecTlsSessionResumptionPatch {
            /**
             * Stateful defines setting for stateful (session-id based) session resumption
             */
            stateful: {[key: string]: string};
            /**
             * Stateless defines setting for stateless (session-ticket based) session resumption
             */
            stateless: {[key: string]: string};
        }

        /**
         * Status defines the current status of ClientTrafficPolicy.
         */
        export interface ClientTrafficPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.ClientTrafficPolicyStatusAncestors[];
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface ClientTrafficPolicyStatusAncestors {
            ancestorRef: outputs.gateway.v1alpha1.ClientTrafficPolicyStatusAncestorsAncestorRef;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.ClientTrafficPolicyStatusAncestorsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface ClientTrafficPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface ClientTrafficPolicyStatusAncestorsAncestorRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface ClientTrafficPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface ClientTrafficPolicyStatusAncestorsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface ClientTrafficPolicyStatusAncestorsPatch {
            ancestorRef: outputs.gateway.v1alpha1.ClientTrafficPolicyStatusAncestorsAncestorRefPatch;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.ClientTrafficPolicyStatusAncestorsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * Status defines the current status of ClientTrafficPolicy.
         */
        export interface ClientTrafficPolicyStatusPatch {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.ClientTrafficPolicyStatusAncestorsPatch[];
        }

        /**
         * EnvoyExtensionPolicy allows the user to configure various envoy extensibility options for the Gateway.
         */
        export interface EnvoyExtensionPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "EnvoyExtensionPolicy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpec;
            status: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatus;
        }

        /**
         * Spec defines the desired state of EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicySpec {
            /**
             * ExtProc is an ordered list of external processing filters
             * that should be added to the envoy filter chain
             */
            extProc: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProc[];
            /**
             * Lua is an ordered list of Lua filters
             * that should be added to the envoy filter chain
             */
            lua: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecLua[];
            targetRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetRef;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetRefs[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetSelectors[];
            /**
             * Wasm is a list of Wasm extensions to be loaded by the Gateway.
             * Order matters, as the extensions will be loaded in the order they are
             * defined in this list.
             */
            wasm: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasm[];
        }

        /**
         * ExtProc defines the configuration for External Processing filter.
         */
        export interface EnvoyExtensionPolicySpecExtProc {
            backendRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettings;
            /**
             * FailOpen is a switch used to control the behavior when failing to call the external processor.
             *
             * If FailOpen is set to true, the system bypasses the ExtProc extension and
             * allows the traffic to pass through. If it is set to false or
             * not set (defaulting to false), the system blocks the traffic and returns
             * an HTTP 5xx error.
             *
             * If set to true, the ExtProc extension will also be bypassed if the configuration is invalid.
             */
            failOpen: boolean;
            /**
             * MessageTimeout is the timeout for a response to be returned from the external processor
             * Default: 200ms
             */
            messageTimeout: string;
            metadata: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcMetadata;
            processingMode: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcProcessingMode;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyExtensionPolicySpecExtProcBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Metadata defines options related to the sending and receiving of dynamic metadata.
         * These options define which metadata namespaces would be sent to the processor and which dynamic metadata
         * namespaces the processor would be permitted to emit metadata to.
         * Users can specify custom namespaces or well-known envoy metadata namespace (such as envoy.filters.http.ext_authz)
         * documented here: https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata#well-known-dynamic-metadata
         * Default: no metadata context is sent or received from the external processor
         */
        export interface EnvoyExtensionPolicySpecExtProcMetadata {
            /**
             * AccessibleNamespaces are metadata namespaces that are sent to the external processor as context
             */
            accessibleNamespaces: string[];
            /**
             * WritableNamespaces are metadata namespaces that the external processor can write to
             */
            writableNamespaces: string[];
        }

        /**
         * Metadata defines options related to the sending and receiving of dynamic metadata.
         * These options define which metadata namespaces would be sent to the processor and which dynamic metadata
         * namespaces the processor would be permitted to emit metadata to.
         * Users can specify custom namespaces or well-known envoy metadata namespace (such as envoy.filters.http.ext_authz)
         * documented here: https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata#well-known-dynamic-metadata
         * Default: no metadata context is sent or received from the external processor
         */
        export interface EnvoyExtensionPolicySpecExtProcMetadataPatch {
            /**
             * AccessibleNamespaces are metadata namespaces that are sent to the external processor as context
             */
            accessibleNamespaces: string[];
            /**
             * WritableNamespaces are metadata namespaces that the external processor can write to
             */
            writableNamespaces: string[];
        }

        /**
         * ExtProc defines the configuration for External Processing filter.
         */
        export interface EnvoyExtensionPolicySpecExtProcPatch {
            backendRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcBackendSettingsPatch;
            /**
             * FailOpen is a switch used to control the behavior when failing to call the external processor.
             *
             * If FailOpen is set to true, the system bypasses the ExtProc extension and
             * allows the traffic to pass through. If it is set to false or
             * not set (defaulting to false), the system blocks the traffic and returns
             * an HTTP 5xx error.
             *
             * If set to true, the ExtProc extension will also be bypassed if the configuration is invalid.
             */
            failOpen: boolean;
            /**
             * MessageTimeout is the timeout for a response to be returned from the external processor
             * Default: 200ms
             */
            messageTimeout: string;
            metadata: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcMetadataPatch;
            processingMode: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcProcessingModePatch;
        }

        /**
         * ProcessingMode defines how request and response body is processed
         * Default: header and body are not sent to the external processor
         */
        export interface EnvoyExtensionPolicySpecExtProcProcessingMode {
            /**
             * AllowModeOverride allows the external processor to override the processing mode set via the
             * `mode_override` field in the gRPC response message. This defaults to false.
             */
            allowModeOverride: boolean;
            request: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcProcessingModeRequest;
            response: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcProcessingModeResponse;
        }

        /**
         * ProcessingMode defines how request and response body is processed
         * Default: header and body are not sent to the external processor
         */
        export interface EnvoyExtensionPolicySpecExtProcProcessingModePatch {
            /**
             * AllowModeOverride allows the external processor to override the processing mode set via the
             * `mode_override` field in the gRPC response message. This defaults to false.
             */
            allowModeOverride: boolean;
            request: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcProcessingModeRequestPatch;
            response: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcProcessingModeResponsePatch;
        }

        /**
         * Defines processing mode for requests. If present, request headers are sent. Request body is processed according
         * to the specified mode.
         */
        export interface EnvoyExtensionPolicySpecExtProcProcessingModeRequest {
            /**
             * Defines which attributes are sent to the external processor. Envoy Gateway currently
             * supports only the following attribute prefixes: connection, source, destination,
             * request, response, upstream and xds.route.
             * https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes
             */
            attributes: string[];
            /**
             * Defines body processing mode
             */
            body: string;
        }

        /**
         * Defines processing mode for requests. If present, request headers are sent. Request body is processed according
         * to the specified mode.
         */
        export interface EnvoyExtensionPolicySpecExtProcProcessingModeRequestPatch {
            /**
             * Defines which attributes are sent to the external processor. Envoy Gateway currently
             * supports only the following attribute prefixes: connection, source, destination,
             * request, response, upstream and xds.route.
             * https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes
             */
            attributes: string[];
            /**
             * Defines body processing mode
             */
            body: string;
        }

        /**
         * Defines processing mode for responses. If present, response headers are sent. Response body is processed according
         * to the specified mode.
         */
        export interface EnvoyExtensionPolicySpecExtProcProcessingModeResponse {
            /**
             * Defines which attributes are sent to the external processor. Envoy Gateway currently
             * supports only the following attribute prefixes: connection, source, destination,
             * request, response, upstream and xds.route.
             * https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes
             */
            attributes: string[];
            /**
             * Defines body processing mode
             */
            body: string;
        }

        /**
         * Defines processing mode for responses. If present, response headers are sent. Response body is processed according
         * to the specified mode.
         */
        export interface EnvoyExtensionPolicySpecExtProcProcessingModeResponsePatch {
            /**
             * Defines which attributes are sent to the external processor. Envoy Gateway currently
             * supports only the following attribute prefixes: connection, source, destination,
             * request, response, upstream and xds.route.
             * https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes
             */
            attributes: string[];
            /**
             * Defines body processing mode
             */
            body: string;
        }

        /**
         * Lua defines a Lua extension
         * Only one of Inline or ValueRef must be set
         */
        export interface EnvoyExtensionPolicySpecLua {
            /**
             * Inline contains the source code as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the Lua value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecLuaValueRef;
        }

        /**
         * Lua defines a Lua extension
         * Only one of Inline or ValueRef must be set
         */
        export interface EnvoyExtensionPolicySpecLuaPatch {
            /**
             * Inline contains the source code as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the Lua value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecLuaValueRefPatch;
        }

        /**
         * ValueRef has the source code specified as a local object reference.
         * Only a reference to ConfigMap is supported.
         * The value of key `lua` in the ConfigMap will be used.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface EnvoyExtensionPolicySpecLuaValueRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ValueRef has the source code specified as a local object reference.
         * Only a reference to ConfigMap is supported.
         * The value of key `lua` in the ConfigMap will be used.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface EnvoyExtensionPolicySpecLuaValueRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * Spec defines the desired state of EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicySpecPatch {
            /**
             * ExtProc is an ordered list of external processing filters
             * that should be added to the envoy filter chain
             */
            extProc: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecExtProcPatch[];
            /**
             * Lua is an ordered list of Lua filters
             * that should be added to the envoy filter chain
             */
            lua: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecLuaPatch[];
            targetRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetRefPatch;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetRefsPatch[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetSelectorsPatch[];
            /**
             * Wasm is a list of Wasm extensions to be loaded by the Gateway.
             * Order matters, as the extensions will be loaded in the order they are
             * defined in this list.
             */
            wasm: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmPatch[];
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface EnvoyExtensionPolicySpecTargetRef {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface EnvoyExtensionPolicySpecTargetRefPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface EnvoyExtensionPolicySpecTargetRefs {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface EnvoyExtensionPolicySpecTargetRefsPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        export interface EnvoyExtensionPolicySpecTargetSelectors {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetSelectorsMatchExpressions[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyExtensionPolicySpecTargetSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyExtensionPolicySpecTargetSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        export interface EnvoyExtensionPolicySpecTargetSelectorsPatch {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecTargetSelectorsMatchExpressionsPatch[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Wasm defines a Wasm extension.
         *
         * Note: at the moment, Envoy Gateway does not support configuring Wasm runtime.
         * v8 is used as the VM runtime for the Wasm extensions.
         */
        export interface EnvoyExtensionPolicySpecWasm {
            code: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCode;
            /**
             * Config is the configuration for the Wasm extension.
             * This configuration will be passed as a JSON string to the Wasm extension.
             */
            config: {[key: string]: any};
            env: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmEnv;
            /**
             * FailOpen is a switch used to control the behavior when a fatal error occurs
             * during the initialization or the execution of the Wasm extension.
             *
             * If FailOpen is set to true, the system bypasses the Wasm extension and
             * allows the traffic to pass through. If it is set to false or
             * not set (defaulting to false), the system blocks the traffic and returns
             * an HTTP 5xx error.
             *
             * If set to true, the Wasm extension will also be bypassed if the configuration is invalid.
             */
            failOpen: boolean;
            /**
             * Name is a unique name for this Wasm extension. It is used to identify the
             * Wasm extension if multiple extensions are handled by the same vm_id and root_id.
             * It's also used for logging/debugging.
             * If not specified, EG will generate a unique name for the Wasm extension.
             */
            name: string;
            /**
             * RootID is a unique ID for a set of extensions in a VM which will share a
             * RootContext and Contexts if applicable (e.g., an Wasm HttpFilter and an Wasm AccessLog).
             * If left blank, all extensions with a blank root_id with the same vm_id will share Context(s).
             *
             * Note: RootID must match the root_id parameter used to register the Context in the Wasm code.
             */
            rootID: string;
        }

        /**
         * Code is the Wasm code for the extension.
         */
        export interface EnvoyExtensionPolicySpecWasmCode {
            http: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeHttp;
            image: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImage;
            /**
             * PullPolicy is the policy to use when pulling the Wasm module by either the HTTP or Image source.
             * This field is only applicable when the SHA256 field is not set.
             *
             * If not specified, the default policy is IfNotPresent except for OCI images whose tag is latest.
             *
             * Note: EG does not update the Wasm module every time an Envoy proxy requests
             * the Wasm module even if the pull policy is set to Always.
             * It only updates the Wasm module when the EnvoyExtension resource version changes.
             */
            pullPolicy: string;
            /**
             * Type is the type of the source of the Wasm code.
             * Valid WasmCodeSourceType values are "HTTP" or "Image".
             */
            type: string;
        }

        /**
         * HTTP is the HTTP URL containing the Wasm code.
         *
         * Note that the HTTP server must be accessible from the Envoy proxy.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeHttp {
            /**
             * SHA256 checksum that will be used to verify the Wasm code.
             *
             * If not specified, Envoy Gateway will not verify the downloaded Wasm code.
             * kubebuilder:validation:Pattern=`^[a-f0-9]{64}$`
             */
            sha256: string;
            tls: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeHttpTls;
            /**
             * URL is the URL containing the Wasm code.
             */
            url: string;
        }

        /**
         * HTTP is the HTTP URL containing the Wasm code.
         *
         * Note that the HTTP server must be accessible from the Envoy proxy.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeHttpPatch {
            /**
             * SHA256 checksum that will be used to verify the Wasm code.
             *
             * If not specified, Envoy Gateway will not verify the downloaded Wasm code.
             * kubebuilder:validation:Pattern=`^[a-f0-9]{64}$`
             */
            sha256: string;
            tls: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeHttpTlsPatch;
            /**
             * URL is the URL containing the Wasm code.
             */
            url: string;
        }

        /**
         * TLS configuration when connecting to the Wasm code source.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeHttpTls {
            caCertificateRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeHttpTlsCaCertificateRef;
        }

        /**
         * CACertificateRef contains a references to
         * Kubernetes objects that contain TLS certificates of
         * the Certificate Authorities that can be used
         * as a trust anchor to validate the certificates presented by the Wasm code source.
         *
         * Kubernetes ConfigMap and Kubernetes Secret are supported.
         * Note: The ConfigMap or Secret must be in the same namespace as the EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeHttpTlsCaCertificateRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * CACertificateRef contains a references to
         * Kubernetes objects that contain TLS certificates of
         * the Certificate Authorities that can be used
         * as a trust anchor to validate the certificates presented by the Wasm code source.
         *
         * Kubernetes ConfigMap and Kubernetes Secret are supported.
         * Note: The ConfigMap or Secret must be in the same namespace as the EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeHttpTlsCaCertificateRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * TLS configuration when connecting to the Wasm code source.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeHttpTlsPatch {
            caCertificateRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeHttpTlsCaCertificateRefPatch;
        }

        /**
         * Image is the OCI image containing the Wasm code.
         *
         * Note that the image must be accessible from the Envoy Gateway.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImage {
            pullSecretRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImagePullSecretRef;
            /**
             * SHA256 checksum that will be used to verify the OCI image.
             *
             * It must match the digest of the OCI image.
             *
             * If not specified, Envoy Gateway will not verify the downloaded OCI image.
             * kubebuilder:validation:Pattern=`^[a-f0-9]{64}$`
             */
            sha256: string;
            tls: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImageTls;
            /**
             * URL is the URL of the OCI image.
             * URL can be in the format of `registry/image:tag` or `registry/image@sha256:digest`.
             */
            url: string;
        }

        /**
         * Image is the OCI image containing the Wasm code.
         *
         * Note that the image must be accessible from the Envoy Gateway.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImagePatch {
            pullSecretRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImagePullSecretRefPatch;
            /**
             * SHA256 checksum that will be used to verify the OCI image.
             *
             * It must match the digest of the OCI image.
             *
             * If not specified, Envoy Gateway will not verify the downloaded OCI image.
             * kubebuilder:validation:Pattern=`^[a-f0-9]{64}$`
             */
            sha256: string;
            tls: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImageTlsPatch;
            /**
             * URL is the URL of the OCI image.
             * URL can be in the format of `registry/image:tag` or `registry/image@sha256:digest`.
             */
            url: string;
        }

        /**
         * PullSecretRef is a reference to the secret containing the credentials to pull the image.
         * Only support Kubernetes Secret resource from the same namespace.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImagePullSecretRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * PullSecretRef is a reference to the secret containing the credentials to pull the image.
         * Only support Kubernetes Secret resource from the same namespace.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImagePullSecretRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * TLS configuration when connecting to the Wasm code source.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImageTls {
            caCertificateRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImageTlsCaCertificateRef;
        }

        /**
         * CACertificateRef contains a references to
         * Kubernetes objects that contain TLS certificates of
         * the Certificate Authorities that can be used
         * as a trust anchor to validate the certificates presented by the Wasm code source.
         *
         * Kubernetes ConfigMap and Kubernetes Secret are supported.
         * Note: The ConfigMap or Secret must be in the same namespace as the EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImageTlsCaCertificateRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * CACertificateRef contains a references to
         * Kubernetes objects that contain TLS certificates of
         * the Certificate Authorities that can be used
         * as a trust anchor to validate the certificates presented by the Wasm code source.
         *
         * Kubernetes ConfigMap and Kubernetes Secret are supported.
         * Note: The ConfigMap or Secret must be in the same namespace as the EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImageTlsCaCertificateRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * TLS configuration when connecting to the Wasm code source.
         */
        export interface EnvoyExtensionPolicySpecWasmCodeImageTlsPatch {
            caCertificateRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImageTlsCaCertificateRefPatch;
        }

        /**
         * Code is the Wasm code for the extension.
         */
        export interface EnvoyExtensionPolicySpecWasmCodePatch {
            http: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeHttpPatch;
            image: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodeImagePatch;
            /**
             * PullPolicy is the policy to use when pulling the Wasm module by either the HTTP or Image source.
             * This field is only applicable when the SHA256 field is not set.
             *
             * If not specified, the default policy is IfNotPresent except for OCI images whose tag is latest.
             *
             * Note: EG does not update the Wasm module every time an Envoy proxy requests
             * the Wasm module even if the pull policy is set to Always.
             * It only updates the Wasm module when the EnvoyExtension resource version changes.
             */
            pullPolicy: string;
            /**
             * Type is the type of the source of the Wasm code.
             * Valid WasmCodeSourceType values are "HTTP" or "Image".
             */
            type: string;
        }

        /**
         * Env configures the environment for the Wasm extension
         */
        export interface EnvoyExtensionPolicySpecWasmEnv {
            /**
             * HostKeys is a list of keys for environment variables from the host envoy process
             * that should be passed into the Wasm VM. This is useful for passing secrets to to Wasm extensions.
             */
            hostKeys: string[];
        }

        /**
         * Env configures the environment for the Wasm extension
         */
        export interface EnvoyExtensionPolicySpecWasmEnvPatch {
            /**
             * HostKeys is a list of keys for environment variables from the host envoy process
             * that should be passed into the Wasm VM. This is useful for passing secrets to to Wasm extensions.
             */
            hostKeys: string[];
        }

        /**
         * Wasm defines a Wasm extension.
         *
         * Note: at the moment, Envoy Gateway does not support configuring Wasm runtime.
         * v8 is used as the VM runtime for the Wasm extensions.
         */
        export interface EnvoyExtensionPolicySpecWasmPatch {
            code: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmCodePatch;
            /**
             * Config is the configuration for the Wasm extension.
             * This configuration will be passed as a JSON string to the Wasm extension.
             */
            config: {[key: string]: any};
            env: outputs.gateway.v1alpha1.EnvoyExtensionPolicySpecWasmEnvPatch;
            /**
             * FailOpen is a switch used to control the behavior when a fatal error occurs
             * during the initialization or the execution of the Wasm extension.
             *
             * If FailOpen is set to true, the system bypasses the Wasm extension and
             * allows the traffic to pass through. If it is set to false or
             * not set (defaulting to false), the system blocks the traffic and returns
             * an HTTP 5xx error.
             *
             * If set to true, the Wasm extension will also be bypassed if the configuration is invalid.
             */
            failOpen: boolean;
            /**
             * Name is a unique name for this Wasm extension. It is used to identify the
             * Wasm extension if multiple extensions are handled by the same vm_id and root_id.
             * It's also used for logging/debugging.
             * If not specified, EG will generate a unique name for the Wasm extension.
             */
            name: string;
            /**
             * RootID is a unique ID for a set of extensions in a VM which will share a
             * RootContext and Contexts if applicable (e.g., an Wasm HttpFilter and an Wasm AccessLog).
             * If left blank, all extensions with a blank root_id with the same vm_id will share Context(s).
             *
             * Note: RootID must match the root_id parameter used to register the Context in the Wasm code.
             */
            rootID: string;
        }

        /**
         * Status defines the current status of EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatusAncestors[];
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface EnvoyExtensionPolicyStatusAncestors {
            ancestorRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatusAncestorsAncestorRef;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatusAncestorsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface EnvoyExtensionPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface EnvoyExtensionPolicyStatusAncestorsAncestorRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface EnvoyExtensionPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface EnvoyExtensionPolicyStatusAncestorsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface EnvoyExtensionPolicyStatusAncestorsPatch {
            ancestorRef: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatusAncestorsAncestorRefPatch;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatusAncestorsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * Status defines the current status of EnvoyExtensionPolicy.
         */
        export interface EnvoyExtensionPolicyStatusPatch {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.EnvoyExtensionPolicyStatusAncestorsPatch[];
        }

        /**
         * EnvoyPatchPolicy allows the user to modify the generated Envoy xDS
         * resources by Envoy Gateway using this patch API
         */
        export interface EnvoyPatchPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "EnvoyPatchPolicy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.EnvoyPatchPolicySpec;
            status: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatus;
        }

        /**
         * Spec defines the desired state of EnvoyPatchPolicy.
         */
        export interface EnvoyPatchPolicySpec {
            /**
             * JSONPatch defines the JSONPatch configuration.
             */
            jsonPatches: outputs.gateway.v1alpha1.EnvoyPatchPolicySpecJsonPatches[];
            /**
             * Priority of the EnvoyPatchPolicy.
             * If multiple EnvoyPatchPolicies are applied to the same
             * TargetRef, they will be applied in the ascending order of
             * the priority i.e. int32.min has the highest priority and
             * int32.max has the lowest priority.
             * Defaults to 0.
             */
            priority: number;
            targetRef: outputs.gateway.v1alpha1.EnvoyPatchPolicySpecTargetRef;
            /**
             * Type decides the type of patch.
             * Valid EnvoyPatchType values are "JSONPatch".
             */
            type: string;
        }

        /**
         * EnvoyJSONPatchConfig defines the configuration for patching a Envoy xDS Resource
         * using JSONPatch semantic
         */
        export interface EnvoyPatchPolicySpecJsonPatches {
            /**
             * Name is the name of the resource
             */
            name: string;
            operation: outputs.gateway.v1alpha1.EnvoyPatchPolicySpecJsonPatchesOperation;
            /**
             * Type is the typed URL of the Envoy xDS Resource
             */
            type: string;
        }

        /**
         * Patch defines the JSON Patch Operation
         */
        export interface EnvoyPatchPolicySpecJsonPatchesOperation {
            /**
             * From is the source location of the value to be copied or moved. Only valid
             * for move or copy operations
             * Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             */
            from: string;
            /**
             * JSONPath is a JSONPath expression. Refer to https://datatracker.ietf.org/doc/rfc9535/ for more details.
             * It produces one or more JSONPointer expressions based on the given JSON document.
             * If no JSONPointer is found, it will result in an error.
             * If the 'Path' property is also set, it will be appended to the resulting JSONPointer expressions from the JSONPath evaluation.
             * This is useful when creating a property that does not yet exist in the JSON document.
             * The final JSONPointer expressions specifies the locations in the target document/field where the operation will be applied.
             */
            jsonPath: string;
            /**
             * Op is the type of operation to perform
             */
            op: string;
            /**
             * Path is a JSONPointer expression. Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             * It specifies the location of the target document/field where the operation will be performed
             */
            path: string;
            /**
             * Value is the new value of the path location. The value is only used by
             * the `add` and `replace` operations.
             */
            value: {[key: string]: any};
        }

        /**
         * Patch defines the JSON Patch Operation
         */
        export interface EnvoyPatchPolicySpecJsonPatchesOperationPatch {
            /**
             * From is the source location of the value to be copied or moved. Only valid
             * for move or copy operations
             * Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             */
            from: string;
            /**
             * JSONPath is a JSONPath expression. Refer to https://datatracker.ietf.org/doc/rfc9535/ for more details.
             * It produces one or more JSONPointer expressions based on the given JSON document.
             * If no JSONPointer is found, it will result in an error.
             * If the 'Path' property is also set, it will be appended to the resulting JSONPointer expressions from the JSONPath evaluation.
             * This is useful when creating a property that does not yet exist in the JSON document.
             * The final JSONPointer expressions specifies the locations in the target document/field where the operation will be applied.
             */
            jsonPath: string;
            /**
             * Op is the type of operation to perform
             */
            op: string;
            /**
             * Path is a JSONPointer expression. Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             * It specifies the location of the target document/field where the operation will be performed
             */
            path: string;
            /**
             * Value is the new value of the path location. The value is only used by
             * the `add` and `replace` operations.
             */
            value: {[key: string]: any};
        }

        /**
         * EnvoyJSONPatchConfig defines the configuration for patching a Envoy xDS Resource
         * using JSONPatch semantic
         */
        export interface EnvoyPatchPolicySpecJsonPatchesPatch {
            /**
             * Name is the name of the resource
             */
            name: string;
            operation: outputs.gateway.v1alpha1.EnvoyPatchPolicySpecJsonPatchesOperationPatch;
            /**
             * Type is the typed URL of the Envoy xDS Resource
             */
            type: string;
        }

        /**
         * Spec defines the desired state of EnvoyPatchPolicy.
         */
        export interface EnvoyPatchPolicySpecPatch {
            /**
             * JSONPatch defines the JSONPatch configuration.
             */
            jsonPatches: outputs.gateway.v1alpha1.EnvoyPatchPolicySpecJsonPatchesPatch[];
            /**
             * Priority of the EnvoyPatchPolicy.
             * If multiple EnvoyPatchPolicies are applied to the same
             * TargetRef, they will be applied in the ascending order of
             * the priority i.e. int32.min has the highest priority and
             * int32.max has the lowest priority.
             * Defaults to 0.
             */
            priority: number;
            targetRef: outputs.gateway.v1alpha1.EnvoyPatchPolicySpecTargetRefPatch;
            /**
             * Type decides the type of patch.
             * Valid EnvoyPatchType values are "JSONPatch".
             */
            type: string;
        }

        /**
         * TargetRef is the name of the Gateway API resource this policy
         * is being attached to.
         * By default, attaching to Gateway is supported and
         * when mergeGateways is enabled it should attach to GatewayClass.
         * This Policy and the TargetRef MUST be in the same namespace
         * for this Policy to have effect and be applied to the Gateway
         * TargetRef
         */
        export interface EnvoyPatchPolicySpecTargetRef {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
        }

        /**
         * TargetRef is the name of the Gateway API resource this policy
         * is being attached to.
         * By default, attaching to Gateway is supported and
         * when mergeGateways is enabled it should attach to GatewayClass.
         * This Policy and the TargetRef MUST be in the same namespace
         * for this Policy to have effect and be applied to the Gateway
         * TargetRef
         */
        export interface EnvoyPatchPolicySpecTargetRefPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
        }

        /**
         * Status defines the current status of EnvoyPatchPolicy.
         */
        export interface EnvoyPatchPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatusAncestors[];
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface EnvoyPatchPolicyStatusAncestors {
            ancestorRef: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatusAncestorsAncestorRef;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatusAncestorsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface EnvoyPatchPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface EnvoyPatchPolicyStatusAncestorsAncestorRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface EnvoyPatchPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface EnvoyPatchPolicyStatusAncestorsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface EnvoyPatchPolicyStatusAncestorsPatch {
            ancestorRef: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatusAncestorsAncestorRefPatch;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatusAncestorsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * Status defines the current status of EnvoyPatchPolicy.
         */
        export interface EnvoyPatchPolicyStatusPatch {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.EnvoyPatchPolicyStatusAncestorsPatch[];
        }

        /**
         * EnvoyProxy is the schema for the envoyproxies API.
         */
        export interface EnvoyProxy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "EnvoyProxy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.EnvoyProxySpec;
            /**
             * EnvoyProxyStatus defines the actual state of EnvoyProxy.
             */
            status: {[key: string]: string};
        }

        /**
         * EnvoyProxySpec defines the desired state of EnvoyProxy.
         */
        export interface EnvoyProxySpec {
            backendTLS: outputs.gateway.v1alpha1.EnvoyProxySpecBackendTLS;
            bootstrap: outputs.gateway.v1alpha1.EnvoyProxySpecBootstrap;
            /**
             * Concurrency defines the number of worker threads to run. If unset, it defaults to
             * the number of cpuset threads on the platform.
             */
            concurrency: number;
            /**
             * ExtraArgs defines additional command line options that are provided to Envoy.
             * More info: https://www.envoyproxy.io/docs/envoy/latest/operations/cli#command-line-options
             * Note: some command line options are used internally(e.g. --log-level) so they cannot be provided here.
             */
            extraArgs: string[];
            /**
             * FilterOrder defines the order of filters in the Envoy proxy's HTTP filter chain.
             * The FilterPosition in the list will be applied in the order they are defined.
             * If unspecified, the default filter order is applied.
             * Default filter order is:
             *
             * - envoy.filters.http.health_check
             *
             * - envoy.filters.http.fault
             *
             * - envoy.filters.http.cors
             *
             * - envoy.filters.http.ext_authz
             *
             * - envoy.filters.http.basic_auth
             *
             * - envoy.filters.http.oauth2
             *
             * - envoy.filters.http.jwt_authn
             *
             * - envoy.filters.http.stateful_session
             *
             * - envoy.filters.http.lua
             *
             * - envoy.filters.http.ext_proc
             *
             * - envoy.filters.http.wasm
             *
             * - envoy.filters.http.rbac
             *
             * - envoy.filters.http.local_ratelimit
             *
             * - envoy.filters.http.ratelimit
             *
             * - envoy.filters.http.custom_response
             *
             * - envoy.filters.http.router
             *
             * Note: "envoy.filters.http.router" cannot be reordered, it's always the last filter in the chain.
             */
            filterOrder: outputs.gateway.v1alpha1.EnvoyProxySpecFilterOrder[];
            /**
             * IPFamily specifies the IP family for the EnvoyProxy fleet.
             * This setting only affects the Gateway listener port and does not impact
             * other aspects of the Envoy proxy configuration.
             * If not specified, the system will operate as follows:
             * - It defaults to IPv4 only.
             * - IPv6 and dual-stack environments are not supported in this default configuration.
             * Note: To enable IPv6 or dual-stack functionality, explicit configuration is required.
             */
            ipFamily: string;
            logging: outputs.gateway.v1alpha1.EnvoyProxySpecLogging;
            /**
             * LuaValidation determines strictness of the Lua script validation for Lua EnvoyExtensionPolicies
             * Default: Strict
             */
            luaValidation: string;
            /**
             * MergeGateways defines if Gateway resources should be merged onto the same Envoy Proxy Infrastructure.
             * Setting this field to true would merge all Gateway Listeners under the parent Gateway Class.
             * This means that the port, protocol and hostname tuple must be unique for every listener.
             * If a duplicate listener is detected, the newer listener (based on timestamp) will be rejected and its status will be updated with a "Accepted=False" condition.
             */
            mergeGateways: boolean;
            /**
             * PreserveRouteOrder determines if the order of matching for HTTPRoutes is determined by Gateway-API
             * specification (https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule)
             * or preserves the order defined by users in the HTTPRoute's HTTPRouteRule list.
             * Default: False
             */
            preserveRouteOrder: boolean;
            provider: outputs.gateway.v1alpha1.EnvoyProxySpecProvider;
            /**
             * RoutingType can be set to "Service" to use the Service Cluster IP for routing to the backend,
             * or it can be set to "Endpoint" to use Endpoint routing. The default is "Endpoint".
             */
            routingType: string;
            shutdown: outputs.gateway.v1alpha1.EnvoyProxySpecShutdown;
            telemetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetry;
        }

        /**
         * BackendTLS is the TLS configuration for the Envoy proxy to use when connecting to backends.
         * These settings are applied on backends for which TLS policies are specified.
         */
        export interface EnvoyProxySpecBackendTLS {
            /**
             * ALPNProtocols supplies the list of ALPN protocols that should be
             * exposed by the listener or used by the proxy to connect to the backend.
             * Defaults:
             * 1. HTTPS Routes: h2 and http/1.1 are enabled in listener context.
             * 2. Other Routes: ALPN is disabled.
             * 3. Backends: proxy uses the appropriate ALPN options for the backend protocol.
             * When an empty list is provided, the ALPN TLS extension is disabled.
             * Supported values are:
             * - http/1.0
             * - http/1.1
             * - h2
             */
            alpnProtocols: string[];
            /**
             * Ciphers specifies the set of cipher suites supported when
             * negotiating TLS 1.0 - 1.2. This setting has no effect for TLS 1.3.
             * In non-FIPS Envoy Proxy builds the default cipher list is:
             * - [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
             * - [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             * In builds using BoringSSL FIPS the default cipher list is:
             * - ECDHE-ECDSA-AES128-GCM-SHA256
             * - ECDHE-RSA-AES128-GCM-SHA256
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             */
            ciphers: string[];
            clientCertificateRef: outputs.gateway.v1alpha1.EnvoyProxySpecBackendTLSClientCertificateRef;
            /**
             * ECDHCurves specifies the set of supported ECDH curves.
             * In non-FIPS Envoy Proxy builds the default curves are:
             * - X25519
             * - P-256
             * In builds using BoringSSL FIPS the default curve is:
             * - P-256
             */
            ecdhCurves: string[];
            /**
             * Max specifies the maximal TLS protocol version to allow
             * The default is TLS 1.3 if this is not specified.
             */
            maxVersion: string;
            /**
             * Min specifies the minimal TLS protocol version to allow.
             * The default is TLS 1.2 if this is not specified.
             */
            minVersion: string;
            /**
             * SignatureAlgorithms specifies which signature algorithms the listener should
             * support.
             */
            signatureAlgorithms: string[];
        }

        /**
         * ClientCertificateRef defines the reference to a Kubernetes Secret that contains
         * the client certificate and private key for Envoy to use when connecting to
         * backend services and external services, such as ExtAuth, ALS, OpenTelemetry, etc.
         * This secret should be located within the same namespace as the Envoy proxy resource that references it.
         */
        export interface EnvoyProxySpecBackendTLSClientCertificateRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * ClientCertificateRef defines the reference to a Kubernetes Secret that contains
         * the client certificate and private key for Envoy to use when connecting to
         * backend services and external services, such as ExtAuth, ALS, OpenTelemetry, etc.
         * This secret should be located within the same namespace as the Envoy proxy resource that references it.
         */
        export interface EnvoyProxySpecBackendTLSClientCertificateRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * BackendTLS is the TLS configuration for the Envoy proxy to use when connecting to backends.
         * These settings are applied on backends for which TLS policies are specified.
         */
        export interface EnvoyProxySpecBackendTLSPatch {
            /**
             * ALPNProtocols supplies the list of ALPN protocols that should be
             * exposed by the listener or used by the proxy to connect to the backend.
             * Defaults:
             * 1. HTTPS Routes: h2 and http/1.1 are enabled in listener context.
             * 2. Other Routes: ALPN is disabled.
             * 3. Backends: proxy uses the appropriate ALPN options for the backend protocol.
             * When an empty list is provided, the ALPN TLS extension is disabled.
             * Supported values are:
             * - http/1.0
             * - http/1.1
             * - h2
             */
            alpnProtocols: string[];
            /**
             * Ciphers specifies the set of cipher suites supported when
             * negotiating TLS 1.0 - 1.2. This setting has no effect for TLS 1.3.
             * In non-FIPS Envoy Proxy builds the default cipher list is:
             * - [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
             * - [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             * In builds using BoringSSL FIPS the default cipher list is:
             * - ECDHE-ECDSA-AES128-GCM-SHA256
             * - ECDHE-RSA-AES128-GCM-SHA256
             * - ECDHE-ECDSA-AES256-GCM-SHA384
             * - ECDHE-RSA-AES256-GCM-SHA384
             */
            ciphers: string[];
            clientCertificateRef: outputs.gateway.v1alpha1.EnvoyProxySpecBackendTLSClientCertificateRefPatch;
            /**
             * ECDHCurves specifies the set of supported ECDH curves.
             * In non-FIPS Envoy Proxy builds the default curves are:
             * - X25519
             * - P-256
             * In builds using BoringSSL FIPS the default curve is:
             * - P-256
             */
            ecdhCurves: string[];
            /**
             * Max specifies the maximal TLS protocol version to allow
             * The default is TLS 1.3 if this is not specified.
             */
            maxVersion: string;
            /**
             * Min specifies the minimal TLS protocol version to allow.
             * The default is TLS 1.2 if this is not specified.
             */
            minVersion: string;
            /**
             * SignatureAlgorithms specifies which signature algorithms the listener should
             * support.
             */
            signatureAlgorithms: string[];
        }

        /**
         * Bootstrap defines the Envoy Bootstrap as a YAML string.
         * Visit https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/bootstrap/v3/bootstrap.proto#envoy-v3-api-msg-config-bootstrap-v3-bootstrap
         * to learn more about the syntax.
         * If set, this is the Bootstrap configuration used for the managed Envoy Proxy fleet instead of the default Bootstrap configuration
         * set by Envoy Gateway.
         * Some fields within the Bootstrap that are required to communicate with the xDS Server (Envoy Gateway) and receive xDS resources
         * from it are not configurable and will result in the `EnvoyProxy` resource being rejected.
         * Backward compatibility across minor versions is not guaranteed.
         * We strongly recommend using `egctl x translate` to generate a `EnvoyProxy` resource with the `Bootstrap` field set to the default
         * Bootstrap configuration used. You can edit this configuration, and rerun `egctl x translate` to ensure there are no validation errors.
         */
        export interface EnvoyProxySpecBootstrap {
            /**
             * JSONPatches is an array of JSONPatches to be applied to the default bootstrap. Patches are
             * applied in the order in which they are defined.
             */
            jsonPatches: outputs.gateway.v1alpha1.EnvoyProxySpecBootstrapJsonPatches[];
            /**
             * Type is the type of the bootstrap configuration, it should be either **Replace**,  **Merge**, or **JSONPatch**.
             * If unspecified, it defaults to Replace.
             */
            type: string;
            /**
             * Value is a YAML string of the bootstrap.
             */
            value: string;
        }

        /**
         * JSONPatchOperation defines the JSON Patch Operation as defined in
         * https://datatracker.ietf.org/doc/html/rfc6902
         */
        export interface EnvoyProxySpecBootstrapJsonPatches {
            /**
             * From is the source location of the value to be copied or moved. Only valid
             * for move or copy operations
             * Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             */
            from: string;
            /**
             * JSONPath is a JSONPath expression. Refer to https://datatracker.ietf.org/doc/rfc9535/ for more details.
             * It produces one or more JSONPointer expressions based on the given JSON document.
             * If no JSONPointer is found, it will result in an error.
             * If the 'Path' property is also set, it will be appended to the resulting JSONPointer expressions from the JSONPath evaluation.
             * This is useful when creating a property that does not yet exist in the JSON document.
             * The final JSONPointer expressions specifies the locations in the target document/field where the operation will be applied.
             */
            jsonPath: string;
            /**
             * Op is the type of operation to perform
             */
            op: string;
            /**
             * Path is a JSONPointer expression. Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             * It specifies the location of the target document/field where the operation will be performed
             */
            path: string;
            /**
             * Value is the new value of the path location. The value is only used by
             * the `add` and `replace` operations.
             */
            value: {[key: string]: any};
        }

        /**
         * JSONPatchOperation defines the JSON Patch Operation as defined in
         * https://datatracker.ietf.org/doc/html/rfc6902
         */
        export interface EnvoyProxySpecBootstrapJsonPatchesPatch {
            /**
             * From is the source location of the value to be copied or moved. Only valid
             * for move or copy operations
             * Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             */
            from: string;
            /**
             * JSONPath is a JSONPath expression. Refer to https://datatracker.ietf.org/doc/rfc9535/ for more details.
             * It produces one or more JSONPointer expressions based on the given JSON document.
             * If no JSONPointer is found, it will result in an error.
             * If the 'Path' property is also set, it will be appended to the resulting JSONPointer expressions from the JSONPath evaluation.
             * This is useful when creating a property that does not yet exist in the JSON document.
             * The final JSONPointer expressions specifies the locations in the target document/field where the operation will be applied.
             */
            jsonPath: string;
            /**
             * Op is the type of operation to perform
             */
            op: string;
            /**
             * Path is a JSONPointer expression. Refer to https://datatracker.ietf.org/doc/html/rfc6901 for more details.
             * It specifies the location of the target document/field where the operation will be performed
             */
            path: string;
            /**
             * Value is the new value of the path location. The value is only used by
             * the `add` and `replace` operations.
             */
            value: {[key: string]: any};
        }

        /**
         * Bootstrap defines the Envoy Bootstrap as a YAML string.
         * Visit https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/bootstrap/v3/bootstrap.proto#envoy-v3-api-msg-config-bootstrap-v3-bootstrap
         * to learn more about the syntax.
         * If set, this is the Bootstrap configuration used for the managed Envoy Proxy fleet instead of the default Bootstrap configuration
         * set by Envoy Gateway.
         * Some fields within the Bootstrap that are required to communicate with the xDS Server (Envoy Gateway) and receive xDS resources
         * from it are not configurable and will result in the `EnvoyProxy` resource being rejected.
         * Backward compatibility across minor versions is not guaranteed.
         * We strongly recommend using `egctl x translate` to generate a `EnvoyProxy` resource with the `Bootstrap` field set to the default
         * Bootstrap configuration used. You can edit this configuration, and rerun `egctl x translate` to ensure there are no validation errors.
         */
        export interface EnvoyProxySpecBootstrapPatch {
            /**
             * JSONPatches is an array of JSONPatches to be applied to the default bootstrap. Patches are
             * applied in the order in which they are defined.
             */
            jsonPatches: outputs.gateway.v1alpha1.EnvoyProxySpecBootstrapJsonPatchesPatch[];
            /**
             * Type is the type of the bootstrap configuration, it should be either **Replace**,  **Merge**, or **JSONPatch**.
             * If unspecified, it defaults to Replace.
             */
            type: string;
            /**
             * Value is a YAML string of the bootstrap.
             */
            value: string;
        }

        /**
         * FilterPosition defines the position of an Envoy HTTP filter in the filter chain.
         */
        export interface EnvoyProxySpecFilterOrder {
            /**
             * After defines the filter that should come after the filter.
             * Only one of Before or After must be set.
             */
            after: string;
            /**
             * Before defines the filter that should come before the filter.
             * Only one of Before or After must be set.
             */
            before: string;
            /**
             * Name of the filter.
             */
            name: string;
        }

        /**
         * FilterPosition defines the position of an Envoy HTTP filter in the filter chain.
         */
        export interface EnvoyProxySpecFilterOrderPatch {
            /**
             * After defines the filter that should come after the filter.
             * Only one of Before or After must be set.
             */
            after: string;
            /**
             * Before defines the filter that should come before the filter.
             * Only one of Before or After must be set.
             */
            before: string;
            /**
             * Name of the filter.
             */
            name: string;
        }

        /**
         * Logging defines logging parameters for managed proxies.
         */
        export interface EnvoyProxySpecLogging {
            /**
             * Level is a map of logging level per component, where the component is the key
             * and the log level is the value. If unspecified, defaults to "default: warn".
             */
            level: {[key: string]: string};
        }

        /**
         * Logging defines logging parameters for managed proxies.
         */
        export interface EnvoyProxySpecLoggingPatch {
            /**
             * Level is a map of logging level per component, where the component is the key
             * and the log level is the value. If unspecified, defaults to "default: warn".
             */
            level: {[key: string]: string};
        }

        /**
         * EnvoyProxySpec defines the desired state of EnvoyProxy.
         */
        export interface EnvoyProxySpecPatch {
            backendTLS: outputs.gateway.v1alpha1.EnvoyProxySpecBackendTLSPatch;
            bootstrap: outputs.gateway.v1alpha1.EnvoyProxySpecBootstrapPatch;
            /**
             * Concurrency defines the number of worker threads to run. If unset, it defaults to
             * the number of cpuset threads on the platform.
             */
            concurrency: number;
            /**
             * ExtraArgs defines additional command line options that are provided to Envoy.
             * More info: https://www.envoyproxy.io/docs/envoy/latest/operations/cli#command-line-options
             * Note: some command line options are used internally(e.g. --log-level) so they cannot be provided here.
             */
            extraArgs: string[];
            /**
             * FilterOrder defines the order of filters in the Envoy proxy's HTTP filter chain.
             * The FilterPosition in the list will be applied in the order they are defined.
             * If unspecified, the default filter order is applied.
             * Default filter order is:
             *
             * - envoy.filters.http.health_check
             *
             * - envoy.filters.http.fault
             *
             * - envoy.filters.http.cors
             *
             * - envoy.filters.http.ext_authz
             *
             * - envoy.filters.http.basic_auth
             *
             * - envoy.filters.http.oauth2
             *
             * - envoy.filters.http.jwt_authn
             *
             * - envoy.filters.http.stateful_session
             *
             * - envoy.filters.http.lua
             *
             * - envoy.filters.http.ext_proc
             *
             * - envoy.filters.http.wasm
             *
             * - envoy.filters.http.rbac
             *
             * - envoy.filters.http.local_ratelimit
             *
             * - envoy.filters.http.ratelimit
             *
             * - envoy.filters.http.custom_response
             *
             * - envoy.filters.http.router
             *
             * Note: "envoy.filters.http.router" cannot be reordered, it's always the last filter in the chain.
             */
            filterOrder: outputs.gateway.v1alpha1.EnvoyProxySpecFilterOrderPatch[];
            /**
             * IPFamily specifies the IP family for the EnvoyProxy fleet.
             * This setting only affects the Gateway listener port and does not impact
             * other aspects of the Envoy proxy configuration.
             * If not specified, the system will operate as follows:
             * - It defaults to IPv4 only.
             * - IPv6 and dual-stack environments are not supported in this default configuration.
             * Note: To enable IPv6 or dual-stack functionality, explicit configuration is required.
             */
            ipFamily: string;
            logging: outputs.gateway.v1alpha1.EnvoyProxySpecLoggingPatch;
            /**
             * LuaValidation determines strictness of the Lua script validation for Lua EnvoyExtensionPolicies
             * Default: Strict
             */
            luaValidation: string;
            /**
             * MergeGateways defines if Gateway resources should be merged onto the same Envoy Proxy Infrastructure.
             * Setting this field to true would merge all Gateway Listeners under the parent Gateway Class.
             * This means that the port, protocol and hostname tuple must be unique for every listener.
             * If a duplicate listener is detected, the newer listener (based on timestamp) will be rejected and its status will be updated with a "Accepted=False" condition.
             */
            mergeGateways: boolean;
            /**
             * PreserveRouteOrder determines if the order of matching for HTTPRoutes is determined by Gateway-API
             * specification (https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule)
             * or preserves the order defined by users in the HTTPRoute's HTTPRouteRule list.
             * Default: False
             */
            preserveRouteOrder: boolean;
            provider: outputs.gateway.v1alpha1.EnvoyProxySpecProviderPatch;
            /**
             * RoutingType can be set to "Service" to use the Service Cluster IP for routing to the backend,
             * or it can be set to "Endpoint" to use Endpoint routing. The default is "Endpoint".
             */
            routingType: string;
            shutdown: outputs.gateway.v1alpha1.EnvoyProxySpecShutdownPatch;
            telemetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryPatch;
        }

        /**
         * Provider defines the desired resource provider and provider-specific configuration.
         * If unspecified, the "Kubernetes" resource provider is used with default configuration
         * parameters.
         */
        export interface EnvoyProxySpecProvider {
            kubernetes: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetes;
            /**
             * Type is the type of resource provider to use. A resource provider provides
             * infrastructure resources for running the data plane, e.g. Envoy proxy, and
             * optional auxiliary control planes. Supported types are "Kubernetes".
             */
            type: string;
        }

        /**
         * Kubernetes defines the desired state of the Kubernetes resource provider.
         * Kubernetes provides infrastructure resources for running the data plane,
         * e.g. Envoy proxy. If unspecified and type is "Kubernetes", default settings
         * for managed Kubernetes resources are applied.
         */
        export interface EnvoyProxySpecProviderKubernetes {
            envoyDaemonSet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSet;
            envoyDeployment: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeployment;
            envoyHpa: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpa;
            envoyPDB: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyPDB;
            envoyService: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyService;
            envoyServiceAccount: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyServiceAccount;
            /**
             * UseListenerPortAsContainerPort disables the port shifting feature in the Envoy Proxy.
             * When set to false (default value), if the service port is a privileged port (1-1023), add a constant to the value converting it into an ephemeral port.
             * This allows the container to bind to the port without needing a CAP_NET_BIND_SERVICE capability.
             */
            useListenerPortAsContainerPort: boolean;
        }

        /**
         * EnvoyDaemonSet defines the desired state of the Envoy daemonset resource.
         * Disabled by default, a deployment resource is used instead to provision the Envoy Proxy fleet
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSet {
            container: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainer;
            /**
             * Name of the daemonSet.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
            patch: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPatch;
            pod: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPod;
            strategy: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetStrategy;
        }

        /**
         * Container defines the desired specification of main container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainer {
            /**
             * List of environment variables to set in the container.
             */
            env: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnv[];
            /**
             * Image specifies the EnvoyProxy container image to be used including a tag, instead of the default image.
             * This field is mutually exclusive with ImageRepository.
             */
            image: string;
            /**
             * ImageRepository specifies the container image repository to be used without specifying a tag.
             * The default tag will be used.
             * This field is mutually exclusive with Image.
             */
            imageRepository: string;
            resources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerResources;
            securityContext: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContext;
            /**
             * VolumeMounts are volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerVolumeMounts[];
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFrom {
            configMapKeyRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromFieldRef;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Resources required by this container.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextAppArmorProfile;
            capabilities: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextSeLinuxOptions;
            seccompProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextSeccompProfile;
            windowsOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetContainerVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Patch defines how to perform the patch operation to daemonset
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPatch {
            /**
             * Type is the type of merge operation to perform
             *
             * By default, StrategicMerge is used as the patch type.
             */
            type: string;
            /**
             * Object contains the raw configuration for merged object
             */
            value: {[key: string]: any};
        }

        /**
         * Pod defines the desired specification of pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPod {
            affinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinity;
            /**
             * Annotations are the annotations that should be appended to the pods.
             * By default, no pod annotations are appended.
             */
            annotations: {[key: string]: string};
            /**
             * ImagePullSecrets is an optional list of references to secrets
             * in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodImagePullSecrets[];
            /**
             * Labels are the additional labels that should be tagged to the pods.
             * By default, no additional pod labels are tagged.
             */
            labels: {[key: string]: string};
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            securityContext: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContext;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTopologySpreadConstraints[];
            /**
             * Volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinity {
            nodeAffinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinity;
            podAffinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinity;
            podAntiAffinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContext {
            appArmorProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextAppArmorProfile;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextSeLinuxOptions;
            seccompProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextSysctls[];
            windowsOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTopologySpreadConstraints {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumes {
            awsElasticBlockStore: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesAwsElasticBlockStore;
            azureDisk: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesAzureDisk;
            azureFile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesAzureFile;
            cephfs: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCephfs;
            cinder: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCinder;
            configMap: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesConfigMap;
            csi: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCsi;
            downwardAPI: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPI;
            emptyDir: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEmptyDir;
            ephemeral: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeral;
            fc: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFc;
            flexVolume: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFlexVolume;
            flocker: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFlocker;
            gcePersistentDisk: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesGcePersistentDisk;
            gitRepo: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesGitRepo;
            glusterfs: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesGlusterfs;
            hostPath: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesHostPath;
            image: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesImage;
            iscsi: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesIscsi;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesNfs;
            persistentVolumeClaim: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesPhotonPersistentDisk;
            portworxVolume: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesPortworxVolume;
            projected: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjected;
            quobyte: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesQuobyte;
            rbd: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesRbd;
            scaleIO: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesScaleIO;
            secret: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesSecret;
            storageos: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesStorageos;
            vsphereVolume: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesVsphereVolume;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCephfsSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCinder {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCinderSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPIItems {
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeral {
            volumeClaimTemplate: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC
             * when creating it. No other fields are allowed and will be rejected during
             * validation.
             */
            metadata: {[key: string]: string};
            spec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFc {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFlexVolumeSecretRef;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesGitRepo {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesHostPath {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesImage {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesIscsiSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesNfs {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSources[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSources {
            clusterTrustBundle: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesClusterTrustBundle;
            configMap: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPI;
            secret: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesQuobyte {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesRbdSecretRef;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesRbdSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesScaleIOSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesStorageos {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesStorageosSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPodVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * The daemonset strategy to use to replace existing pods with new ones.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetStrategy {
            rollingUpdate: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetStrategyRollingUpdate;
            /**
             * Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
             */
            type: string;
        }

        /**
         * Rolling update config params. Present only if type = "RollingUpdate".
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDaemonSetStrategyRollingUpdate {
            /**
             * The maximum number of nodes with an existing available DaemonSet pod that
             * can have an updated DaemonSet pod during during an update.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * This can not be 0 if MaxUnavailable is 0.
             * Absolute number is calculated from percentage by rounding up to a minimum of 1.
             * Default value is 0.
             * Example: when this is set to 30%, at most 30% of the total number of nodes
             * that should be running the daemon pod (i.e. status.desiredNumberScheduled)
             * can have their a new pod created before the old pod is marked as deleted.
             * The update starts by launching new pods on 30% of nodes. Once an updated
             * pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
             * on that node is marked deleted. If the old pod becomes unavailable for any
             * reason (Ready transitions to false, is evicted, or is drained) an updated
             * pod is immediatedly created on that node without considering surge limits.
             * Allowing surge implies the possibility that the resources consumed by the
             * daemonset on any given node can double if the readiness check fails, and
             * so resource intensive daemonsets should take into account that they may
             * cause evictions during disruption.
             */
            maxSurge: number | string;
            /**
             * The maximum number of DaemonSet pods that can be unavailable during the
             * update. Value can be an absolute number (ex: 5) or a percentage of total
             * number of DaemonSet pods at the start of the update (ex: 10%). Absolute
             * number is calculated from percentage by rounding up.
             * This cannot be 0 if MaxSurge is 0
             * Default value is 1.
             * Example: when this is set to 30%, at most 30% of the total number of nodes
             * that should be running the daemon pod (i.e. status.desiredNumberScheduled)
             * can have their pods stopped for an update at any given time. The update
             * starts by stopping at most 30% of those DaemonSet pods and then brings
             * up new DaemonSet pods in their place. Once the new pods are available,
             * it then proceeds onto other DaemonSet pods, thus ensuring that at least
             * 70% of original number of DaemonSet pods are available at all times during
             * the update.
             */
            maxUnavailable: number | string;
        }

        /**
         * EnvoyDeployment defines the desired state of the Envoy deployment resource.
         * If unspecified, default settings for the managed Envoy deployment resource
         * are applied.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeployment {
            container: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainer;
            /**
             * List of initialization containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainers[];
            /**
             * Name of the deployment.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
            patch: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPatch;
            pod: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPod;
            /**
             * Replicas is the number of desired pods. Defaults to 1.
             */
            replicas: number;
            strategy: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentStrategy;
        }

        /**
         * Container defines the desired specification of main container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainer {
            /**
             * List of environment variables to set in the container.
             */
            env: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnv[];
            /**
             * Image specifies the EnvoyProxy container image to be used including a tag, instead of the default image.
             * This field is mutually exclusive with ImageRepository.
             */
            image: string;
            /**
             * ImageRepository specifies the container image repository to be used without specifying a tag.
             * The default tag will be used.
             * This field is mutually exclusive with Image.
             */
            imageRepository: string;
            resources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerResources;
            securityContext: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContext;
            /**
             * VolumeMounts are volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerVolumeMounts[];
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFrom {
            configMapKeyRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromFieldRef;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Resources required by this container.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextAppArmorProfile;
            capabilities: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextSeLinuxOptions;
            seccompProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextSeccompProfile;
            windowsOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentContainerVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecycle;
            livenessProbe: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersPorts[];
            readinessProbe: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersResizePolicy[];
            resources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContext;
            startupProbe: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps or Secrets
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvFrom {
            configMapRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvFromConfigMapRef;
            /**
             * Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFrom {
            configMapKeyRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecycle {
            postStart: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStart;
            preStop: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStop;
            /**
             * StopSignal defines which signal will be sent to a container when it is being stopped.
             * If not specified, the default is defined by the container runtime in use.
             * StopSignal can only be set for Pods with a non-empty .spec.os.name
             */
            stopSignal: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStart {
            exec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartExec;
            httpGet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartHttpGet;
            sleep: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartSleep;
            tcpSocket: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStop {
            exec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopExec;
            httpGet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopHttpGet;
            sleep: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopSleep;
            tcpSocket: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbe {
            exec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeGrpc;
            httpGet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbe {
            exec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeGrpc;
            httpGet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextAppArmorProfile;
            capabilities: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbe {
            exec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeGrpc;
            httpGet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Patch defines how to perform the patch operation to deployment
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPatch {
            /**
             * Type is the type of merge operation to perform
             *
             * By default, StrategicMerge is used as the patch type.
             */
            type: string;
            /**
             * Object contains the raw configuration for merged object
             */
            value: {[key: string]: any};
        }

        /**
         * Pod defines the desired specification of pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPod {
            affinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinity;
            /**
             * Annotations are the annotations that should be appended to the pods.
             * By default, no pod annotations are appended.
             */
            annotations: {[key: string]: string};
            /**
             * ImagePullSecrets is an optional list of references to secrets
             * in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodImagePullSecrets[];
            /**
             * Labels are the additional labels that should be tagged to the pods.
             * By default, no additional pod labels are tagged.
             */
            labels: {[key: string]: string};
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            securityContext: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContext;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTopologySpreadConstraints[];
            /**
             * Volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinity {
            nodeAffinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinity;
            podAffinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinity;
            podAntiAffinity: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContext {
            appArmorProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextAppArmorProfile;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextSeLinuxOptions;
            seccompProfile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextSysctls[];
            windowsOptions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTopologySpreadConstraints {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumes {
            awsElasticBlockStore: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesAwsElasticBlockStore;
            azureDisk: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesAzureDisk;
            azureFile: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesAzureFile;
            cephfs: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCephfs;
            cinder: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCinder;
            configMap: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesConfigMap;
            csi: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCsi;
            downwardAPI: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPI;
            emptyDir: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEmptyDir;
            ephemeral: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeral;
            fc: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFc;
            flexVolume: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFlexVolume;
            flocker: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFlocker;
            gcePersistentDisk: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesGcePersistentDisk;
            gitRepo: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesGitRepo;
            glusterfs: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesGlusterfs;
            hostPath: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesHostPath;
            image: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesImage;
            iscsi: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesIscsi;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesNfs;
            persistentVolumeClaim: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesPhotonPersistentDisk;
            portworxVolume: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesPortworxVolume;
            projected: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjected;
            quobyte: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesQuobyte;
            rbd: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesRbd;
            scaleIO: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesScaleIO;
            secret: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesSecret;
            storageos: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesStorageos;
            vsphereVolume: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesVsphereVolume;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCephfsSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCinder {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCinderSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPIItems {
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeral {
            volumeClaimTemplate: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplate;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC
             * when creating it. No other fields are allowed and will be rejected during
             * validation.
             */
            metadata: {[key: string]: string};
            spec: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpec;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFc {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFlexVolumeSecretRef;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesGitRepo {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesHostPath {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesImage {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesIscsiSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesNfs {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSources[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSources {
            clusterTrustBundle: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesClusterTrustBundle;
            configMap: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPI;
            secret: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesQuobyte {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesRbdSecretRef;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesRbdSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesScaleIOSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesStorageos {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesStorageosSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentPodVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * The deployment strategy to use to replace existing pods with new ones.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentStrategy {
            rollingUpdate: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentStrategyRollingUpdate;
            /**
             * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
             */
            type: string;
        }

        /**
         * Rolling update config params. Present only if DeploymentStrategyType =
         * RollingUpdate.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyDeploymentStrategyRollingUpdate {
            /**
             * The maximum number of pods that can be scheduled above the desired number of
             * pods.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * This can not be 0 if MaxUnavailable is 0.
             * Absolute number is calculated from percentage by rounding up.
             * Defaults to 25%.
             * Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
             * the rolling update starts, such that the total number of old and new pods do not exceed
             * 130% of desired pods. Once old pods have been killed,
             * new ReplicaSet can be scaled up further, ensuring that total number of pods running
             * at any time during the update is at most 130% of desired pods.
             */
            maxSurge: number | string;
            /**
             * The maximum number of pods that can be unavailable during the update.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * Absolute number is calculated from percentage by rounding down.
             * This can not be 0 if MaxSurge is 0.
             * Defaults to 25%.
             * Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
             * immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
             * can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
             * that the total number of pods available at all times during the update is at
             * least 70% of desired pods.
             */
            maxUnavailable: number | string;
        }

        /**
         * EnvoyHpa defines the Horizontal Pod Autoscaler settings for Envoy Proxy Deployment.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpa {
            behavior: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaBehavior;
            /**
             * maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
             * It cannot be less that minReplicas.
             */
            maxReplicas: number;
            /**
             * metrics contains the specifications for which to use to calculate the
             * desired replica count (the maximum replica count across all metrics will
             * be used).
             * If left empty, it defaults to being based on CPU utilization with average on 80% usage.
             */
            metrics: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetrics[];
            /**
             * minReplicas is the lower limit for the number of replicas to which the autoscaler
             * can scale down. It defaults to 1 replica.
             */
            minReplicas: number;
            /**
             * Name of the horizontalPodAutoScaler.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
            patch: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaPatch;
        }

        /**
         * behavior configures the scaling behavior of the target
         * in both Up and Down directions (scaleUp and scaleDown fields respectively).
         * If not set, the default HPAScalingRules for scale up and scale down are used.
         * See k8s.io.autoscaling.v2.HorizontalPodAutoScalerBehavior.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaBehavior {
            scaleDown: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleDown;
            scaleUp: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleUp;
        }

        /**
         * scaleDown is scaling policy for scaling Down.
         * If not set, the default value is to allow to scale down to minReplicas pods, with a
         * 300 second stabilization window (i.e., the highest recommendation for
         * the last 300sec is used).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleDown {
            /**
             * policies is a list of potential scaling polices which can be used during scaling.
             * If not set, use the default values:
             * - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window.
             * - For scale down: allow all pods to be removed in a 15s window.
             */
            policies: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleDownPolicies[];
            /**
             * selectPolicy is used to specify which policy should be used.
             * If not set, the default value Max is used.
             */
            selectPolicy: string;
            /**
             * stabilizationWindowSeconds is the number of seconds for which past recommendations should be
             * considered while scaling up or scaling down.
             * StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
             * If not set, use the default values:
             * - For scale up: 0 (i.e. no stabilization is done).
             * - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
             */
            stabilizationWindowSeconds: number;
            /**
             * tolerance is the tolerance on the ratio between the current and desired
             * metric value under which no updates are made to the desired number of
             * replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not
             * set, the default cluster-wide tolerance is applied (by default 10%).
             *
             * For example, if autoscaling is configured with a memory consumption target of 100Mi,
             * and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be
             * triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
             *
             * This is an alpha field and requires enabling the HPAConfigurableTolerance
             * feature gate.
             */
            tolerance: number | string;
        }

        /**
         * HPAScalingPolicy is a single policy which must hold true for a specified past interval.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleDownPolicies {
            /**
             * periodSeconds specifies the window of time for which the policy should hold true.
             * PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
             */
            periodSeconds: number;
            /**
             * type is used to specify the scaling policy.
             */
            type: string;
            /**
             * value contains the amount of change which is permitted by the policy.
             * It must be greater than zero
             */
            value: number;
        }

        /**
         * scaleUp is scaling policy for scaling Up.
         * If not set, the default value is the higher of:
         *   * increase no more than 4 pods per 60 seconds
         *   * double the number of pods per 60 seconds
         * No stabilization is used.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleUp {
            /**
             * policies is a list of potential scaling polices which can be used during scaling.
             * If not set, use the default values:
             * - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window.
             * - For scale down: allow all pods to be removed in a 15s window.
             */
            policies: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleUpPolicies[];
            /**
             * selectPolicy is used to specify which policy should be used.
             * If not set, the default value Max is used.
             */
            selectPolicy: string;
            /**
             * stabilizationWindowSeconds is the number of seconds for which past recommendations should be
             * considered while scaling up or scaling down.
             * StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
             * If not set, use the default values:
             * - For scale up: 0 (i.e. no stabilization is done).
             * - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
             */
            stabilizationWindowSeconds: number;
            /**
             * tolerance is the tolerance on the ratio between the current and desired
             * metric value under which no updates are made to the desired number of
             * replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not
             * set, the default cluster-wide tolerance is applied (by default 10%).
             *
             * For example, if autoscaling is configured with a memory consumption target of 100Mi,
             * and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be
             * triggered when the actual consumption falls below 95Mi or exceeds 101Mi.
             *
             * This is an alpha field and requires enabling the HPAConfigurableTolerance
             * feature gate.
             */
            tolerance: number | string;
        }

        /**
         * HPAScalingPolicy is a single policy which must hold true for a specified past interval.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaBehaviorScaleUpPolicies {
            /**
             * periodSeconds specifies the window of time for which the policy should hold true.
             * PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
             */
            periodSeconds: number;
            /**
             * type is used to specify the scaling policy.
             */
            type: string;
            /**
             * value contains the amount of change which is permitted by the policy.
             * It must be greater than zero
             */
            value: number;
        }

        /**
         * MetricSpec specifies how to scale based on a single metric
         * (only `type` and one other matching field should be set at once).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetrics {
            containerResource: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsContainerResource;
            external: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternal;
            object: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObject;
            pods: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPods;
            resource: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsResource;
            /**
             * type is the type of metric source.  It should be one of "ContainerResource", "External",
             * "Object", "Pods" or "Resource", each mapping to a matching field in the object.
             */
            type: string;
        }

        /**
         * containerResource refers to a resource metric (such as those specified in
         * requests and limits) known to Kubernetes describing a single container in
         * each pod of the current scale target (e.g. CPU or memory). Such metrics are
         * built in to Kubernetes, and have special scaling options on top of those
         * available to normal per-pod metrics using the "pods" source.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsContainerResource {
            /**
             * container is the name of the container in the pods of the scaling target
             */
            container: string;
            /**
             * name is the name of the resource in question.
             */
            name: string;
            target: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsContainerResourceTarget;
        }

        /**
         * target specifies the target value for the given metric
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsContainerResourceTarget {
            /**
             * averageUtilization is the target value of the average of the
             * resource metric across all relevant pods, represented as a percentage of
             * the requested value of the resource for the pods.
             * Currently only valid for Resource metric source type
             */
            averageUtilization: number;
            /**
             * averageValue is the target value of the average of the
             * metric across all relevant pods (as a quantity)
             */
            averageValue: number | string;
            /**
             * type represents whether the metric type is Utilization, Value, or AverageValue
             */
            type: string;
            /**
             * value is the target value of the metric (as a quantity).
             */
            value: number | string;
        }

        /**
         * external refers to a global metric that is not associated
         * with any Kubernetes object. It allows autoscaling based on information
         * coming from components running outside of cluster
         * (for example length of queue in cloud messaging service, or
         * QPS from loadbalancer running outside of cluster).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternal {
            metric: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalMetric;
            target: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalTarget;
        }

        /**
         * metric identifies the target metric by name and selector
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalMetric {
            /**
             * name is the name of the given metric
             */
            name: string;
            selector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalMetricSelector;
        }

        /**
         * selector is the string-encoded form of a standard kubernetes label selector for the given metric
         * When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
         * When unset, just the metricName will be used to gather metrics.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalMetricSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalMetricSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalMetricSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * target specifies the target value for the given metric
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsExternalTarget {
            /**
             * averageUtilization is the target value of the average of the
             * resource metric across all relevant pods, represented as a percentage of
             * the requested value of the resource for the pods.
             * Currently only valid for Resource metric source type
             */
            averageUtilization: number;
            /**
             * averageValue is the target value of the average of the
             * metric across all relevant pods (as a quantity)
             */
            averageValue: number | string;
            /**
             * type represents whether the metric type is Utilization, Value, or AverageValue
             */
            type: string;
            /**
             * value is the target value of the metric (as a quantity).
             */
            value: number | string;
        }

        /**
         * object refers to a metric describing a single kubernetes object
         * (for example, hits-per-second on an Ingress object).
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObject {
            describedObject: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectDescribedObject;
            metric: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectMetric;
            target: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectTarget;
        }

        /**
         * describedObject specifies the descriptions of a object,such as kind,name apiVersion
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectDescribedObject {
            /**
             * apiVersion is the API version of the referent
             */
            apiVersion: string;
            /**
             * kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * metric identifies the target metric by name and selector
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectMetric {
            /**
             * name is the name of the given metric
             */
            name: string;
            selector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectMetricSelector;
        }

        /**
         * selector is the string-encoded form of a standard kubernetes label selector for the given metric
         * When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
         * When unset, just the metricName will be used to gather metrics.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectMetricSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectMetricSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectMetricSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * target specifies the target value for the given metric
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsObjectTarget {
            /**
             * averageUtilization is the target value of the average of the
             * resource metric across all relevant pods, represented as a percentage of
             * the requested value of the resource for the pods.
             * Currently only valid for Resource metric source type
             */
            averageUtilization: number;
            /**
             * averageValue is the target value of the average of the
             * metric across all relevant pods (as a quantity)
             */
            averageValue: number | string;
            /**
             * type represents whether the metric type is Utilization, Value, or AverageValue
             */
            type: string;
            /**
             * value is the target value of the metric (as a quantity).
             */
            value: number | string;
        }

        /**
         * pods refers to a metric describing each pod in the current scale target
         * (for example, transactions-processed-per-second).  The values will be
         * averaged together before being compared to the target value.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPods {
            metric: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsMetric;
            target: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsTarget;
        }

        /**
         * metric identifies the target metric by name and selector
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsMetric {
            /**
             * name is the name of the given metric
             */
            name: string;
            selector: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsMetricSelector;
        }

        /**
         * selector is the string-encoded form of a standard kubernetes label selector for the given metric
         * When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
         * When unset, just the metricName will be used to gather metrics.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsMetricSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsMetricSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsMetricSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * target specifies the target value for the given metric
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsPodsTarget {
            /**
             * averageUtilization is the target value of the average of the
             * resource metric across all relevant pods, represented as a percentage of
             * the requested value of the resource for the pods.
             * Currently only valid for Resource metric source type
             */
            averageUtilization: number;
            /**
             * averageValue is the target value of the average of the
             * metric across all relevant pods (as a quantity)
             */
            averageValue: number | string;
            /**
             * type represents whether the metric type is Utilization, Value, or AverageValue
             */
            type: string;
            /**
             * value is the target value of the metric (as a quantity).
             */
            value: number | string;
        }

        /**
         * resource refers to a resource metric (such as those specified in
         * requests and limits) known to Kubernetes describing each pod in the
         * current scale target (e.g. CPU or memory). Such metrics are built in to
         * Kubernetes, and have special scaling options on top of those available
         * to normal per-pod metrics using the "pods" source.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsResource {
            /**
             * name is the name of the resource in question.
             */
            name: string;
            target: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsResourceTarget;
        }

        /**
         * target specifies the target value for the given metric
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaMetricsResourceTarget {
            /**
             * averageUtilization is the target value of the average of the
             * resource metric across all relevant pods, represented as a percentage of
             * the requested value of the resource for the pods.
             * Currently only valid for Resource metric source type
             */
            averageUtilization: number;
            /**
             * averageValue is the target value of the average of the
             * metric across all relevant pods (as a quantity)
             */
            averageValue: number | string;
            /**
             * type represents whether the metric type is Utilization, Value, or AverageValue
             */
            type: string;
            /**
             * value is the target value of the metric (as a quantity).
             */
            value: number | string;
        }

        /**
         * Patch defines how to perform the patch operation to the HorizontalPodAutoscaler
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyHpaPatch {
            /**
             * Type is the type of merge operation to perform
             *
             * By default, StrategicMerge is used as the patch type.
             */
            type: string;
            /**
             * Object contains the raw configuration for merged object
             */
            value: {[key: string]: any};
        }

        /**
         * EnvoyPDB allows to control the pod disruption budget of an Envoy Proxy.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyPDB {
            /**
             * MaxUnavailable specifies the maximum amount of pods (can be expressed as integers or as a percentage) that can be unavailable at all times during voluntary disruptions,
             * such as node drains or updates. This setting ensures that your envoy proxy maintains a certain level of availability
             * and resilience during maintenance operations. Cannot be combined with minAvailable.
             */
            maxUnavailable: number | string;
            /**
             * MinAvailable specifies the minimum amount of pods (can be expressed as integers or as a percentage) that must be available at all times during voluntary disruptions,
             * such as node drains or updates. This setting ensures that your envoy proxy maintains a certain level of availability
             * and resilience during maintenance operations. Cannot be combined with maxUnavailable.
             */
            minAvailable: number | string;
            /**
             * Name of the podDisruptionBudget.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
            patch: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyPDBPatch;
        }

        /**
         * Patch defines how to perform the patch operation to the PodDisruptionBudget
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyPDBPatch {
            /**
             * Type is the type of merge operation to perform
             *
             * By default, StrategicMerge is used as the patch type.
             */
            type: string;
            /**
             * Object contains the raw configuration for merged object
             */
            value: {[key: string]: any};
        }

        /**
         * EnvoyService defines the desired state of the Envoy service resource.
         * If unspecified, default settings for the managed Envoy service resource
         * are applied.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyService {
            /**
             * AllocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for
             * services with type LoadBalancer. Default is "true". It may be set to "false" if the cluster
             * load-balancer does not rely on NodePorts. If the caller requests specific NodePorts (by specifying a
             * value), those requests will be respected, regardless of this field. This field may only be set for
             * services with type LoadBalancer and will be cleared if the type is changed to any other type.
             */
            allocateLoadBalancerNodePorts: boolean;
            /**
             * Annotations that should be appended to the service.
             * By default, no annotations are appended.
             */
            annotations: {[key: string]: string};
            /**
             * ExternalTrafficPolicy determines the externalTrafficPolicy for the Envoy Service. Valid options
             * are Local and Cluster. Default is "Local". "Local" means traffic will only go to pods on the node
             * receiving the traffic. "Cluster" means connections are loadbalanced to all pods in the cluster.
             */
            externalTrafficPolicy: string;
            /**
             * Labels that should be appended to the service.
             * By default, no labels are appended.
             */
            labels: {[key: string]: string};
            /**
             * LoadBalancerClass, when specified, allows for choosing the LoadBalancer provider
             * implementation if more than one are available or is otherwise expected to be specified
             */
            loadBalancerClass: string;
            /**
             * LoadBalancerIP defines the IP Address of the underlying load balancer service. This field
             * may be ignored if the load balancer provider does not support this feature.
             * This field has been deprecated in Kubernetes, but it is still used for setting the IP Address in some cloud
             * providers such as GCP.
             */
            loadBalancerIP: string;
            /**
             * LoadBalancerSourceRanges defines a list of allowed IP addresses which will be configured as
             * firewall rules on the platform providers load balancer. This is not guaranteed to be working as
             * it happens outside of kubernetes and has to be supported and handled by the platform provider.
             * This field may only be set for services with type LoadBalancer and will be cleared if the type
             * is changed to any other type.
             */
            loadBalancerSourceRanges: string[];
            /**
             * Name of the service.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
            patch: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyServicePatch;
            /**
             * Type determines how the Service is exposed. Defaults to LoadBalancer.
             * Valid options are ClusterIP, LoadBalancer and NodePort.
             * "LoadBalancer" means a service will be exposed via an external load balancer (if the cloud provider supports it).
             * "ClusterIP" means a service will only be accessible inside the cluster, via the cluster IP.
             * "NodePort" means a service will be exposed on a static Port on all Nodes of the cluster.
             */
            type: string;
        }

        /**
         * EnvoyServiceAccount defines the desired state of the Envoy service account resource.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyServiceAccount {
            /**
             * Name of the Service Account.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
        }

        /**
         * EnvoyServiceAccount defines the desired state of the Envoy service account resource.
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyServiceAccountPatch {
            /**
             * Name of the Service Account.
             * When unset, this defaults to an autogenerated name.
             */
            name: string;
        }

        /**
         * Patch defines how to perform the patch operation to the service
         */
        export interface EnvoyProxySpecProviderKubernetesEnvoyServicePatch {
            /**
             * Type is the type of merge operation to perform
             *
             * By default, StrategicMerge is used as the patch type.
             */
            type: string;
            /**
             * Object contains the raw configuration for merged object
             */
            value: {[key: string]: any};
        }

        /**
         * Kubernetes defines the desired state of the Kubernetes resource provider.
         * Kubernetes provides infrastructure resources for running the data plane,
         * e.g. Envoy proxy. If unspecified and type is "Kubernetes", default settings
         * for managed Kubernetes resources are applied.
         */
        export interface EnvoyProxySpecProviderKubernetesPatch {
            envoyDaemonSet: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDaemonSetPatch;
            envoyDeployment: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyDeploymentPatch;
            envoyHpa: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyHpaPatch;
            envoyPDB: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyPDBPatch;
            envoyService: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyServicePatch;
            envoyServiceAccount: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesEnvoyServiceAccountPatch;
            /**
             * UseListenerPortAsContainerPort disables the port shifting feature in the Envoy Proxy.
             * When set to false (default value), if the service port is a privileged port (1-1023), add a constant to the value converting it into an ephemeral port.
             * This allows the container to bind to the port without needing a CAP_NET_BIND_SERVICE capability.
             */
            useListenerPortAsContainerPort: boolean;
        }

        /**
         * Provider defines the desired resource provider and provider-specific configuration.
         * If unspecified, the "Kubernetes" resource provider is used with default configuration
         * parameters.
         */
        export interface EnvoyProxySpecProviderPatch {
            kubernetes: outputs.gateway.v1alpha1.EnvoyProxySpecProviderKubernetesPatch;
            /**
             * Type is the type of resource provider to use. A resource provider provides
             * infrastructure resources for running the data plane, e.g. Envoy proxy, and
             * optional auxiliary control planes. Supported types are "Kubernetes".
             */
            type: string;
        }

        /**
         * Shutdown defines configuration for graceful envoy shutdown process.
         */
        export interface EnvoyProxySpecShutdown {
            /**
             * DrainTimeout defines the graceful drain timeout. This should be less than the pod's terminationGracePeriodSeconds.
             * If unspecified, defaults to 60 seconds.
             */
            drainTimeout: string;
            /**
             * MinDrainDuration defines the minimum drain duration allowing time for endpoint deprogramming to complete.
             * If unspecified, defaults to 10 seconds.
             */
            minDrainDuration: string;
        }

        /**
         * Shutdown defines configuration for graceful envoy shutdown process.
         */
        export interface EnvoyProxySpecShutdownPatch {
            /**
             * DrainTimeout defines the graceful drain timeout. This should be less than the pod's terminationGracePeriodSeconds.
             * If unspecified, defaults to 60 seconds.
             */
            drainTimeout: string;
            /**
             * MinDrainDuration defines the minimum drain duration allowing time for endpoint deprogramming to complete.
             * If unspecified, defaults to 10 seconds.
             */
            minDrainDuration: string;
        }

        /**
         * Telemetry defines telemetry parameters for managed proxies.
         */
        export interface EnvoyProxySpecTelemetry {
            accessLog: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLog;
            metrics: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetrics;
            tracing: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracing;
        }

        /**
         * AccessLogs defines accesslog parameters for managed proxies.
         * If unspecified, will send default format to stdout.
         */
        export interface EnvoyProxySpecTelemetryAccessLog {
            /**
             * Disable disables access logging for managed proxies if set to true.
             */
            disable: boolean;
            /**
             * Settings defines accesslog settings for managed proxies.
             * If unspecified, will send default format to stdout.
             */
            settings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettings[];
        }

        /**
         * AccessLogs defines accesslog parameters for managed proxies.
         * If unspecified, will send default format to stdout.
         */
        export interface EnvoyProxySpecTelemetryAccessLogPatch {
            /**
             * Disable disables access logging for managed proxies if set to true.
             */
            disable: boolean;
            /**
             * Settings defines accesslog settings for managed proxies.
             * If unspecified, will send default format to stdout.
             */
            settings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsPatch[];
        }

        export interface EnvoyProxySpecTelemetryAccessLogSettings {
            format: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsFormat;
            /**
             * Matches defines the match conditions for accesslog in CEL expression.
             * An accesslog will be emitted only when one or more match conditions are evaluated to true.
             * Invalid [CEL](https://www.envoyproxy.io/docs/envoy/latest/xds/type/v3/cel.proto.html#common-expression-language-cel-proto) expressions will be ignored.
             */
            matches: string[];
            /**
             * Sinks defines the sinks of accesslog.
             */
            sinks: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinks[];
            /**
             * Type defines the component emitting the accesslog, such as Listener and Route.
             * If type not defined, the setting would apply to:
             * (1) All Routes.
             * (2) Listeners if and only if Envoy does not find a matching route for a request.
             * If type is defined, the accesslog settings would apply to the relevant component (as-is).
             */
            type: string;
        }

        /**
         * Format defines the format of accesslog.
         * This will be ignored if sink type is ALS.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsFormat {
            /**
             * JSON is additional attributes that describe the specific event occurrence.
             * Structured format for the envoy access logs. Envoy [command operators](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators)
             * can be used as values for fields within the Struct.
             * It's required when the format type is "JSON".
             */
            json: {[key: string]: string};
            /**
             * Text defines the text accesslog format, following Envoy accesslog formatting,
             * It's required when the format type is "Text".
             * Envoy [command operators](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators) may be used in the format.
             * The [format string documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#config-access-log-format-strings) provides more information.
             */
            text: string;
            /**
             * Type defines the type of accesslog format.
             */
            type: string;
        }

        /**
         * Format defines the format of accesslog.
         * This will be ignored if sink type is ALS.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsFormatPatch {
            /**
             * JSON is additional attributes that describe the specific event occurrence.
             * Structured format for the envoy access logs. Envoy [command operators](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators)
             * can be used as values for fields within the Struct.
             * It's required when the format type is "JSON".
             */
            json: {[key: string]: string};
            /**
             * Text defines the text accesslog format, following Envoy accesslog formatting,
             * It's required when the format type is "Text".
             * Envoy [command operators](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators) may be used in the format.
             * The [format string documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#config-access-log-format-strings) provides more information.
             */
            text: string;
            /**
             * Type defines the type of accesslog format.
             */
            type: string;
        }

        export interface EnvoyProxySpecTelemetryAccessLogSettingsPatch {
            format: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsFormatPatch;
            /**
             * Matches defines the match conditions for accesslog in CEL expression.
             * An accesslog will be emitted only when one or more match conditions are evaluated to true.
             * Invalid [CEL](https://www.envoyproxy.io/docs/envoy/latest/xds/type/v3/cel.proto.html#common-expression-language-cel-proto) expressions will be ignored.
             */
            matches: string[];
            /**
             * Sinks defines the sinks of accesslog.
             */
            sinks: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksPatch[];
            /**
             * Type defines the component emitting the accesslog, such as Listener and Route.
             * If type not defined, the setting would apply to:
             * (1) All Routes.
             * (2) Listeners if and only if Envoy does not find a matching route for a request.
             * If type is defined, the accesslog settings would apply to the relevant component (as-is).
             */
            type: string;
        }

        /**
         * ProxyAccessLogSink defines the sink of accesslog.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinks {
            als: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAls;
            file: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksFile;
            openTelemetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetry;
            /**
             * Type defines the type of accesslog sink.
             */
            type: string;
        }

        /**
         * ALS defines the gRPC Access Log Service (ALS) sink.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAls {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettings;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsHttp;
            /**
             * LogName defines the friendly name of the access log to be returned in
             * StreamAccessLogsMessage.Identifier. This allows the access log server
             * to differentiate between different access logs coming from the same Envoy.
             */
            logName: string;
            /**
             * Type defines the type of accesslog. Supported types are "HTTP" and "TCP".
             */
            type: string;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * HTTP defines additional configuration specific to HTTP access logs.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsHttp {
            /**
             * RequestHeaders defines request headers to include in log entries sent to the access log service.
             */
            requestHeaders: string[];
            /**
             * ResponseHeaders defines response headers to include in log entries sent to the access log service.
             */
            responseHeaders: string[];
            /**
             * ResponseTrailers defines response trailers to include in log entries sent to the access log service.
             */
            responseTrailers: string[];
        }

        /**
         * HTTP defines additional configuration specific to HTTP access logs.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsHttpPatch {
            /**
             * RequestHeaders defines request headers to include in log entries sent to the access log service.
             */
            requestHeaders: string[];
            /**
             * ResponseHeaders defines response headers to include in log entries sent to the access log service.
             */
            responseHeaders: string[];
            /**
             * ResponseTrailers defines response trailers to include in log entries sent to the access log service.
             */
            responseTrailers: string[];
        }

        /**
         * ALS defines the gRPC Access Log Service (ALS) sink.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsPatch {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsBackendSettingsPatch;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsHttpPatch;
            /**
             * LogName defines the friendly name of the access log to be returned in
             * StreamAccessLogsMessage.Identifier. This allows the access log server
             * to differentiate between different access logs coming from the same Envoy.
             */
            logName: string;
            /**
             * Type defines the type of accesslog. Supported types are "HTTP" and "TCP".
             */
            type: string;
        }

        /**
         * File defines the file accesslog sink.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksFile {
            /**
             * Path defines the file path used to expose envoy access log(e.g. /dev/stdout).
             */
            path: string;
        }

        /**
         * File defines the file accesslog sink.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksFilePatch {
            /**
             * Path defines the file path used to expose envoy access log(e.g. /dev/stdout).
             */
            path: string;
        }

        /**
         * OpenTelemetry defines the OpenTelemetry accesslog sink.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetry {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettings;
            /**
             * Host define the extension service hostname.
             * Deprecated: Use BackendRefs instead.
             */
            host: string;
            /**
             * Port defines the port the extension service is exposed on.
             * Deprecated: Use BackendRefs instead.
             */
            port: number;
            /**
             * Resources is a set of labels that describe the source of a log entry, including envoy node info.
             * It's recommended to follow [semantic conventions](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/).
             */
            resources: {[key: string]: string};
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * OpenTelemetry defines the OpenTelemetry accesslog sink.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryPatch {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryBackendSettingsPatch;
            /**
             * Host define the extension service hostname.
             * Deprecated: Use BackendRefs instead.
             */
            host: string;
            /**
             * Port defines the port the extension service is exposed on.
             * Deprecated: Use BackendRefs instead.
             */
            port: number;
            /**
             * Resources is a set of labels that describe the source of a log entry, including envoy node info.
             * It's recommended to follow [semantic conventions](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/).
             */
            resources: {[key: string]: string};
        }

        /**
         * ProxyAccessLogSink defines the sink of accesslog.
         */
        export interface EnvoyProxySpecTelemetryAccessLogSettingsSinksPatch {
            als: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksAlsPatch;
            file: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksFilePatch;
            openTelemetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogSettingsSinksOpenTelemetryPatch;
            /**
             * Type defines the type of accesslog sink.
             */
            type: string;
        }

        /**
         * Metrics defines metrics configuration for managed proxies.
         */
        export interface EnvoyProxySpecTelemetryMetrics {
            /**
             * ClusterStatName defines the value of cluster alt_stat_name, determining how cluster stats are named.
             * For more details, see envoy docs: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto.html
             * The supported operators for this pattern are:
             * %ROUTE_NAME%: name of Gateway API xRoute resource
             * %ROUTE_NAMESPACE%: namespace of Gateway API xRoute resource
             * %ROUTE_KIND%: kind of Gateway API xRoute resource
             * %ROUTE_RULE_NAME%: name of the Gateway API xRoute section
             * %ROUTE_RULE_NUMBER%: name of the Gateway API xRoute section
             * %BACKEND_REFS%: names of all backends referenced in <NAMESPACE>/<NAME>|<NAMESPACE>/<NAME>|... format
             * Only xDS Clusters created for HTTPRoute and GRPCRoute are currently supported.
             * Default: %ROUTE_KIND%/%ROUTE_NAMESPACE%/%ROUTE_NAME%/rule/%ROUTE_RULE_NUMBER%
             * Example: httproute/my-ns/my-route/rule/0
             */
            clusterStatName: string;
            /**
             * EnablePerEndpointStats enables per endpoint envoy stats metrics.
             * Please use with caution.
             */
            enablePerEndpointStats: boolean;
            /**
             * EnableRequestResponseSizesStats enables publishing of histograms tracking header and body sizes of requests and responses.
             */
            enableRequestResponseSizesStats: boolean;
            /**
             * EnableVirtualHostStats enables envoy stat metrics for virtual hosts.
             */
            enableVirtualHostStats: boolean;
            /**
             * Matches defines configuration for selecting specific metrics instead of generating all metrics stats
             * that are enabled by default. This helps reduce CPU and memory overhead in Envoy, but eliminating some stats
             * may after critical functionality. Here are the stats that we strongly recommend not disabling:
             * `cluster_manager.warming_clusters`, `cluster.<cluster_name>.membership_total`,`cluster.<cluster_name>.membership_healthy`,
             * `cluster.<cluster_name>.membership_degraded`，reference  https://github.com/envoyproxy/envoy/issues/9856,
             * https://github.com/envoyproxy/envoy/issues/14610
             */
            matches: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsMatches[];
            prometheus: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsPrometheus;
            /**
             * Sinks defines the metric sinks where metrics are sent to.
             */
            sinks: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinks[];
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface EnvoyProxySpecTelemetryMetricsMatches {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * StringMatch defines how to match any strings.
         * This is a general purpose match condition that can be used by other EG APIs
         * that need to match against a string.
         */
        export interface EnvoyProxySpecTelemetryMetricsMatchesPatch {
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * Metrics defines metrics configuration for managed proxies.
         */
        export interface EnvoyProxySpecTelemetryMetricsPatch {
            /**
             * ClusterStatName defines the value of cluster alt_stat_name, determining how cluster stats are named.
             * For more details, see envoy docs: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto.html
             * The supported operators for this pattern are:
             * %ROUTE_NAME%: name of Gateway API xRoute resource
             * %ROUTE_NAMESPACE%: namespace of Gateway API xRoute resource
             * %ROUTE_KIND%: kind of Gateway API xRoute resource
             * %ROUTE_RULE_NAME%: name of the Gateway API xRoute section
             * %ROUTE_RULE_NUMBER%: name of the Gateway API xRoute section
             * %BACKEND_REFS%: names of all backends referenced in <NAMESPACE>/<NAME>|<NAMESPACE>/<NAME>|... format
             * Only xDS Clusters created for HTTPRoute and GRPCRoute are currently supported.
             * Default: %ROUTE_KIND%/%ROUTE_NAMESPACE%/%ROUTE_NAME%/rule/%ROUTE_RULE_NUMBER%
             * Example: httproute/my-ns/my-route/rule/0
             */
            clusterStatName: string;
            /**
             * EnablePerEndpointStats enables per endpoint envoy stats metrics.
             * Please use with caution.
             */
            enablePerEndpointStats: boolean;
            /**
             * EnableRequestResponseSizesStats enables publishing of histograms tracking header and body sizes of requests and responses.
             */
            enableRequestResponseSizesStats: boolean;
            /**
             * EnableVirtualHostStats enables envoy stat metrics for virtual hosts.
             */
            enableVirtualHostStats: boolean;
            /**
             * Matches defines configuration for selecting specific metrics instead of generating all metrics stats
             * that are enabled by default. This helps reduce CPU and memory overhead in Envoy, but eliminating some stats
             * may after critical functionality. Here are the stats that we strongly recommend not disabling:
             * `cluster_manager.warming_clusters`, `cluster.<cluster_name>.membership_total`,`cluster.<cluster_name>.membership_healthy`,
             * `cluster.<cluster_name>.membership_degraded`，reference  https://github.com/envoyproxy/envoy/issues/9856,
             * https://github.com/envoyproxy/envoy/issues/14610
             */
            matches: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsMatchesPatch[];
            prometheus: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsPrometheusPatch;
            /**
             * Sinks defines the metric sinks where metrics are sent to.
             */
            sinks: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksPatch[];
        }

        /**
         * Prometheus defines the configuration for Admin endpoint `/stats/prometheus`.
         */
        export interface EnvoyProxySpecTelemetryMetricsPrometheus {
            compression: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsPrometheusCompression;
            /**
             * Disable the Prometheus endpoint.
             */
            disable: boolean;
        }

        /**
         * Configure the compression on Prometheus endpoint. Compression is useful in situations when bandwidth is scarce and large payloads can be effectively compressed at the expense of higher CPU load.
         */
        export interface EnvoyProxySpecTelemetryMetricsPrometheusCompression {
            /**
             * The configuration for Brotli compressor.
             */
            brotli: {[key: string]: string};
            /**
             * The configuration for GZIP compressor.
             */
            gzip: {[key: string]: string};
            /**
             * CompressorType defines the compressor type to use for compression.
             */
            type: string;
        }

        /**
         * Configure the compression on Prometheus endpoint. Compression is useful in situations when bandwidth is scarce and large payloads can be effectively compressed at the expense of higher CPU load.
         */
        export interface EnvoyProxySpecTelemetryMetricsPrometheusCompressionPatch {
            /**
             * The configuration for Brotli compressor.
             */
            brotli: {[key: string]: string};
            /**
             * The configuration for GZIP compressor.
             */
            gzip: {[key: string]: string};
            /**
             * CompressorType defines the compressor type to use for compression.
             */
            type: string;
        }

        /**
         * Prometheus defines the configuration for Admin endpoint `/stats/prometheus`.
         */
        export interface EnvoyProxySpecTelemetryMetricsPrometheusPatch {
            compression: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsPrometheusCompressionPatch;
            /**
             * Disable the Prometheus endpoint.
             */
            disable: boolean;
        }

        /**
         * ProxyMetricSink defines the sink of metrics.
         * Default metrics sink is OpenTelemetry.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinks {
            openTelemetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetry;
            /**
             * Type defines the metric sink type.
             * EG currently only supports OpenTelemetry.
             */
            type: string;
        }

        /**
         * OpenTelemetry defines the configuration for OpenTelemetry sink.
         * It's required if the sink type is OpenTelemetry.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetry {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettings;
            /**
             * Host define the service hostname.
             * Deprecated: Use BackendRefs instead.
             */
            host: string;
            /**
             * Port defines the port the service is exposed on.
             * Deprecated: Use BackendRefs instead.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * OpenTelemetry defines the configuration for OpenTelemetry sink.
         * It's required if the sink type is OpenTelemetry.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryPatch {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryBackendSettingsPatch;
            /**
             * Host define the service hostname.
             * Deprecated: Use BackendRefs instead.
             */
            host: string;
            /**
             * Port defines the port the service is exposed on.
             * Deprecated: Use BackendRefs instead.
             */
            port: number;
        }

        /**
         * ProxyMetricSink defines the sink of metrics.
         * Default metrics sink is OpenTelemetry.
         */
        export interface EnvoyProxySpecTelemetryMetricsSinksPatch {
            openTelemetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsSinksOpenTelemetryPatch;
            /**
             * Type defines the metric sink type.
             * EG currently only supports OpenTelemetry.
             */
            type: string;
        }

        /**
         * Telemetry defines telemetry parameters for managed proxies.
         */
        export interface EnvoyProxySpecTelemetryPatch {
            accessLog: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryAccessLogPatch;
            metrics: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryMetricsPatch;
            tracing: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingPatch;
        }

        /**
         * Tracing defines tracing configuration for managed proxies.
         * If unspecified, will not send tracing data.
         */
        export interface EnvoyProxySpecTelemetryTracing {
            /**
             * CustomTags defines the custom tags to add to each span.
             * If provider is kubernetes, pod name and namespace are added by default.
             */
            customTags: {[key: string]: {[key: string]: string}};
            provider: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProvider;
            samplingFraction: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingSamplingFraction;
            /**
             * SamplingRate controls the rate at which traffic will be
             * selected for tracing if no prior sampling decision has been made.
             * Defaults to 100, valid values [0-100]. 100 indicates 100% sampling.
             *
             * Only one of SamplingRate or SamplingFraction may be specified.
             * If neither field is specified, all requests will be sampled.
             */
            samplingRate: number;
        }

        /**
         * Tracing defines tracing configuration for managed proxies.
         * If unspecified, will not send tracing data.
         */
        export interface EnvoyProxySpecTelemetryTracingPatch {
            /**
             * CustomTags defines the custom tags to add to each span.
             * If provider is kubernetes, pod name and namespace are added by default.
             */
            customTags: {[key: string]: {[key: string]: string}};
            provider: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderPatch;
            samplingFraction: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingSamplingFractionPatch;
            /**
             * SamplingRate controls the rate at which traffic will be
             * selected for tracing if no prior sampling decision has been made.
             * Defaults to 100, valid values [0-100]. 100 indicates 100% sampling.
             *
             * Only one of SamplingRate or SamplingFraction may be specified.
             * If neither field is specified, all requests will be sampled.
             */
            samplingRate: number;
        }

        /**
         * Provider defines the tracing provider.
         */
        export interface EnvoyProxySpecTelemetryTracingProvider {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettings;
            /**
             * Host define the provider service hostname.
             * Deprecated: Use BackendRefs instead.
             */
            host: string;
            /**
             * Port defines the port the provider service is exposed on.
             * Deprecated: Use BackendRefs instead.
             */
            port: number;
            /**
             * ServiceName defines the service name to use in tracing configuration.
             * If not set, Envoy Gateway will use a default service name set as
             * "name.namespace" (e.g., "my-gateway.default").
             * Note: This field is only supported for OpenTelemetry and Datadog tracing providers.
             * For Zipkin, the service name in traces is always derived from the Envoy --service-cluster flag
             * (typically "namespace/name" format). Setting this field has no effect for Zipkin.
             */
            serviceName: string;
            /**
             * Type defines the tracing provider type.
             */
            type: string;
            zipkin: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderZipkin;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Provider defines the tracing provider.
         */
        export interface EnvoyProxySpecTelemetryTracingProviderPatch {
            backendRef: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderBackendSettingsPatch;
            /**
             * Host define the provider service hostname.
             * Deprecated: Use BackendRefs instead.
             */
            host: string;
            /**
             * Port defines the port the provider service is exposed on.
             * Deprecated: Use BackendRefs instead.
             */
            port: number;
            /**
             * ServiceName defines the service name to use in tracing configuration.
             * If not set, Envoy Gateway will use a default service name set as
             * "name.namespace" (e.g., "my-gateway.default").
             * Note: This field is only supported for OpenTelemetry and Datadog tracing providers.
             * For Zipkin, the service name in traces is always derived from the Envoy --service-cluster flag
             * (typically "namespace/name" format). Setting this field has no effect for Zipkin.
             */
            serviceName: string;
            /**
             * Type defines the tracing provider type.
             */
            type: string;
            zipkin: outputs.gateway.v1alpha1.EnvoyProxySpecTelemetryTracingProviderZipkinPatch;
        }

        /**
         * Zipkin defines the Zipkin tracing provider configuration
         */
        export interface EnvoyProxySpecTelemetryTracingProviderZipkin {
            /**
             * DisableSharedSpanContext determines whether the default Envoy behaviour of
             * client and server spans sharing the same span context should be disabled.
             */
            disableSharedSpanContext: boolean;
            /**
             * Enable128BitTraceID determines whether a 128bit trace id will be used
             * when creating a new trace instance. If set to false, a 64bit trace
             * id will be used.
             */
            enable128BitTraceId: boolean;
        }

        /**
         * Zipkin defines the Zipkin tracing provider configuration
         */
        export interface EnvoyProxySpecTelemetryTracingProviderZipkinPatch {
            /**
             * DisableSharedSpanContext determines whether the default Envoy behaviour of
             * client and server spans sharing the same span context should be disabled.
             */
            disableSharedSpanContext: boolean;
            /**
             * Enable128BitTraceID determines whether a 128bit trace id will be used
             * when creating a new trace instance. If set to false, a 64bit trace
             * id will be used.
             */
            enable128BitTraceId: boolean;
        }

        /**
         * SamplingFraction represents the fraction of requests that should be
         * selected for tracing if no prior sampling decision has been made.
         *
         * Only one of SamplingRate or SamplingFraction may be specified.
         * If neither field is specified, all requests will be sampled.
         */
        export interface EnvoyProxySpecTelemetryTracingSamplingFraction {
            denominator: number;
            numerator: number;
        }

        /**
         * SamplingFraction represents the fraction of requests that should be
         * selected for tracing if no prior sampling decision has been made.
         *
         * Only one of SamplingRate or SamplingFraction may be specified.
         * If neither field is specified, all requests will be sampled.
         */
        export interface EnvoyProxySpecTelemetryTracingSamplingFractionPatch {
            denominator: number;
            numerator: number;
        }

        /**
         * HTTPRouteFilter is a custom Envoy Gateway HTTPRouteFilter which provides extended
         * traffic processing options such as path regex rewrite, direct response and more.
         */
        export interface HTTPRouteFilter {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "HTTPRouteFilter";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.HTTPRouteFilterSpec;
        }

        /**
         * Spec defines the desired state of HTTPRouteFilter.
         */
        export interface HTTPRouteFilterSpec {
            credentialInjection: outputs.gateway.v1alpha1.HTTPRouteFilterSpecCredentialInjection;
            directResponse: outputs.gateway.v1alpha1.HTTPRouteFilterSpecDirectResponse;
            urlRewrite: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewrite;
        }

        /**
         * HTTPCredentialInjectionFilter defines the configuration to inject credentials into the request.
         * This is useful when the backend service requires credentials in the request, and the original
         * request does not contain them. The filter can inject credentials into the request before forwarding
         * it to the backend service.
         */
        export interface HTTPRouteFilterSpecCredentialInjection {
            credential: outputs.gateway.v1alpha1.HTTPRouteFilterSpecCredentialInjectionCredential;
            /**
             * Header is the name of the header where the credentials are injected.
             * If not specified, the credentials are injected into the Authorization header.
             */
            header: string;
            /**
             * Whether to overwrite the value or not if the injected headers already exist.
             * If not specified, the default value is false.
             */
            overwrite: boolean;
        }

        /**
         * Credential is the credential to be injected.
         */
        export interface HTTPRouteFilterSpecCredentialInjectionCredential {
            valueRef: outputs.gateway.v1alpha1.HTTPRouteFilterSpecCredentialInjectionCredentialValueRef;
        }

        /**
         * Credential is the credential to be injected.
         */
        export interface HTTPRouteFilterSpecCredentialInjectionCredentialPatch {
            valueRef: outputs.gateway.v1alpha1.HTTPRouteFilterSpecCredentialInjectionCredentialValueRefPatch;
        }

        /**
         * ValueRef is a reference to the secret containing the credentials to be injected.
         * This is an Opaque secret. The credential should be stored in the key
         * "credential", and the value should be the credential to be injected.
         * For example, for basic authentication, the value should be "Basic <base64 encoded username:password>".
         * for bearer token, the value should be "Bearer <token>".
         * Note: The secret must be in the same namespace as the HTTPRouteFilter.
         */
        export interface HTTPRouteFilterSpecCredentialInjectionCredentialValueRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * ValueRef is a reference to the secret containing the credentials to be injected.
         * This is an Opaque secret. The credential should be stored in the key
         * "credential", and the value should be the credential to be injected.
         * For example, for basic authentication, the value should be "Basic <base64 encoded username:password>".
         * for bearer token, the value should be "Bearer <token>".
         * Note: The secret must be in the same namespace as the HTTPRouteFilter.
         */
        export interface HTTPRouteFilterSpecCredentialInjectionCredentialValueRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * HTTPCredentialInjectionFilter defines the configuration to inject credentials into the request.
         * This is useful when the backend service requires credentials in the request, and the original
         * request does not contain them. The filter can inject credentials into the request before forwarding
         * it to the backend service.
         */
        export interface HTTPRouteFilterSpecCredentialInjectionPatch {
            credential: outputs.gateway.v1alpha1.HTTPRouteFilterSpecCredentialInjectionCredentialPatch;
            /**
             * Header is the name of the header where the credentials are injected.
             * If not specified, the credentials are injected into the Authorization header.
             */
            header: string;
            /**
             * Whether to overwrite the value or not if the injected headers already exist.
             * If not specified, the default value is false.
             */
            overwrite: boolean;
        }

        /**
         * HTTPDirectResponseFilter defines the configuration to return a fixed response.
         */
        export interface HTTPRouteFilterSpecDirectResponse {
            body: outputs.gateway.v1alpha1.HTTPRouteFilterSpecDirectResponseBody;
            /**
             * Content Type of the response. This will be set in the Content-Type header.
             */
            contentType: string;
            /**
             * Status Code of the HTTP response
             * If unset, defaults to 200.
             */
            statusCode: number;
        }

        /**
         * Body of the Response
         */
        export interface HTTPRouteFilterSpecDirectResponseBody {
            /**
             * Inline contains the value as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the body value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.HTTPRouteFilterSpecDirectResponseBodyValueRef;
        }

        /**
         * Body of the Response
         */
        export interface HTTPRouteFilterSpecDirectResponseBodyPatch {
            /**
             * Inline contains the value as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the body value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.HTTPRouteFilterSpecDirectResponseBodyValueRefPatch;
        }

        /**
         * ValueRef contains the contents of the body
         * specified as a local object reference.
         * Only a reference to ConfigMap is supported.
         *
         * The value of key `response.body` in the ConfigMap will be used as the response body.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface HTTPRouteFilterSpecDirectResponseBodyValueRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ValueRef contains the contents of the body
         * specified as a local object reference.
         * Only a reference to ConfigMap is supported.
         *
         * The value of key `response.body` in the ConfigMap will be used as the response body.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface HTTPRouteFilterSpecDirectResponseBodyValueRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * HTTPDirectResponseFilter defines the configuration to return a fixed response.
         */
        export interface HTTPRouteFilterSpecDirectResponsePatch {
            body: outputs.gateway.v1alpha1.HTTPRouteFilterSpecDirectResponseBodyPatch;
            /**
             * Content Type of the response. This will be set in the Content-Type header.
             */
            contentType: string;
            /**
             * Status Code of the HTTP response
             * If unset, defaults to 200.
             */
            statusCode: number;
        }

        /**
         * Spec defines the desired state of HTTPRouteFilter.
         */
        export interface HTTPRouteFilterSpecPatch {
            credentialInjection: outputs.gateway.v1alpha1.HTTPRouteFilterSpecCredentialInjectionPatch;
            directResponse: outputs.gateway.v1alpha1.HTTPRouteFilterSpecDirectResponsePatch;
            urlRewrite: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewritePatch;
        }

        /**
         * HTTPURLRewriteFilter define rewrites of HTTP URL components such as path and host
         */
        export interface HTTPRouteFilterSpecUrlRewrite {
            hostname: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewriteHostname;
            path: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewritePath;
        }

        /**
         * Hostname is the value to be used to replace the Host header value during
         * forwarding.
         */
        export interface HTTPRouteFilterSpecUrlRewriteHostname {
            /**
             * Header is the name of the header whose value would be used to rewrite the Host header
             */
            header: string;
            /**
             * HTTPPathModifierType defines the type of Hostname rewrite.
             */
            type: string;
        }

        /**
         * Hostname is the value to be used to replace the Host header value during
         * forwarding.
         */
        export interface HTTPRouteFilterSpecUrlRewriteHostnamePatch {
            /**
             * Header is the name of the header whose value would be used to rewrite the Host header
             */
            header: string;
            /**
             * HTTPPathModifierType defines the type of Hostname rewrite.
             */
            type: string;
        }

        /**
         * HTTPURLRewriteFilter define rewrites of HTTP URL components such as path and host
         */
        export interface HTTPRouteFilterSpecUrlRewritePatch {
            hostname: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewriteHostnamePatch;
            path: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewritePathPatch;
        }

        /**
         * Path defines a path rewrite.
         */
        export interface HTTPRouteFilterSpecUrlRewritePath {
            replaceRegexMatch: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewritePathReplaceRegexMatch;
            /**
             * HTTPPathModifierType defines the type of path redirect or rewrite.
             */
            type: string;
        }

        /**
         * Path defines a path rewrite.
         */
        export interface HTTPRouteFilterSpecUrlRewritePathPatch {
            replaceRegexMatch: outputs.gateway.v1alpha1.HTTPRouteFilterSpecUrlRewritePathReplaceRegexMatchPatch;
            /**
             * HTTPPathModifierType defines the type of path redirect or rewrite.
             */
            type: string;
        }

        /**
         * ReplaceRegexMatch defines a path regex rewrite. The path portions matched by the regex pattern are replaced by the defined substitution.
         * https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite
         * Some examples:
         * (1) replaceRegexMatch:
         *       pattern: ^/service/([^/]+)(/.*)$
         *       substitution: \2/instance/\1
         *     Would transform /service/foo/v1/api into /v1/api/instance/foo.
         * (2) replaceRegexMatch:
         *       pattern: one
         *       substitution: two
         *     Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/two/zzz.
         * (3) replaceRegexMatch:
         *       pattern: ^(.*?)one(.*)$
         *       substitution: \1two\2
         *     Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/one/zzz.
         * (3) replaceRegexMatch:
         *       pattern: (?i)/xxx/
         *       substitution: /yyy/
         *     Would transform path /aaa/XxX/bbb into /aaa/yyy/bbb (case-insensitive).
         */
        export interface HTTPRouteFilterSpecUrlRewritePathReplaceRegexMatch {
            /**
             * Pattern matches a regular expression against the value of the HTTP Path.The regex string must
             * adhere to the syntax documented in https://github.com/google/re2/wiki/Syntax.
             */
            pattern: string;
            /**
             * Substitution is an expression that replaces the matched portion.The expression may include numbered
             * capture groups that adhere to syntax documented in https://github.com/google/re2/wiki/Syntax.
             */
            substitution: string;
        }

        /**
         * ReplaceRegexMatch defines a path regex rewrite. The path portions matched by the regex pattern are replaced by the defined substitution.
         * https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite
         * Some examples:
         * (1) replaceRegexMatch:
         *       pattern: ^/service/([^/]+)(/.*)$
         *       substitution: \2/instance/\1
         *     Would transform /service/foo/v1/api into /v1/api/instance/foo.
         * (2) replaceRegexMatch:
         *       pattern: one
         *       substitution: two
         *     Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/two/zzz.
         * (3) replaceRegexMatch:
         *       pattern: ^(.*?)one(.*)$
         *       substitution: \1two\2
         *     Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/one/zzz.
         * (3) replaceRegexMatch:
         *       pattern: (?i)/xxx/
         *       substitution: /yyy/
         *     Would transform path /aaa/XxX/bbb into /aaa/yyy/bbb (case-insensitive).
         */
        export interface HTTPRouteFilterSpecUrlRewritePathReplaceRegexMatchPatch {
            /**
             * Pattern matches a regular expression against the value of the HTTP Path.The regex string must
             * adhere to the syntax documented in https://github.com/google/re2/wiki/Syntax.
             */
            pattern: string;
            /**
             * Substitution is an expression that replaces the matched portion.The expression may include numbered
             * capture groups that adhere to syntax documented in https://github.com/google/re2/wiki/Syntax.
             */
            substitution: string;
        }

        /**
         * SecurityPolicy allows the user to configure various security settings for a
         * Gateway.
         */
        export interface SecurityPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.envoyproxy.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "SecurityPolicy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1alpha1.SecurityPolicySpec;
            status: outputs.gateway.v1alpha1.SecurityPolicyStatus;
        }

        /**
         * Spec defines the desired state of SecurityPolicy.
         */
        export interface SecurityPolicySpec {
            apiKeyAuth: outputs.gateway.v1alpha1.SecurityPolicySpecApiKeyAuth;
            authorization: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorization;
            basicAuth: outputs.gateway.v1alpha1.SecurityPolicySpecBasicAuth;
            cors: outputs.gateway.v1alpha1.SecurityPolicySpecCors;
            extAuth: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuth;
            jwt: outputs.gateway.v1alpha1.SecurityPolicySpecJwt;
            oidc: outputs.gateway.v1alpha1.SecurityPolicySpecOidc;
            targetRef: outputs.gateway.v1alpha1.SecurityPolicySpecTargetRef;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.SecurityPolicySpecTargetRefs[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.SecurityPolicySpecTargetSelectors[];
        }

        /**
         * APIKeyAuth defines the configuration for the API Key Authentication.
         */
        export interface SecurityPolicySpecApiKeyAuth {
            /**
             * CredentialRefs is the Kubernetes secret which contains the API keys.
             * This is an Opaque secret.
             * Each API key is stored in the key representing the client id.
             * If the secrets have a key for a duplicated client, the first one will be used.
             */
            credentialRefs: outputs.gateway.v1alpha1.SecurityPolicySpecApiKeyAuthCredentialRefs[];
            /**
             * ExtractFrom is where to fetch the key from the coming request.
             * The value from the first source that has a key will be used.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecApiKeyAuthExtractFrom[];
            /**
             * ForwardClientIDHeader is the name of the header to forward the client identity to the backend
             * service. The header will be added to the request with the client id as the value.
             */
            forwardClientIDHeader: string;
            /**
             * Sanitize indicates whether to remove the API key from the request before forwarding it to the backend service.
             */
            sanitize: boolean;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface SecurityPolicySpecApiKeyAuthCredentialRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface SecurityPolicySpecApiKeyAuthCredentialRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * ExtractFrom is where to fetch the key from the coming request.
         * Only one of header, param or cookie is supposed to be specified.
         */
        export interface SecurityPolicySpecApiKeyAuthExtractFrom {
            /**
             * Cookies is the names of the cookie to fetch the key from.
             * If multiple cookies are specified, envoy will look for the api key in the order of the list.
             * This field is optional, but only one of headers, params or cookies is supposed to be specified.
             */
            cookies: string[];
            /**
             * Headers is the names of the header to fetch the key from.
             * If multiple headers are specified, envoy will look for the api key in the order of the list.
             * This field is optional, but only one of headers, params or cookies is supposed to be specified.
             */
            headers: string[];
            /**
             * Params is the names of the query parameter to fetch the key from.
             * If multiple params are specified, envoy will look for the api key in the order of the list.
             * This field is optional, but only one of headers, params or cookies is supposed to be specified.
             */
            params: string[];
        }

        /**
         * ExtractFrom is where to fetch the key from the coming request.
         * Only one of header, param or cookie is supposed to be specified.
         */
        export interface SecurityPolicySpecApiKeyAuthExtractFromPatch {
            /**
             * Cookies is the names of the cookie to fetch the key from.
             * If multiple cookies are specified, envoy will look for the api key in the order of the list.
             * This field is optional, but only one of headers, params or cookies is supposed to be specified.
             */
            cookies: string[];
            /**
             * Headers is the names of the header to fetch the key from.
             * If multiple headers are specified, envoy will look for the api key in the order of the list.
             * This field is optional, but only one of headers, params or cookies is supposed to be specified.
             */
            headers: string[];
            /**
             * Params is the names of the query parameter to fetch the key from.
             * If multiple params are specified, envoy will look for the api key in the order of the list.
             * This field is optional, but only one of headers, params or cookies is supposed to be specified.
             */
            params: string[];
        }

        /**
         * APIKeyAuth defines the configuration for the API Key Authentication.
         */
        export interface SecurityPolicySpecApiKeyAuthPatch {
            /**
             * CredentialRefs is the Kubernetes secret which contains the API keys.
             * This is an Opaque secret.
             * Each API key is stored in the key representing the client id.
             * If the secrets have a key for a duplicated client, the first one will be used.
             */
            credentialRefs: outputs.gateway.v1alpha1.SecurityPolicySpecApiKeyAuthCredentialRefsPatch[];
            /**
             * ExtractFrom is where to fetch the key from the coming request.
             * The value from the first source that has a key will be used.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecApiKeyAuthExtractFromPatch[];
            /**
             * ForwardClientIDHeader is the name of the header to forward the client identity to the backend
             * service. The header will be added to the request with the client id as the value.
             */
            forwardClientIDHeader: string;
            /**
             * Sanitize indicates whether to remove the API key from the request before forwarding it to the backend service.
             */
            sanitize: boolean;
        }

        /**
         * Authorization defines the authorization configuration.
         */
        export interface SecurityPolicySpecAuthorization {
            /**
             * DefaultAction defines the default action to be taken if no rules match.
             * If not specified, the default action is Deny.
             */
            defaultAction: string;
            /**
             * Rules defines a list of authorization rules.
             * These rules are evaluated in order, the first matching rule will be applied,
             * and the rest will be skipped.
             *
             * For example, if there are two rules: the first rule allows the request
             * and the second rule denies it, when a request matches both rules, it will be allowed.
             */
            rules: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRules[];
        }

        /**
         * Authorization defines the authorization configuration.
         */
        export interface SecurityPolicySpecAuthorizationPatch {
            /**
             * DefaultAction defines the default action to be taken if no rules match.
             * If not specified, the default action is Deny.
             */
            defaultAction: string;
            /**
             * Rules defines a list of authorization rules.
             * These rules are evaluated in order, the first matching rule will be applied,
             * and the rest will be skipped.
             *
             * For example, if there are two rules: the first rule allows the request
             * and the second rule denies it, when a request matches both rules, it will be allowed.
             */
            rules: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPatch[];
        }

        /**
         * AuthorizationRule defines a single authorization rule.
         */
        export interface SecurityPolicySpecAuthorizationRules {
            /**
             * Action defines the action to be taken if the rule matches.
             */
            action: string;
            /**
             * Name is a user-friendly name for the rule.
             * If not specified, Envoy Gateway will generate a unique name for the rule.
             */
            name: string;
            operation: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesOperation;
            principal: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipal;
        }

        /**
         * Operation specifies the operation of a request, such as HTTP methods.
         * If not specified, all operations are matched on.
         */
        export interface SecurityPolicySpecAuthorizationRulesOperation {
            /**
             * Methods are the HTTP methods of the request.
             * If multiple methods are specified, all specified methods are allowed or denied, based on the action of the rule.
             */
            methods: string[];
        }

        /**
         * Operation specifies the operation of a request, such as HTTP methods.
         * If not specified, all operations are matched on.
         */
        export interface SecurityPolicySpecAuthorizationRulesOperationPatch {
            /**
             * Methods are the HTTP methods of the request.
             * If multiple methods are specified, all specified methods are allowed or denied, based on the action of the rule.
             */
            methods: string[];
        }

        /**
         * AuthorizationRule defines a single authorization rule.
         */
        export interface SecurityPolicySpecAuthorizationRulesPatch {
            /**
             * Action defines the action to be taken if the rule matches.
             */
            action: string;
            /**
             * Name is a user-friendly name for the rule.
             * If not specified, Envoy Gateway will generate a unique name for the rule.
             */
            name: string;
            operation: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesOperationPatch;
            principal: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalPatch;
        }

        /**
         * Principal specifies the client identity of a request.
         * If there are multiple principal types, all principals must match for the rule to match.
         * For example, if there are two principals: one for client IP and one for JWT claim,
         * the rule will match only if both the client IP and the JWT claim match.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipal {
            /**
             * ClientCIDRs are the IP CIDR ranges of the client.
             * Valid examples are "192.168.1.0/24" or "2001:db8::/64"
             *
             * If multiple CIDR ranges are specified, one of the CIDR ranges must match
             * the client IP for the rule to match.
             *
             * The client IP is inferred from the X-Forwarded-For header, a custom header,
             * or the proxy protocol.
             * You can use the `ClientIPDetection` or the `ProxyProtocol` field in
             * the `ClientTrafficPolicy` to configure how the client IP is detected.
             */
            clientCIDRs: string[];
            /**
             * Headers authorize the request based on user identity extracted from custom headers.
             * If multiple headers are specified, all headers must match for the rule to match.
             */
            headers: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalHeaders[];
            jwt: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalJwt;
        }

        /**
         * AuthorizationHeaderMatch specifies how to match against the value of an HTTP header within a authorization rule.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalHeaders {
            /**
             * Name of the HTTP header.
             * The header name is case-insensitive unless PreserveHeaderCase is set to true.
             * For example, "Foo" and "foo" are considered the same header.
             */
            name: string;
            /**
             * Values are the values that the header must match.
             * If multiple values are specified, the rule will match if any of the values match.
             */
            values: string[];
        }

        /**
         * AuthorizationHeaderMatch specifies how to match against the value of an HTTP header within a authorization rule.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalHeadersPatch {
            /**
             * Name of the HTTP header.
             * The header name is case-insensitive unless PreserveHeaderCase is set to true.
             * For example, "Foo" and "foo" are considered the same header.
             */
            name: string;
            /**
             * Values are the values that the header must match.
             * If multiple values are specified, the rule will match if any of the values match.
             */
            values: string[];
        }

        /**
         * JWT authorize the request based on the JWT claims and scopes.
         * Note: in order to use JWT claims for authorization, you must configure the
         * JWT authentication in the same `SecurityPolicy`.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalJwt {
            /**
             * Claims are the claims in a JWT token.
             *
             * If multiple claims are specified, all claims must match for the rule to match.
             * For example, if there are two claims: one for the audience and one for the issuer,
             * the rule will match only if both the audience and the issuer match.
             */
            claims: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalJwtClaims[];
            /**
             * Provider is the name of the JWT provider that used to verify the JWT token.
             * In order to use JWT claims for authorization, you must configure the JWT
             * authentication with the same provider in the same `SecurityPolicy`.
             */
            provider: string;
            /**
             * Scopes are a special type of claim in a JWT token that represents the permissions of the client.
             *
             * The value of the scopes field should be a space delimited string that is expected in the scope parameter,
             * as defined in RFC 6749: https://datatracker.ietf.org/doc/html/rfc6749#page-23.
             *
             * If multiple scopes are specified, all scopes must match for the rule to match.
             */
            scopes: string[];
        }

        /**
         * JWTClaim specifies a claim in a JWT token.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalJwtClaims {
            /**
             * Name is the name of the claim.
             * If it is a nested claim, use a dot (.) separated string as the name to
             * represent the full path to the claim.
             * For example, if the claim is in the "department" field in the "organization" field,
             * the name should be "organization.department".
             */
            name: string;
            /**
             * ValueType is the type of the claim value.
             * Only String and StringArray types are supported for now.
             */
            valueType: string;
            /**
             * Values are the values that the claim must match.
             * If the claim is a string type, the specified value must match exactly.
             * If the claim is a string array type, the specified value must match one of the values in the array.
             * If multiple values are specified, one of the values must match for the rule to match.
             */
            values: string[];
        }

        /**
         * JWTClaim specifies a claim in a JWT token.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalJwtClaimsPatch {
            /**
             * Name is the name of the claim.
             * If it is a nested claim, use a dot (.) separated string as the name to
             * represent the full path to the claim.
             * For example, if the claim is in the "department" field in the "organization" field,
             * the name should be "organization.department".
             */
            name: string;
            /**
             * ValueType is the type of the claim value.
             * Only String and StringArray types are supported for now.
             */
            valueType: string;
            /**
             * Values are the values that the claim must match.
             * If the claim is a string type, the specified value must match exactly.
             * If the claim is a string array type, the specified value must match one of the values in the array.
             * If multiple values are specified, one of the values must match for the rule to match.
             */
            values: string[];
        }

        /**
         * JWT authorize the request based on the JWT claims and scopes.
         * Note: in order to use JWT claims for authorization, you must configure the
         * JWT authentication in the same `SecurityPolicy`.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalJwtPatch {
            /**
             * Claims are the claims in a JWT token.
             *
             * If multiple claims are specified, all claims must match for the rule to match.
             * For example, if there are two claims: one for the audience and one for the issuer,
             * the rule will match only if both the audience and the issuer match.
             */
            claims: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalJwtClaimsPatch[];
            /**
             * Provider is the name of the JWT provider that used to verify the JWT token.
             * In order to use JWT claims for authorization, you must configure the JWT
             * authentication with the same provider in the same `SecurityPolicy`.
             */
            provider: string;
            /**
             * Scopes are a special type of claim in a JWT token that represents the permissions of the client.
             *
             * The value of the scopes field should be a space delimited string that is expected in the scope parameter,
             * as defined in RFC 6749: https://datatracker.ietf.org/doc/html/rfc6749#page-23.
             *
             * If multiple scopes are specified, all scopes must match for the rule to match.
             */
            scopes: string[];
        }

        /**
         * Principal specifies the client identity of a request.
         * If there are multiple principal types, all principals must match for the rule to match.
         * For example, if there are two principals: one for client IP and one for JWT claim,
         * the rule will match only if both the client IP and the JWT claim match.
         */
        export interface SecurityPolicySpecAuthorizationRulesPrincipalPatch {
            /**
             * ClientCIDRs are the IP CIDR ranges of the client.
             * Valid examples are "192.168.1.0/24" or "2001:db8::/64"
             *
             * If multiple CIDR ranges are specified, one of the CIDR ranges must match
             * the client IP for the rule to match.
             *
             * The client IP is inferred from the X-Forwarded-For header, a custom header,
             * or the proxy protocol.
             * You can use the `ClientIPDetection` or the `ProxyProtocol` field in
             * the `ClientTrafficPolicy` to configure how the client IP is detected.
             */
            clientCIDRs: string[];
            /**
             * Headers authorize the request based on user identity extracted from custom headers.
             * If multiple headers are specified, all headers must match for the rule to match.
             */
            headers: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalHeadersPatch[];
            jwt: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationRulesPrincipalJwtPatch;
        }

        /**
         * BasicAuth defines the configuration for the HTTP Basic Authentication.
         */
        export interface SecurityPolicySpecBasicAuth {
            /**
             * This field specifies the header name to forward a successfully authenticated user to
             * the backend. The header will be added to the request with the username as the value.
             *
             * If it is not specified, the username will not be forwarded.
             */
            forwardUsernameHeader: string;
            users: outputs.gateway.v1alpha1.SecurityPolicySpecBasicAuthUsers;
        }

        /**
         * BasicAuth defines the configuration for the HTTP Basic Authentication.
         */
        export interface SecurityPolicySpecBasicAuthPatch {
            /**
             * This field specifies the header name to forward a successfully authenticated user to
             * the backend. The header will be added to the request with the username as the value.
             *
             * If it is not specified, the username will not be forwarded.
             */
            forwardUsernameHeader: string;
            users: outputs.gateway.v1alpha1.SecurityPolicySpecBasicAuthUsersPatch;
        }

        /**
         * The Kubernetes secret which contains the username-password pairs in
         * htpasswd format, used to verify user credentials in the "Authorization"
         * header.
         *
         * This is an Opaque secret. The username-password pairs should be stored in
         * the key ".htpasswd". As the key name indicates, the value needs to be the
         * htpasswd format, for example: "user1:{SHA}hashed_user1_password".
         * Right now, only SHA hash algorithm is supported.
         * Reference to https://httpd.apache.org/docs/2.4/programs/htpasswd.html
         * for more details.
         *
         * Note: The secret must be in the same namespace as the SecurityPolicy.
         */
        export interface SecurityPolicySpecBasicAuthUsers {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * The Kubernetes secret which contains the username-password pairs in
         * htpasswd format, used to verify user credentials in the "Authorization"
         * header.
         *
         * This is an Opaque secret. The username-password pairs should be stored in
         * the key ".htpasswd". As the key name indicates, the value needs to be the
         * htpasswd format, for example: "user1:{SHA}hashed_user1_password".
         * Right now, only SHA hash algorithm is supported.
         * Reference to https://httpd.apache.org/docs/2.4/programs/htpasswd.html
         * for more details.
         *
         * Note: The secret must be in the same namespace as the SecurityPolicy.
         */
        export interface SecurityPolicySpecBasicAuthUsersPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * CORS defines the configuration for Cross-Origin Resource Sharing (CORS).
         */
        export interface SecurityPolicySpecCors {
            /**
             * AllowCredentials indicates whether a request can include user credentials
             * like cookies, authentication headers, or TLS client certificates.
             * It specifies the value in the Access-Control-Allow-Credentials CORS response header.
             */
            allowCredentials: boolean;
            /**
             * AllowHeaders defines the headers that are allowed to be sent with requests.
             * It specifies the allowed headers in the Access-Control-Allow-Headers CORS response header..
             * The value "*" allows any header to be sent.
             */
            allowHeaders: string[];
            /**
             * AllowMethods defines the methods that are allowed to make requests.
             * It specifies the allowed methods in the Access-Control-Allow-Methods CORS response header..
             * The value "*" allows any method to be used.
             */
            allowMethods: string[];
            /**
             * AllowOrigins defines the origins that are allowed to make requests.
             * It specifies the allowed origins in the Access-Control-Allow-Origin CORS response header.
             * The value "*" allows any origin to make requests.
             */
            allowOrigins: string[];
            /**
             * ExposeHeaders defines which response headers should be made accessible to
             * scripts running in the browser.
             * It specifies the headers in the Access-Control-Expose-Headers CORS response header..
             * The value "*" allows any header to be exposed.
             */
            exposeHeaders: string[];
            /**
             * MaxAge defines how long the results of a preflight request can be cached.
             * It specifies the value in the Access-Control-Max-Age CORS response header..
             */
            maxAge: string;
        }

        /**
         * CORS defines the configuration for Cross-Origin Resource Sharing (CORS).
         */
        export interface SecurityPolicySpecCorsPatch {
            /**
             * AllowCredentials indicates whether a request can include user credentials
             * like cookies, authentication headers, or TLS client certificates.
             * It specifies the value in the Access-Control-Allow-Credentials CORS response header.
             */
            allowCredentials: boolean;
            /**
             * AllowHeaders defines the headers that are allowed to be sent with requests.
             * It specifies the allowed headers in the Access-Control-Allow-Headers CORS response header..
             * The value "*" allows any header to be sent.
             */
            allowHeaders: string[];
            /**
             * AllowMethods defines the methods that are allowed to make requests.
             * It specifies the allowed methods in the Access-Control-Allow-Methods CORS response header..
             * The value "*" allows any method to be used.
             */
            allowMethods: string[];
            /**
             * AllowOrigins defines the origins that are allowed to make requests.
             * It specifies the allowed origins in the Access-Control-Allow-Origin CORS response header.
             * The value "*" allows any origin to make requests.
             */
            allowOrigins: string[];
            /**
             * ExposeHeaders defines which response headers should be made accessible to
             * scripts running in the browser.
             * It specifies the headers in the Access-Control-Expose-Headers CORS response header..
             * The value "*" allows any header to be exposed.
             */
            exposeHeaders: string[];
            /**
             * MaxAge defines how long the results of a preflight request can be cached.
             * It specifies the value in the Access-Control-Max-Age CORS response header..
             */
            maxAge: string;
        }

        /**
         * ExtAuth defines the configuration for External Authorization.
         */
        export interface SecurityPolicySpecExtAuth {
            bodyToExtAuth: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthBodyToExtAuth;
            /**
             * FailOpen is a switch used to control the behavior when a response from the External Authorization service cannot be obtained.
             * If FailOpen is set to true, the system allows the traffic to pass through.
             * Otherwise, if it is set to false or not set (defaulting to false),
             * the system blocks the traffic and returns a HTTP 5xx error, reflecting a fail-closed approach.
             * This setting determines whether to prioritize accessibility over strict security in case of authorization service failure.
             *
             * If set to true, the External Authorization will also be bypassed if its configuration is invalid.
             */
            failOpen: boolean;
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpc;
            /**
             * HeadersToExtAuth defines the client request headers that will be included
             * in the request to the external authorization service.
             * Note: If not specified, the default behavior for gRPC and HTTP external
             * authorization services is different due to backward compatibility reasons.
             * All headers will be included in the check request to a gRPC authorization server.
             * Only the following headers will be included in the check request to an HTTP
             * authorization server: Host, Method, Path, Content-Length, and Authorization.
             * And these headers will always be included to the check request to an HTTP
             * authorization server by default, no matter whether they are specified
             * in HeadersToExtAuth or not.
             */
            headersToExtAuth: string[];
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttp;
            /**
             * RecomputeRoute clears the route cache and recalculates the routing decision.
             * This field must be enabled if the headers added or modified by the ExtAuth are used for
             * route matching decisions. If the recomputation selects a new route, features targeting
             * the new matched route will be applied.
             */
            recomputeRoute: boolean;
        }

        /**
         * BodyToExtAuth defines the Body to Ext Auth configuration.
         */
        export interface SecurityPolicySpecExtAuthBodyToExtAuth {
            /**
             * MaxRequestBytes is the maximum size of a message body that the filter will hold in memory.
             * Envoy will return HTTP 413 and will not initiate the authorization process when buffer
             * reaches the number set in this field.
             * Note that this setting will have precedence over failOpen mode.
             */
            maxRequestBytes: number;
        }

        /**
         * BodyToExtAuth defines the Body to Ext Auth configuration.
         */
        export interface SecurityPolicySpecExtAuthBodyToExtAuthPatch {
            /**
             * MaxRequestBytes is the maximum size of a message body that the filter will hold in memory.
             * Envoy will return HTTP 413 and will not initiate the authorization process when buffer
             * reaches the number set in this field.
             * Note that this setting will have precedence over failOpen mode.
             */
            maxRequestBytes: number;
        }

        /**
         * GRPC defines the gRPC External Authorization service.
         * Either GRPCService or HTTPService must be specified,
         * and only one of them can be provided.
         */
        export interface SecurityPolicySpecExtAuthGrpc {
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettings;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecExtAuthGrpcBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * GRPC defines the gRPC External Authorization service.
         * Either GRPCService or HTTPService must be specified,
         * and only one of them can be provided.
         */
        export interface SecurityPolicySpecExtAuthGrpcPatch {
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcBackendSettingsPatch;
        }

        /**
         * HTTP defines the HTTP External Authorization service.
         * Either GRPCService or HTTPService must be specified,
         * and only one of them can be provided.
         */
        export interface SecurityPolicySpecExtAuthHttp {
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettings;
            /**
             * HeadersToBackend are the authorization response headers that will be added
             * to the original client request before sending it to the backend server.
             * Note that coexisting headers will be overridden.
             * If not specified, no authorization response headers will be added to the
             * original client request.
             */
            headersToBackend: string[];
            /**
             * Path is the path of the HTTP External Authorization service.
             * If path is specified, the authorization request will be sent to that path,
             * or else the authorization request will use the path of the original request.
             *
             * Please note that the original request path will be appended to the path specified here.
             * For example, if the original request path is "/hello", and the path specified here is "/auth",
             * then the path of the authorization request will be "/auth/hello". If the path is not specified,
             * the path of the authorization request will be "/hello".
             */
            path: string;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecExtAuthHttpBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * HTTP defines the HTTP External Authorization service.
         * Either GRPCService or HTTPService must be specified,
         * and only one of them can be provided.
         */
        export interface SecurityPolicySpecExtAuthHttpPatch {
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpBackendSettingsPatch;
            /**
             * HeadersToBackend are the authorization response headers that will be added
             * to the original client request before sending it to the backend server.
             * Note that coexisting headers will be overridden.
             * If not specified, no authorization response headers will be added to the
             * original client request.
             */
            headersToBackend: string[];
            /**
             * Path is the path of the HTTP External Authorization service.
             * If path is specified, the authorization request will be sent to that path,
             * or else the authorization request will use the path of the original request.
             *
             * Please note that the original request path will be appended to the path specified here.
             * For example, if the original request path is "/hello", and the path specified here is "/auth",
             * then the path of the authorization request will be "/auth/hello". If the path is not specified,
             * the path of the authorization request will be "/hello".
             */
            path: string;
        }

        /**
         * ExtAuth defines the configuration for External Authorization.
         */
        export interface SecurityPolicySpecExtAuthPatch {
            bodyToExtAuth: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthBodyToExtAuthPatch;
            /**
             * FailOpen is a switch used to control the behavior when a response from the External Authorization service cannot be obtained.
             * If FailOpen is set to true, the system allows the traffic to pass through.
             * Otherwise, if it is set to false or not set (defaulting to false),
             * the system blocks the traffic and returns a HTTP 5xx error, reflecting a fail-closed approach.
             * This setting determines whether to prioritize accessibility over strict security in case of authorization service failure.
             *
             * If set to true, the External Authorization will also be bypassed if its configuration is invalid.
             */
            failOpen: boolean;
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthGrpcPatch;
            /**
             * HeadersToExtAuth defines the client request headers that will be included
             * in the request to the external authorization service.
             * Note: If not specified, the default behavior for gRPC and HTTP external
             * authorization services is different due to backward compatibility reasons.
             * All headers will be included in the check request to a gRPC authorization server.
             * Only the following headers will be included in the check request to an HTTP
             * authorization server: Host, Method, Path, Content-Length, and Authorization.
             * And these headers will always be included to the check request to an HTTP
             * authorization server by default, no matter whether they are specified
             * in HeadersToExtAuth or not.
             */
            headersToExtAuth: string[];
            http: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthHttpPatch;
            /**
             * RecomputeRoute clears the route cache and recalculates the routing decision.
             * This field must be enabled if the headers added or modified by the ExtAuth are used for
             * route matching decisions. If the recomputation selects a new route, features targeting
             * the new matched route will be applied.
             */
            recomputeRoute: boolean;
        }

        /**
         * JWT defines the configuration for JSON Web Token (JWT) authentication.
         */
        export interface SecurityPolicySpecJwt {
            /**
             * Optional determines whether a missing JWT is acceptable, defaulting to false if not specified.
             * Note: Even if optional is set to true, JWT authentication will still fail if an invalid JWT is presented.
             */
            optional: boolean;
            /**
             * Providers defines the JSON Web Token (JWT) authentication provider type.
             * When multiple JWT providers are specified, the JWT is considered valid if
             * any of the providers successfully validate the JWT. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/jwt_authn_filter.html.
             */
            providers: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProviders[];
        }

        /**
         * JWT defines the configuration for JSON Web Token (JWT) authentication.
         */
        export interface SecurityPolicySpecJwtPatch {
            /**
             * Optional determines whether a missing JWT is acceptable, defaulting to false if not specified.
             * Note: Even if optional is set to true, JWT authentication will still fail if an invalid JWT is presented.
             */
            optional: boolean;
            /**
             * Providers defines the JSON Web Token (JWT) authentication provider type.
             * When multiple JWT providers are specified, the JWT is considered valid if
             * any of the providers successfully validate the JWT. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/jwt_authn_filter.html.
             */
            providers: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersPatch[];
        }

        /**
         * JWTProvider defines how a JSON Web Token (JWT) can be verified.
         */
        export interface SecurityPolicySpecJwtProviders {
            /**
             * Audiences is a list of JWT audiences allowed access. For additional details, see
             * https://tools.ietf.org/html/rfc7519#section-4.1.3. If not provided, JWT audiences
             * are not checked.
             */
            audiences: string[];
            /**
             * ClaimToHeaders is a list of JWT claims that must be extracted into HTTP request headers
             * For examples, following config:
             * The claim must be of type; string, int, double, bool. Array type claims are not supported
             */
            claimToHeaders: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersClaimToHeaders[];
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersExtractFrom;
            /**
             * Issuer is the principal that issued the JWT and takes the form of a URL or email address.
             * For additional details, see https://tools.ietf.org/html/rfc7519#section-4.1.1 for
             * URL format and https://rfc-editor.org/rfc/rfc5322.html for email format. If not provided,
             * the JWT issuer is not checked.
             */
            issuer: string;
            localJWKS: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersLocalJWKS;
            /**
             * Name defines a unique name for the JWT provider. A name can have a variety of forms,
             * including RFC1123 subdomains, RFC 1123 labels, or RFC 1035 labels.
             */
            name: string;
            /**
             * RecomputeRoute clears the route cache and recalculates the routing decision.
             * This field must be enabled if the headers generated from the claim are used for
             * route matching decisions. If the recomputation selects a new route, features targeting
             * the new matched route will be applied.
             */
            recomputeRoute: boolean;
            remoteJWKS: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKS;
        }

        /**
         * ClaimToHeader defines a configuration to convert JWT claims into HTTP headers
         */
        export interface SecurityPolicySpecJwtProvidersClaimToHeaders {
            /**
             * Claim is the JWT Claim that should be saved into the header : it can be a nested claim of type
             * (eg. "claim.nested.key", "sub"). The nested claim name must use dot "."
             * to separate the JSON name path.
             */
            claim: string;
            /**
             * Header defines the name of the HTTP request header that the JWT Claim will be saved into.
             */
            header: string;
        }

        /**
         * ClaimToHeader defines a configuration to convert JWT claims into HTTP headers
         */
        export interface SecurityPolicySpecJwtProvidersClaimToHeadersPatch {
            /**
             * Claim is the JWT Claim that should be saved into the header : it can be a nested claim of type
             * (eg. "claim.nested.key", "sub"). The nested claim name must use dot "."
             * to separate the JSON name path.
             */
            claim: string;
            /**
             * Header defines the name of the HTTP request header that the JWT Claim will be saved into.
             */
            header: string;
        }

        /**
         * ExtractFrom defines different ways to extract the JWT token from HTTP request.
         * If empty, it defaults to extract JWT token from the Authorization HTTP request header using Bearer schema
         * or access_token from query parameters.
         */
        export interface SecurityPolicySpecJwtProvidersExtractFrom {
            /**
             * Cookies represents a list of cookie names to extract the JWT token from.
             */
            cookies: string[];
            /**
             * Headers represents a list of HTTP request headers to extract the JWT token from.
             */
            headers: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersExtractFromHeaders[];
            /**
             * Params represents a list of query parameters to extract the JWT token from.
             */
            params: string[];
        }

        /**
         * JWTHeaderExtractor defines an HTTP header location to extract JWT token
         */
        export interface SecurityPolicySpecJwtProvidersExtractFromHeaders {
            /**
             * Name is the HTTP header name to retrieve the token
             */
            name: string;
            /**
             * ValuePrefix is the prefix that should be stripped before extracting the token.
             * The format would be used by Envoy like "{ValuePrefix}<TOKEN>".
             * For example, "Authorization: Bearer <TOKEN>", then the ValuePrefix="Bearer " with a space at the end.
             */
            valuePrefix: string;
        }

        /**
         * JWTHeaderExtractor defines an HTTP header location to extract JWT token
         */
        export interface SecurityPolicySpecJwtProvidersExtractFromHeadersPatch {
            /**
             * Name is the HTTP header name to retrieve the token
             */
            name: string;
            /**
             * ValuePrefix is the prefix that should be stripped before extracting the token.
             * The format would be used by Envoy like "{ValuePrefix}<TOKEN>".
             * For example, "Authorization: Bearer <TOKEN>", then the ValuePrefix="Bearer " with a space at the end.
             */
            valuePrefix: string;
        }

        /**
         * ExtractFrom defines different ways to extract the JWT token from HTTP request.
         * If empty, it defaults to extract JWT token from the Authorization HTTP request header using Bearer schema
         * or access_token from query parameters.
         */
        export interface SecurityPolicySpecJwtProvidersExtractFromPatch {
            /**
             * Cookies represents a list of cookie names to extract the JWT token from.
             */
            cookies: string[];
            /**
             * Headers represents a list of HTTP request headers to extract the JWT token from.
             */
            headers: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersExtractFromHeadersPatch[];
            /**
             * Params represents a list of query parameters to extract the JWT token from.
             */
            params: string[];
        }

        /**
         * LocalJWKS defines how to get the JSON Web Key Sets (JWKS) from a local source.
         */
        export interface SecurityPolicySpecJwtProvidersLocalJWKS {
            /**
             * Inline contains the value as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the body value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersLocalJWKSValueRef;
        }

        /**
         * LocalJWKS defines how to get the JSON Web Key Sets (JWKS) from a local source.
         */
        export interface SecurityPolicySpecJwtProvidersLocalJWKSPatch {
            /**
             * Inline contains the value as an inline string.
             */
            inline: string;
            /**
             * Type is the type of method to use to read the body value.
             * Valid values are Inline and ValueRef, default is Inline.
             */
            type: string;
            valueRef: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersLocalJWKSValueRefPatch;
        }

        /**
         * ValueRef is a reference to a local ConfigMap that contains the JSON Web Key Sets (JWKS).
         *
         * The value of key `jwks` in the ConfigMap will be used.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface SecurityPolicySpecJwtProvidersLocalJWKSValueRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ValueRef is a reference to a local ConfigMap that contains the JSON Web Key Sets (JWKS).
         *
         * The value of key `jwks` in the ConfigMap will be used.
         * If the key is not found, the first value in the ConfigMap will be used.
         */
        export interface SecurityPolicySpecJwtProvidersLocalJWKSValueRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * JWTProvider defines how a JSON Web Token (JWT) can be verified.
         */
        export interface SecurityPolicySpecJwtProvidersPatch {
            /**
             * Audiences is a list of JWT audiences allowed access. For additional details, see
             * https://tools.ietf.org/html/rfc7519#section-4.1.3. If not provided, JWT audiences
             * are not checked.
             */
            audiences: string[];
            /**
             * ClaimToHeaders is a list of JWT claims that must be extracted into HTTP request headers
             * For examples, following config:
             * The claim must be of type; string, int, double, bool. Array type claims are not supported
             */
            claimToHeaders: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersClaimToHeadersPatch[];
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersExtractFromPatch;
            /**
             * Issuer is the principal that issued the JWT and takes the form of a URL or email address.
             * For additional details, see https://tools.ietf.org/html/rfc7519#section-4.1.1 for
             * URL format and https://rfc-editor.org/rfc/rfc5322.html for email format. If not provided,
             * the JWT issuer is not checked.
             */
            issuer: string;
            localJWKS: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersLocalJWKSPatch;
            /**
             * Name defines a unique name for the JWT provider. A name can have a variety of forms,
             * including RFC1123 subdomains, RFC 1123 labels, or RFC 1035 labels.
             */
            name: string;
            /**
             * RecomputeRoute clears the route cache and recalculates the routing decision.
             * This field must be enabled if the headers generated from the claim are used for
             * route matching decisions. If the recomputation selects a new route, features targeting
             * the new matched route will be applied.
             */
            recomputeRoute: boolean;
            remoteJWKS: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSPatch;
        }

        /**
         * RemoteJWKS defines how to fetch and cache JSON Web Key Sets (JWKS) from a remote
         * HTTP/HTTPS endpoint.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKS {
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettings;
            /**
             * URI is the HTTPS URI to fetch the JWKS. Envoy's system trust bundle is used to validate the server certificate.
             * If a custom trust bundle is needed, it can be specified in a BackendTLSConfig resource and target the BackendRefs.
             */
            uri: string;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * RemoteJWKS defines how to fetch and cache JSON Web Key Sets (JWKS) from a remote
         * HTTP/HTTPS endpoint.
         */
        export interface SecurityPolicySpecJwtProvidersRemoteJWKSPatch {
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecJwtProvidersRemoteJWKSBackendSettingsPatch;
            /**
             * URI is the HTTPS URI to fetch the JWKS. Envoy's system trust bundle is used to validate the server certificate.
             * If a custom trust bundle is needed, it can be specified in a BackendTLSConfig resource and target the BackendRefs.
             */
            uri: string;
        }

        /**
         * OIDC defines the configuration for the OpenID Connect (OIDC) authentication.
         */
        export interface SecurityPolicySpecOidc {
            /**
             * The client ID to be used in the OIDC
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             *
             * Only one of clientID or clientIDRef must be set.
             */
            clientID: string;
            clientIDRef: outputs.gateway.v1alpha1.SecurityPolicySpecOidcClientIDRef;
            clientSecret: outputs.gateway.v1alpha1.SecurityPolicySpecOidcClientSecret;
            cookieConfig: outputs.gateway.v1alpha1.SecurityPolicySpecOidcCookieConfig;
            /**
             * The optional domain to set the access and ID token cookies on.
             * If not set, the cookies will default to the host of the request, not including the subdomains.
             * If set, the cookies will be set on the specified domain and all subdomains.
             * This means that requests to any subdomain will not require reauthentication after users log in to the parent domain.
             */
            cookieDomain: string;
            cookieNames: outputs.gateway.v1alpha1.SecurityPolicySpecOidcCookieNames;
            /**
             * DefaultRefreshTokenTTL is the default lifetime of the refresh token.
             * This field is only used when the exp (expiration time) claim is omitted in
             * the refresh token or the refresh token is not JWT.
             *
             * If not specified, defaults to 604800s (one week).
             * Note: this field is only applicable when the "refreshToken" field is set to true.
             */
            defaultRefreshTokenTTL: string;
            /**
             * DefaultTokenTTL is the default lifetime of the id token and access token.
             * Please note that Envoy will always use the expiry time from the response
             * of the authorization server if it is provided. This field is only used when
             * the expiry time is not provided by the authorization.
             *
             * If not specified, defaults to 0. In this case, the "expires_in" field in
             * the authorization response must be set by the authorization server, or the
             * OAuth flow will fail.
             */
            defaultTokenTTL: string;
            denyRedirect: outputs.gateway.v1alpha1.SecurityPolicySpecOidcDenyRedirect;
            /**
             * ForwardAccessToken indicates whether the Envoy should forward the access token
             * via the Authorization header Bearer scheme to the upstream.
             * If not specified, defaults to false.
             */
            forwardAccessToken: boolean;
            /**
             * The path to log a user out, clearing their credential cookies.
             *
             * If not specified, uses a default logout path "/logout"
             */
            logoutPath: string;
            /**
             * Skips OIDC authentication when the request contains a header that will be extracted by the JWT filter. Unless
             * explicitly stated otherwise in the extractFrom field, this will be the "Authorization: Bearer ..." header.
             *
             * The passThroughAuthHeader option is typically used for non-browser clients that may not be able to handle OIDC
             * redirects and wish to directly supply a token instead.
             *
             * If not specified, defaults to false.
             */
            passThroughAuthHeader: boolean;
            provider: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProvider;
            /**
             * The redirect URL to be used in the OIDC
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * If not specified, uses the default redirect URI "%REQ(x-forwarded-proto)%://%REQ(:authority)%/oauth2/callback"
             */
            redirectURL: string;
            /**
             * RefreshToken indicates whether the Envoy should automatically refresh the
             * id token and access token when they expire.
             * When set to true, the Envoy will use the refresh token to get a new id token
             * and access token when they expire.
             *
             * If not specified, defaults to false.
             */
            refreshToken: boolean;
            /**
             * The OIDC resources to be used in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             */
            resources: string[];
            /**
             * The OIDC scopes to be used in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * The "openid" scope is always added to the list of scopes if not already
             * specified.
             */
            scopes: string[];
        }

        /**
         * The Kubernetes secret which contains the client ID to be used in the
         * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
         * Exactly one of clientID or clientIDRef must be set.
         * This is an Opaque secret. The client ID should be stored in the key "client-id".
         *
         * Only one of clientID or clientIDRef must be set.
         */
        export interface SecurityPolicySpecOidcClientIDRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * The Kubernetes secret which contains the client ID to be used in the
         * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
         * Exactly one of clientID or clientIDRef must be set.
         * This is an Opaque secret. The client ID should be stored in the key "client-id".
         *
         * Only one of clientID or clientIDRef must be set.
         */
        export interface SecurityPolicySpecOidcClientIDRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * The Kubernetes secret which contains the OIDC client secret to be used in the
         * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
         *
         * This is an Opaque secret. The client secret should be stored in the key
         * "client-secret".
         */
        export interface SecurityPolicySpecOidcClientSecret {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * The Kubernetes secret which contains the OIDC client secret to be used in the
         * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
         *
         * This is an Opaque secret. The client secret should be stored in the key
         * "client-secret".
         */
        export interface SecurityPolicySpecOidcClientSecretPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * CookieConfigs allows setting the SameSite attribute for OIDC cookies.
         * By default, its unset.
         */
        export interface SecurityPolicySpecOidcCookieConfig {
            sameSite: string;
        }

        /**
         * CookieConfigs allows setting the SameSite attribute for OIDC cookies.
         * By default, its unset.
         */
        export interface SecurityPolicySpecOidcCookieConfigPatch {
            sameSite: string;
        }

        /**
         * The optional cookie name overrides to be used for Bearer and IdToken cookies in the
         * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
         * If not specified, uses a randomly generated suffix
         */
        export interface SecurityPolicySpecOidcCookieNames {
            /**
             * The name of the cookie used to store the AccessToken in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * If not specified, defaults to "AccessToken-(randomly generated uid)"
             */
            accessToken: string;
            /**
             * The name of the cookie used to store the IdToken in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * If not specified, defaults to "IdToken-(randomly generated uid)"
             */
            idToken: string;
        }

        /**
         * The optional cookie name overrides to be used for Bearer and IdToken cookies in the
         * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
         * If not specified, uses a randomly generated suffix
         */
        export interface SecurityPolicySpecOidcCookieNamesPatch {
            /**
             * The name of the cookie used to store the AccessToken in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * If not specified, defaults to "AccessToken-(randomly generated uid)"
             */
            accessToken: string;
            /**
             * The name of the cookie used to store the IdToken in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * If not specified, defaults to "IdToken-(randomly generated uid)"
             */
            idToken: string;
        }

        /**
         * Any request that matches any of the provided matchers (with either tokens that are expired or missing tokens) will not be redirected to the OIDC Provider.
         * This behavior can be useful for AJAX or machine requests.
         */
        export interface SecurityPolicySpecOidcDenyRedirect {
            /**
             * Defines the headers to match against the request to deny redirect to the OIDC Provider.
             */
            headers: outputs.gateway.v1alpha1.SecurityPolicySpecOidcDenyRedirectHeaders[];
        }

        /**
         * OIDCDenyRedirectHeader defines how a header is matched
         */
        export interface SecurityPolicySpecOidcDenyRedirectHeaders {
            /**
             * Specifies the name of the header in the request.
             */
            name: string;
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * OIDCDenyRedirectHeader defines how a header is matched
         */
        export interface SecurityPolicySpecOidcDenyRedirectHeadersPatch {
            /**
             * Specifies the name of the header in the request.
             */
            name: string;
            /**
             * Type specifies how to match against a string.
             */
            type: string;
            /**
             * Value specifies the string value that the match must have.
             */
            value: string;
        }

        /**
         * Any request that matches any of the provided matchers (with either tokens that are expired or missing tokens) will not be redirected to the OIDC Provider.
         * This behavior can be useful for AJAX or machine requests.
         */
        export interface SecurityPolicySpecOidcDenyRedirectPatch {
            /**
             * Defines the headers to match against the request to deny redirect to the OIDC Provider.
             */
            headers: outputs.gateway.v1alpha1.SecurityPolicySpecOidcDenyRedirectHeadersPatch[];
        }

        /**
         * OIDC defines the configuration for the OpenID Connect (OIDC) authentication.
         */
        export interface SecurityPolicySpecOidcPatch {
            /**
             * The client ID to be used in the OIDC
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             *
             * Only one of clientID or clientIDRef must be set.
             */
            clientID: string;
            clientIDRef: outputs.gateway.v1alpha1.SecurityPolicySpecOidcClientIDRefPatch;
            clientSecret: outputs.gateway.v1alpha1.SecurityPolicySpecOidcClientSecretPatch;
            cookieConfig: outputs.gateway.v1alpha1.SecurityPolicySpecOidcCookieConfigPatch;
            /**
             * The optional domain to set the access and ID token cookies on.
             * If not set, the cookies will default to the host of the request, not including the subdomains.
             * If set, the cookies will be set on the specified domain and all subdomains.
             * This means that requests to any subdomain will not require reauthentication after users log in to the parent domain.
             */
            cookieDomain: string;
            cookieNames: outputs.gateway.v1alpha1.SecurityPolicySpecOidcCookieNamesPatch;
            /**
             * DefaultRefreshTokenTTL is the default lifetime of the refresh token.
             * This field is only used when the exp (expiration time) claim is omitted in
             * the refresh token or the refresh token is not JWT.
             *
             * If not specified, defaults to 604800s (one week).
             * Note: this field is only applicable when the "refreshToken" field is set to true.
             */
            defaultRefreshTokenTTL: string;
            /**
             * DefaultTokenTTL is the default lifetime of the id token and access token.
             * Please note that Envoy will always use the expiry time from the response
             * of the authorization server if it is provided. This field is only used when
             * the expiry time is not provided by the authorization.
             *
             * If not specified, defaults to 0. In this case, the "expires_in" field in
             * the authorization response must be set by the authorization server, or the
             * OAuth flow will fail.
             */
            defaultTokenTTL: string;
            denyRedirect: outputs.gateway.v1alpha1.SecurityPolicySpecOidcDenyRedirectPatch;
            /**
             * ForwardAccessToken indicates whether the Envoy should forward the access token
             * via the Authorization header Bearer scheme to the upstream.
             * If not specified, defaults to false.
             */
            forwardAccessToken: boolean;
            /**
             * The path to log a user out, clearing their credential cookies.
             *
             * If not specified, uses a default logout path "/logout"
             */
            logoutPath: string;
            /**
             * Skips OIDC authentication when the request contains a header that will be extracted by the JWT filter. Unless
             * explicitly stated otherwise in the extractFrom field, this will be the "Authorization: Bearer ..." header.
             *
             * The passThroughAuthHeader option is typically used for non-browser clients that may not be able to handle OIDC
             * redirects and wish to directly supply a token instead.
             *
             * If not specified, defaults to false.
             */
            passThroughAuthHeader: boolean;
            provider: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderPatch;
            /**
             * The redirect URL to be used in the OIDC
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * If not specified, uses the default redirect URI "%REQ(x-forwarded-proto)%://%REQ(:authority)%/oauth2/callback"
             */
            redirectURL: string;
            /**
             * RefreshToken indicates whether the Envoy should automatically refresh the
             * id token and access token when they expire.
             * When set to true, the Envoy will use the refresh token to get a new id token
             * and access token when they expire.
             *
             * If not specified, defaults to false.
             */
            refreshToken: boolean;
            /**
             * The OIDC resources to be used in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             */
            resources: string[];
            /**
             * The OIDC scopes to be used in the
             * [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
             * The "openid" scope is always added to the list of scopes if not already
             * specified.
             */
            scopes: string[];
        }

        /**
         * The OIDC Provider configuration.
         */
        export interface SecurityPolicySpecOidcProvider {
            /**
             * The OIDC Provider's [authorization endpoint](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).
             * If not provided, EG will try to discover it from the provider's [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
             */
            authorizationEndpoint: string;
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendRef;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendRefs[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettings;
            /**
             * The OIDC Provider's [end session endpoint](https://openid.net/specs/openid-connect-core-1_0.html#RPLogout).
             *
             * If the end session endpoint is provided, EG will use it to log out the user from the OIDC Provider when the user accesses the logout path.
             * EG will also try to discover the end session endpoint from the provider's [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse) when authorizationEndpoint or tokenEndpoint is not provided.
             */
            endSessionEndpoint: string;
            /**
             * The OIDC Provider's [issuer identifier](https://openid.net/specs/openid-connect-discovery-1_0.html#IssuerDiscovery).
             * Issuer MUST be a URI RFC 3986 [RFC3986] with a scheme component that MUST
             * be https, a host component, and optionally, port and path components and
             * no query or fragment components.
             */
            issuer: string;
            /**
             * The OIDC Provider's [token endpoint](https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint).
             * If not provided, EG will try to discover it from the provider's [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
             */
            tokenEndpoint: string;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecOidcProviderBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a Kubernetes object that represents the
         * backend server to which the authorization request will be sent.
         *
         * Deprecated: Use BackendRefs instead.
         */
        export interface SecurityPolicySpecOidcProviderBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecOidcProviderBackendRefs {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef defines how an ObjectReference that is specific to BackendRef.
         */
        export interface SecurityPolicySpecOidcProviderBackendRefsPatch {
            /**
             * Fallback indicates whether the backend is designated as a fallback.
             * Multiple fallback backends can be configured.
             * It is highly recommended to configure active or passive health checks to ensure that failover can be detected
             * when the active backends become unhealthy and to automatically readjust once the primary backends are healthy again.
             * The overprovisioning factor is set to 1.4, meaning the fallback backends will only start receiving traffic when
             * the health of the active backends falls below 72%.
             */
            fallback: boolean;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettings {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsCircuitBreaker;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsConnection;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsDns;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheck;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHttp2;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancer;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsProxyProtocol;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetry;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTcpKeepalive;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTimeout;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsCircuitBreaker {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsCircuitBreakerPerEndpoint;
        }

        /**
         * Circuit Breaker settings for the upstream connections and requests.
         * If not set, circuit breakers will be enabled with the default thresholds
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsCircuitBreakerPatch {
            /**
             * The maximum number of connections that Envoy will establish to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
            /**
             * The maximum number of parallel requests that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRequests: number;
            /**
             * The maximum number of parallel retries that Envoy will make to the referenced backend defined within a xRoute rule.
             */
            maxParallelRetries: number;
            /**
             * The maximum number of pending requests that Envoy will queue to the referenced backend defined within a xRoute rule.
             */
            maxPendingRequests: number;
            /**
             * The maximum number of requests that Envoy will make over a single connection to the referenced backend defined within a xRoute rule.
             * Default: unlimited.
             */
            maxRequestsPerConnection: number;
            perEndpoint: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsCircuitBreakerPerEndpointPatch;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsCircuitBreakerPerEndpoint {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * PerEndpoint defines Circuit Breakers that will apply per-endpoint for an upstream cluster
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsCircuitBreakerPerEndpointPatch {
            /**
             * MaxConnections configures the maximum number of connections that Envoy will establish per-endpoint to the referenced backend defined within a xRoute rule.
             */
            maxConnections: number;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsConnection {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * Connection includes backend connection settings.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsConnectionPatch {
            /**
             * BufferLimit Soft limit on size of the cluster’s connections read and write buffers.
             * BufferLimit applies to connection streaming (maybe non-streaming) channel between processes, it's in user space.
             * If unspecified, an implementation defined default is applied (32768 bytes).
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note: that when the suffix is not provided, the value is interpreted as bytes.
             */
            bufferLimit: number | string;
            /**
             * SocketBufferLimit provides configuration for the maximum buffer size in bytes for each socket
             * to backend.
             * SocketBufferLimit applies to socket streaming channel between TCP/IP stacks, it's in kernel space.
             * For example, 20Mi, 1Gi, 256Ki etc.
             * Note that when the suffix is not provided, the value is interpreted as bytes.
             */
            socketBufferLimit: number | string;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsDns {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * DNS includes dns resolution settings.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsDnsPatch {
            /**
             * DNSRefreshRate specifies the rate at which DNS records should be refreshed.
             * Defaults to 30 seconds.
             */
            dnsRefreshRate: string;
            /**
             * LookupFamily determines how Envoy would resolve DNS for Routes where the backend is specified as a fully qualified domain name (FQDN).
             * If set, this configuration overrides other defaults.
             */
            lookupFamily: string;
            /**
             * RespectDNSTTL indicates whether the DNS Time-To-Live (TTL) should be respected.
             * If the value is set to true, the DNS refresh rate will be set to the resource record’s TTL.
             * Defaults to true.
             */
            respectDnsTtl: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheck {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActive;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckPassive;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActive {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveGrpc;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttp;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcp;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveGrpc {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * GRPC defines the configuration of the GRPC health checker.
         * It's optional, and can only be used if the specified type is GRPC.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveGrpcPatch {
            /**
             * Service to send in the health check request.
             * If this is not specified, then the health check request applies to the entire
             * server and not to a specific service.
             */
            service: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttp {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttpExpectedResponse;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttpExpectedResponse {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * ExpectedResponse defines a list of HTTP expected responses to match.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttpExpectedResponsePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * HTTP defines the configuration of http health checker.
         * It's required while the health checker type is HTTP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttpPatch {
            expectedResponse: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttpExpectedResponsePatch;
            /**
             * ExpectedStatuses defines a list of HTTP response statuses considered healthy.
             * Defaults to 200 only
             */
            expectedStatuses: number[];
            /**
             * Hostname defines the HTTP host that will be requested during health checking.
             * Default: HTTPRoute or GRPCRoute hostname.
             */
            hostname: string;
            /**
             * Method defines the HTTP method used for health checking.
             * Defaults to GET
             */
            method: string;
            /**
             * Path defines the HTTP path that will be requested during health checking.
             */
            path: string;
        }

        /**
         * Active health check configuration
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActivePatch {
            grpc: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveGrpcPatch;
            /**
             * HealthyThreshold defines the number of healthy health checks required before a backend host is marked healthy.
             */
            healthyThreshold: number;
            http: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveHttpPatch;
            /**
             * InitialJitter defines the maximum time Envoy will wait before the first health check.
             * Envoy will randomly select a value between 0 and the initial jitter value.
             */
            initialJitter: string;
            /**
             * Interval defines the time between active health checks.
             */
            interval: string;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpPatch;
            /**
             * Timeout defines the time to wait for a health check response.
             */
            timeout: string;
            /**
             * Type defines the type of health checker.
             */
            type: string;
            /**
             * UnhealthyThreshold defines the number of unhealthy health checks required before a backend host is marked unhealthy.
             */
            unhealthyThreshold: number;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcp {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpReceive;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpSend;
        }

        /**
         * TCP defines the configuration of tcp health checker.
         * It's required while the health checker type is TCP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpPatch {
            receive: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpReceivePatch;
            send: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpSendPatch;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpReceive {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Receive defines the expected response payload.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpReceivePatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpSend {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Send defines the request payload.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActiveTcpSendPatch {
            /**
             * Binary payload base64 encoded.
             */
            binary: string;
            /**
             * Text payload in plain text.
             */
            text: string;
            /**
             * Type defines the type of the payload.
             */
            type: string;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckPassive {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * Passive passive check configuration
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckPassivePatch {
            /**
             * BaseEjectionTime defines the base duration for which a host will be ejected on consecutive failures.
             */
            baseEjectionTime: string;
            /**
             * Consecutive5xxErrors sets the number of consecutive 5xx errors triggering ejection.
             */
            consecutive5XxErrors: number;
            /**
             * ConsecutiveGatewayErrors sets the number of consecutive gateway errors triggering ejection.
             */
            consecutiveGatewayErrors: number;
            /**
             * ConsecutiveLocalOriginFailures sets the number of consecutive local origin failures triggering ejection.
             * Parameter takes effect only when split_external_local_origin_errors is set to true.
             */
            consecutiveLocalOriginFailures: number;
            /**
             * Interval defines the time between passive health checks.
             */
            interval: string;
            /**
             * MaxEjectionPercent sets the maximum percentage of hosts in a cluster that can be ejected.
             */
            maxEjectionPercent: number;
            /**
             * SplitExternalLocalOriginErrors enables splitting of errors between external and local origin.
             */
            splitExternalLocalOriginErrors: boolean;
        }

        /**
         * HealthCheck allows gateway to perform active health checking on backends.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHealthCheckPatch {
            active: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckActivePatch;
            /**
             * When number of unhealthy endpoints for a backend reaches this threshold
             * Envoy will disregard health status and balance across all endpoints.
             * It's designed to prevent a situation in which host failures cascade throughout the cluster
             * as load increases. If not set, the default value is 50%. To disable panic mode, set value to `0`.
             */
            panicThreshold: number;
            passive: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckPassivePatch;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHttp2 {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * HTTP2 provides HTTP/2 configuration for backend connections.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsHttp2Patch {
            /**
             * InitialConnectionWindowSize sets the initial window size for HTTP/2 connections.
             * If not set, the default value is 1 MiB.
             */
            initialConnectionWindowSize: number | string;
            /**
             * InitialStreamWindowSize sets the initial window size for HTTP/2 streams.
             * If not set, the default value is 64 KiB(64*1024).
             */
            initialStreamWindowSize: number | string;
            /**
             * MaxConcurrentStreams sets the maximum number of concurrent streams allowed per connection.
             * If not set, the default value is 100.
             */
            maxConcurrentStreams: number;
            /**
             * OnInvalidMessage determines if Envoy will terminate the connection or just the offending stream in the event of HTTP messaging error
             * It's recommended for L2 Envoy deployments to set this value to TerminateStream.
             * https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/level_two
             * Default: TerminateConnection
             */
            onInvalidMessage: string;
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancer {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHash;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverride;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerSlowStart;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAware;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHash {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashCookie;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashHeader;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashCookie {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Cookie configures the cookie hash policy when the consistent hash type is set to Cookie.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashCookiePatch {
            /**
             * Additional Attributes to set for the generated cookie.
             */
            attributes: {[key: string]: string};
            /**
             * Name of the cookie to hash.
             * If this cookie does not exist in the request, Envoy will generate a cookie and set
             * the TTL on the response back to the client based on Layer 4
             * attributes of the backend endpoint, to ensure that these future requests
             * go to the same backend endpoint. Make sure to set the TTL field for this case.
             */
            name: string;
            /**
             * TTL of the generated cookie if the cookie is not present. This value sets the
             * Max-Age attribute value.
             */
            ttl: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashHeader {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * Header configures the header hash policy when the consistent hash type is set to Header.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashHeaderPatch {
            /**
             * Name of the header to hash.
             */
            name: string;
        }

        /**
         * ConsistentHash defines the configuration when the load balancer type is
         * set to ConsistentHash
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashPatch {
            cookie: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashCookiePatch;
            header: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashHeaderPatch;
            /**
             * The table size for consistent hashing, must be prime number limited to 5000011.
             */
            tableSize: number;
            /**
             * ConsistentHashType defines the type of input to hash on. Valid Type values are
             * "SourceIP",
             * "Header",
             * "Cookie".
             */
            type: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverride {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverrideExtractFrom[];
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverrideExtractFrom {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverrideExtractFrom defines a source to extract endpoint override information from.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch {
            /**
             * Header defines the header to get the override endpoint addresses.
             * The header value must specify at least one endpoint in `IP:Port` format or multiple endpoints in `IP:Port,IP:Port,...` format.
             * For example `10.0.0.5:8080` or `[2600:4040:5204::1574:24ae]:80`.
             * The IPv6 address is enclosed in square brackets.
             */
            header: string;
        }

        /**
         * EndpointOverride defines the configuration for endpoint override.
         * When specified, the load balancer will attempt to route requests to endpoints
         * based on the override information extracted from request headers or metadata.
         *  If the override endpoints are not available, the configured load balancer policy will be used as fallback.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverridePatch {
            /**
             * ExtractFrom defines the sources to extract endpoint override information from.
             */
            extractFrom: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverrideExtractFromPatch[];
        }

        /**
         * LoadBalancer policy to apply when routing traffic from the gateway to
         * the backend endpoints. Defaults to `LeastRequest`.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerPatch {
            consistentHash: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerConsistentHashPatch;
            endpointOverride: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerEndpointOverridePatch;
            slowStart: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerSlowStartPatch;
            /**
             * Type decides the type of Load Balancer policy.
             * Valid LoadBalancerType values are
             * "ConsistentHash",
             * "LeastRequest",
             * "Random",
             * "RoundRobin".
             */
            type: string;
            zoneAware: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePatch;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerSlowStart {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * SlowStart defines the configuration related to the slow start load balancer policy.
         * If set, during slow start window, traffic sent to the newly added hosts will gradually increase.
         * Currently this is only supported for RoundRobin and LeastRequest load balancers
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerSlowStartPatch {
            /**
             * Window defines the duration of the warm up period for newly added host.
             * During slow start window, traffic sent to the newly added hosts will gradually increase.
             * Currently only supports linear growth of traffic. For additional details,
             * see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#config-cluster-v3-cluster-slowstartconfig
             */
            window: string;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAware {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocal;
        }

        /**
         * ZoneAware defines the configuration related to the distribution of requests between locality zones.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePatch {
            preferLocal: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocalPatch;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocal {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForce;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForce {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * ForceLocalZone defines override configuration for forcing all traffic to stay within the local zone instead of the default behavior
         * which maintains equal distribution among upstream endpoints while sending as much traffic as possible locally.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch {
            /**
             * MinEndpointsInZoneThreshold is the minimum number of upstream endpoints in the local zone required to honor the forceLocalZone
             * override. This is useful for protecting zones with fewer endpoints.
             */
            minEndpointsInZoneThreshold: number;
        }

        /**
         * PreferLocalZone configures zone-aware routing to prefer sending traffic to the local locality zone.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocalPatch {
            force: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerZoneAwarePreferLocalForcePatch;
            /**
             * MinEndpointsThreshold is the minimum number of total upstream endpoints across all zones required to enable zone-aware routing.
             */
            minEndpointsThreshold: number;
        }

        /**
         * BackendSettings holds configuration for managing the connection
         * to the backend.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsPatch {
            circuitBreaker: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsCircuitBreakerPatch;
            connection: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsConnectionPatch;
            dns: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsDnsPatch;
            healthCheck: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHealthCheckPatch;
            http2: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsHttp2Patch;
            loadBalancer: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsLoadBalancerPatch;
            proxyProtocol: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsProxyProtocolPatch;
            retry: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryPatch;
            tcpKeepalive: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTcpKeepalivePatch;
            timeout: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTimeoutPatch;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsProxyProtocol {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * ProxyProtocol enables the Proxy Protocol when communicating with the backend.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsProxyProtocolPatch {
            /**
             * Version of ProxyProtol
             * Valid ProxyProtocolVersion values are
             * "V1"
             * "V2"
             */
            version: string;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetry {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetry;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryRetryOn;
        }

        /**
         * Retry provides more advanced usage, allowing users to customize the number of retries, retry fallback strategy, and retry triggering conditions.
         * If not set, retry will be disabled.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryPatch {
            /**
             * NumAttemptsPerPriority defines the number of requests (initial attempt + retries)
             * that should be sent to the same priority before switching to a different one.
             * If not specified or set to 0, all requests are sent to the highest priority that is healthy.
             */
            numAttemptsPerPriority: number;
            /**
             * NumRetries is the number of retries to be attempted. Defaults to 2.
             */
            numRetries: number;
            perRetry: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetryPatch;
            retryOn: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryRetryOnPatch;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetry {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetryBackOff;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetryBackOff {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * Backoff is the backoff policy to be applied per retry attempt. gateway uses a fully jittered exponential
         * back-off algorithm for retries. For additional details,
         * see https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-max-retries
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetryBackOffPatch {
            /**
             * BaseInterval is the base interval between retries.
             */
            baseInterval: string;
            /**
             * MaxInterval is the maximum interval between retries. This parameter is optional, but must be greater than or equal to the base_interval if set.
             * The default is 10 times the base_interval
             */
            maxInterval: string;
        }

        /**
         * PerRetry is the retry policy to be applied per retry attempt.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetryPatch {
            backOff: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsRetryPerRetryBackOffPatch;
            /**
             * Timeout is the timeout per retry attempt.
             */
            timeout: string;
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryRetryOn {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * RetryOn specifies the retry trigger condition.
         *
         * If not specified, the default is to retry on connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes(503).
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsRetryRetryOnPatch {
            /**
             * HttpStatusCodes specifies the http status codes to be retried.
             * The retriable-status-codes trigger must also be configured for these status codes to trigger a retry.
             */
            httpStatusCodes: number[];
            /**
             * Triggers specifies the retry trigger condition(Http/Grpc).
             */
            triggers: string[];
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTcpKeepalive {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * TcpKeepalive settings associated with the upstream client connection.
         * Disabled by default.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTcpKeepalivePatch {
            /**
             * The duration a connection needs to be idle before keep-alive
             * probes start being sent.
             * The duration format is
             * Defaults to `7200s`.
             */
            idleTime: string;
            /**
             * The duration between keep-alive probes.
             * Defaults to `75s`.
             */
            interval: string;
            /**
             * The total number of unacknowledged probes to send before deciding
             * the connection is dead.
             * Defaults to 9.
             */
            probes: number;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTimeout {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTimeoutHttp;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTimeoutTcp;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTimeoutHttp {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for HTTP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTimeoutHttpPatch {
            /**
             * The idle timeout for an HTTP connection. Idle time is defined as a period in which there are no active requests in the connection.
             * Default: 1 hour.
             */
            connectionIdleTimeout: string;
            /**
             * The maximum duration of an HTTP connection.
             * Default: unlimited.
             */
            maxConnectionDuration: string;
            /**
             * RequestTimeout is the time until which entire response is received from the upstream.
             */
            requestTimeout: string;
        }

        /**
         * Timeout settings for the backend connections.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTimeoutPatch {
            http: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTimeoutHttpPatch;
            tcp: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsTimeoutTcpPatch;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTimeoutTcp {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * Timeout settings for TCP.
         */
        export interface SecurityPolicySpecOidcProviderBackendSettingsTimeoutTcpPatch {
            /**
             * The timeout for network connection establishment, including TCP and TLS handshakes.
             * Default: 10 seconds.
             */
            connectTimeout: string;
        }

        /**
         * The OIDC Provider configuration.
         */
        export interface SecurityPolicySpecOidcProviderPatch {
            /**
             * The OIDC Provider's [authorization endpoint](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).
             * If not provided, EG will try to discover it from the provider's [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
             */
            authorizationEndpoint: string;
            backendRef: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendRefPatch;
            /**
             * BackendRefs references a Kubernetes object that represents the
             * backend server to which the authorization request will be sent.
             */
            backendRefs: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendRefsPatch[];
            backendSettings: outputs.gateway.v1alpha1.SecurityPolicySpecOidcProviderBackendSettingsPatch;
            /**
             * The OIDC Provider's [end session endpoint](https://openid.net/specs/openid-connect-core-1_0.html#RPLogout).
             *
             * If the end session endpoint is provided, EG will use it to log out the user from the OIDC Provider when the user accesses the logout path.
             * EG will also try to discover the end session endpoint from the provider's [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse) when authorizationEndpoint or tokenEndpoint is not provided.
             */
            endSessionEndpoint: string;
            /**
             * The OIDC Provider's [issuer identifier](https://openid.net/specs/openid-connect-discovery-1_0.html#IssuerDiscovery).
             * Issuer MUST be a URI RFC 3986 [RFC3986] with a scheme component that MUST
             * be https, a host component, and optionally, port and path components and
             * no query or fragment components.
             */
            issuer: string;
            /**
             * The OIDC Provider's [token endpoint](https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint).
             * If not provided, EG will try to discover it from the provider's [Well-Known Configuration Endpoint](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
             */
            tokenEndpoint: string;
        }

        /**
         * Spec defines the desired state of SecurityPolicy.
         */
        export interface SecurityPolicySpecPatch {
            apiKeyAuth: outputs.gateway.v1alpha1.SecurityPolicySpecApiKeyAuthPatch;
            authorization: outputs.gateway.v1alpha1.SecurityPolicySpecAuthorizationPatch;
            basicAuth: outputs.gateway.v1alpha1.SecurityPolicySpecBasicAuthPatch;
            cors: outputs.gateway.v1alpha1.SecurityPolicySpecCorsPatch;
            extAuth: outputs.gateway.v1alpha1.SecurityPolicySpecExtAuthPatch;
            jwt: outputs.gateway.v1alpha1.SecurityPolicySpecJwtPatch;
            oidc: outputs.gateway.v1alpha1.SecurityPolicySpecOidcPatch;
            targetRef: outputs.gateway.v1alpha1.SecurityPolicySpecTargetRefPatch;
            /**
             * TargetRefs are the names of the Gateway resources this policy
             * is being attached to.
             */
            targetRefs: outputs.gateway.v1alpha1.SecurityPolicySpecTargetRefsPatch[];
            /**
             * TargetSelectors allow targeting resources for this policy based on labels
             */
            targetSelectors: outputs.gateway.v1alpha1.SecurityPolicySpecTargetSelectorsPatch[];
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface SecurityPolicySpecTargetRef {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * TargetRef is the name of the resource this policy is being attached to.
         * This policy and the TargetRef MUST be in the same namespace for this
         * Policy to have effect
         *
         * Deprecated: use targetRefs/targetSelectors instead
         */
        export interface SecurityPolicySpecTargetRefPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface SecurityPolicySpecTargetRefs {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface SecurityPolicySpecTargetRefsPatch {
            /**
             * Group is the group of the target resource.
             */
            group: string;
            /**
             * Kind is kind of the target resource.
             */
            kind: string;
            /**
             * Name is the name of the target resource.
             */
            name: string;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName: string;
        }

        export interface SecurityPolicySpecTargetSelectors {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.SecurityPolicySpecTargetSelectorsMatchExpressions[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface SecurityPolicySpecTargetSelectorsMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface SecurityPolicySpecTargetSelectorsMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        export interface SecurityPolicySpecTargetSelectorsPatch {
            /**
             * Group is the group that this selector targets. Defaults to gateway.networking.k8s.io
             */
            group: string;
            /**
             * Kind is the resource kind that this selector targets.
             */
            kind: string;
            /**
             * MatchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1alpha1.SecurityPolicySpecTargetSelectorsMatchExpressionsPatch[];
            /**
             * MatchLabels are the set of label selectors for identifying the targeted resource
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Status defines the current status of SecurityPolicy.
         */
        export interface SecurityPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.SecurityPolicyStatusAncestors[];
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface SecurityPolicyStatusAncestors {
            ancestorRef: outputs.gateway.v1alpha1.SecurityPolicyStatusAncestorsAncestorRef;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.SecurityPolicyStatusAncestorsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface SecurityPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface SecurityPolicyStatusAncestorsAncestorRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface SecurityPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface SecurityPolicyStatusAncestorsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface SecurityPolicyStatusAncestorsPatch {
            ancestorRef: outputs.gateway.v1alpha1.SecurityPolicyStatusAncestorsAncestorRefPatch;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions: outputs.gateway.v1alpha1.SecurityPolicyStatusAncestorsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
        }

        /**
         * Status defines the current status of SecurityPolicy.
         */
        export interface SecurityPolicyStatusPatch {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors: outputs.gateway.v1alpha1.SecurityPolicyStatusAncestorsPatch[];
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntry[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReference[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntryPatch[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReferencePatch[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

    }
}
