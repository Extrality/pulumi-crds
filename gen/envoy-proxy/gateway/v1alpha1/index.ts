// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BackendArgs } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { BackendListArgs } from "./backendList";
export type BackendList = import("./backendList").BackendList;
export const BackendList: typeof import("./backendList").BackendList = null as any;
utilities.lazyLoad(exports, ["BackendList"], () => require("./backendList"));

export { BackendPatchArgs } from "./backendPatch";
export type BackendPatch = import("./backendPatch").BackendPatch;
export const BackendPatch: typeof import("./backendPatch").BackendPatch = null as any;
utilities.lazyLoad(exports, ["BackendPatch"], () => require("./backendPatch"));

export { BackendTrafficPolicyArgs } from "./backendTrafficPolicy";
export type BackendTrafficPolicy = import("./backendTrafficPolicy").BackendTrafficPolicy;
export const BackendTrafficPolicy: typeof import("./backendTrafficPolicy").BackendTrafficPolicy = null as any;
utilities.lazyLoad(exports, ["BackendTrafficPolicy"], () => require("./backendTrafficPolicy"));

export { BackendTrafficPolicyListArgs } from "./backendTrafficPolicyList";
export type BackendTrafficPolicyList = import("./backendTrafficPolicyList").BackendTrafficPolicyList;
export const BackendTrafficPolicyList: typeof import("./backendTrafficPolicyList").BackendTrafficPolicyList = null as any;
utilities.lazyLoad(exports, ["BackendTrafficPolicyList"], () => require("./backendTrafficPolicyList"));

export { BackendTrafficPolicyPatchArgs } from "./backendTrafficPolicyPatch";
export type BackendTrafficPolicyPatch = import("./backendTrafficPolicyPatch").BackendTrafficPolicyPatch;
export const BackendTrafficPolicyPatch: typeof import("./backendTrafficPolicyPatch").BackendTrafficPolicyPatch = null as any;
utilities.lazyLoad(exports, ["BackendTrafficPolicyPatch"], () => require("./backendTrafficPolicyPatch"));

export { ClientTrafficPolicyArgs } from "./clientTrafficPolicy";
export type ClientTrafficPolicy = import("./clientTrafficPolicy").ClientTrafficPolicy;
export const ClientTrafficPolicy: typeof import("./clientTrafficPolicy").ClientTrafficPolicy = null as any;
utilities.lazyLoad(exports, ["ClientTrafficPolicy"], () => require("./clientTrafficPolicy"));

export { ClientTrafficPolicyListArgs } from "./clientTrafficPolicyList";
export type ClientTrafficPolicyList = import("./clientTrafficPolicyList").ClientTrafficPolicyList;
export const ClientTrafficPolicyList: typeof import("./clientTrafficPolicyList").ClientTrafficPolicyList = null as any;
utilities.lazyLoad(exports, ["ClientTrafficPolicyList"], () => require("./clientTrafficPolicyList"));

export { ClientTrafficPolicyPatchArgs } from "./clientTrafficPolicyPatch";
export type ClientTrafficPolicyPatch = import("./clientTrafficPolicyPatch").ClientTrafficPolicyPatch;
export const ClientTrafficPolicyPatch: typeof import("./clientTrafficPolicyPatch").ClientTrafficPolicyPatch = null as any;
utilities.lazyLoad(exports, ["ClientTrafficPolicyPatch"], () => require("./clientTrafficPolicyPatch"));

export { EnvoyExtensionPolicyArgs } from "./envoyExtensionPolicy";
export type EnvoyExtensionPolicy = import("./envoyExtensionPolicy").EnvoyExtensionPolicy;
export const EnvoyExtensionPolicy: typeof import("./envoyExtensionPolicy").EnvoyExtensionPolicy = null as any;
utilities.lazyLoad(exports, ["EnvoyExtensionPolicy"], () => require("./envoyExtensionPolicy"));

export { EnvoyExtensionPolicyListArgs } from "./envoyExtensionPolicyList";
export type EnvoyExtensionPolicyList = import("./envoyExtensionPolicyList").EnvoyExtensionPolicyList;
export const EnvoyExtensionPolicyList: typeof import("./envoyExtensionPolicyList").EnvoyExtensionPolicyList = null as any;
utilities.lazyLoad(exports, ["EnvoyExtensionPolicyList"], () => require("./envoyExtensionPolicyList"));

export { EnvoyExtensionPolicyPatchArgs } from "./envoyExtensionPolicyPatch";
export type EnvoyExtensionPolicyPatch = import("./envoyExtensionPolicyPatch").EnvoyExtensionPolicyPatch;
export const EnvoyExtensionPolicyPatch: typeof import("./envoyExtensionPolicyPatch").EnvoyExtensionPolicyPatch = null as any;
utilities.lazyLoad(exports, ["EnvoyExtensionPolicyPatch"], () => require("./envoyExtensionPolicyPatch"));

export { EnvoyPatchPolicyArgs } from "./envoyPatchPolicy";
export type EnvoyPatchPolicy = import("./envoyPatchPolicy").EnvoyPatchPolicy;
export const EnvoyPatchPolicy: typeof import("./envoyPatchPolicy").EnvoyPatchPolicy = null as any;
utilities.lazyLoad(exports, ["EnvoyPatchPolicy"], () => require("./envoyPatchPolicy"));

export { EnvoyPatchPolicyListArgs } from "./envoyPatchPolicyList";
export type EnvoyPatchPolicyList = import("./envoyPatchPolicyList").EnvoyPatchPolicyList;
export const EnvoyPatchPolicyList: typeof import("./envoyPatchPolicyList").EnvoyPatchPolicyList = null as any;
utilities.lazyLoad(exports, ["EnvoyPatchPolicyList"], () => require("./envoyPatchPolicyList"));

export { EnvoyPatchPolicyPatchArgs } from "./envoyPatchPolicyPatch";
export type EnvoyPatchPolicyPatch = import("./envoyPatchPolicyPatch").EnvoyPatchPolicyPatch;
export const EnvoyPatchPolicyPatch: typeof import("./envoyPatchPolicyPatch").EnvoyPatchPolicyPatch = null as any;
utilities.lazyLoad(exports, ["EnvoyPatchPolicyPatch"], () => require("./envoyPatchPolicyPatch"));

export { EnvoyProxyArgs } from "./envoyProxy";
export type EnvoyProxy = import("./envoyProxy").EnvoyProxy;
export const EnvoyProxy: typeof import("./envoyProxy").EnvoyProxy = null as any;
utilities.lazyLoad(exports, ["EnvoyProxy"], () => require("./envoyProxy"));

export { EnvoyProxyListArgs } from "./envoyProxyList";
export type EnvoyProxyList = import("./envoyProxyList").EnvoyProxyList;
export const EnvoyProxyList: typeof import("./envoyProxyList").EnvoyProxyList = null as any;
utilities.lazyLoad(exports, ["EnvoyProxyList"], () => require("./envoyProxyList"));

export { EnvoyProxyPatchArgs } from "./envoyProxyPatch";
export type EnvoyProxyPatch = import("./envoyProxyPatch").EnvoyProxyPatch;
export const EnvoyProxyPatch: typeof import("./envoyProxyPatch").EnvoyProxyPatch = null as any;
utilities.lazyLoad(exports, ["EnvoyProxyPatch"], () => require("./envoyProxyPatch"));

export { HTTPRouteFilterArgs } from "./httprouteFilter";
export type HTTPRouteFilter = import("./httprouteFilter").HTTPRouteFilter;
export const HTTPRouteFilter: typeof import("./httprouteFilter").HTTPRouteFilter = null as any;
utilities.lazyLoad(exports, ["HTTPRouteFilter"], () => require("./httprouteFilter"));

export { HTTPRouteFilterListArgs } from "./httprouteFilterList";
export type HTTPRouteFilterList = import("./httprouteFilterList").HTTPRouteFilterList;
export const HTTPRouteFilterList: typeof import("./httprouteFilterList").HTTPRouteFilterList = null as any;
utilities.lazyLoad(exports, ["HTTPRouteFilterList"], () => require("./httprouteFilterList"));

export { HTTPRouteFilterPatchArgs } from "./httprouteFilterPatch";
export type HTTPRouteFilterPatch = import("./httprouteFilterPatch").HTTPRouteFilterPatch;
export const HTTPRouteFilterPatch: typeof import("./httprouteFilterPatch").HTTPRouteFilterPatch = null as any;
utilities.lazyLoad(exports, ["HTTPRouteFilterPatch"], () => require("./httprouteFilterPatch"));

export { SecurityPolicyArgs } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { SecurityPolicyListArgs } from "./securityPolicyList";
export type SecurityPolicyList = import("./securityPolicyList").SecurityPolicyList;
export const SecurityPolicyList: typeof import("./securityPolicyList").SecurityPolicyList = null as any;
utilities.lazyLoad(exports, ["SecurityPolicyList"], () => require("./securityPolicyList"));

export { SecurityPolicyPatchArgs } from "./securityPolicyPatch";
export type SecurityPolicyPatch = import("./securityPolicyPatch").SecurityPolicyPatch;
export const SecurityPolicyPatch: typeof import("./securityPolicyPatch").SecurityPolicyPatch = null as any;
utilities.lazyLoad(exports, ["SecurityPolicyPatch"], () => require("./securityPolicyPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendList":
                return new BackendList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendPatch":
                return new BackendPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendTrafficPolicy":
                return new BackendTrafficPolicy(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendTrafficPolicyList":
                return new BackendTrafficPolicyList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendTrafficPolicyPatch":
                return new BackendTrafficPolicyPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:ClientTrafficPolicy":
                return new ClientTrafficPolicy(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:ClientTrafficPolicyList":
                return new ClientTrafficPolicyList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:ClientTrafficPolicyPatch":
                return new ClientTrafficPolicyPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyExtensionPolicy":
                return new EnvoyExtensionPolicy(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyExtensionPolicyList":
                return new EnvoyExtensionPolicyList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyExtensionPolicyPatch":
                return new EnvoyExtensionPolicyPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyPatchPolicy":
                return new EnvoyPatchPolicy(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyPatchPolicyList":
                return new EnvoyPatchPolicyList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyPatchPolicyPatch":
                return new EnvoyPatchPolicyPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyProxy":
                return new EnvoyProxy(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyProxyList":
                return new EnvoyProxyList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyProxyPatch":
                return new EnvoyProxyPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:HTTPRouteFilter":
                return new HTTPRouteFilter(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:HTTPRouteFilterList":
                return new HTTPRouteFilterList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:HTTPRouteFilterPatch":
                return new HTTPRouteFilterPatch(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:SecurityPolicyList":
                return new SecurityPolicyList(name, <any>undefined, { urn })
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:SecurityPolicyPatch":
                return new SecurityPolicyPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("envoy-proxy", "gateway.envoyproxy.io/v1alpha1", _module)
