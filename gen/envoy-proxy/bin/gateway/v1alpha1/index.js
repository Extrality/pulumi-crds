"use strict";
// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityPolicyPatch = exports.SecurityPolicyList = exports.SecurityPolicy = exports.HTTPRouteFilterPatch = exports.HTTPRouteFilterList = exports.HTTPRouteFilter = exports.EnvoyProxyPatch = exports.EnvoyProxyList = exports.EnvoyProxy = exports.EnvoyPatchPolicyPatch = exports.EnvoyPatchPolicyList = exports.EnvoyPatchPolicy = exports.EnvoyExtensionPolicyPatch = exports.EnvoyExtensionPolicyList = exports.EnvoyExtensionPolicy = exports.ClientTrafficPolicyPatch = exports.ClientTrafficPolicyList = exports.ClientTrafficPolicy = exports.BackendTrafficPolicyPatch = exports.BackendTrafficPolicyList = exports.BackendTrafficPolicy = exports.BackendPatch = exports.BackendList = exports.Backend = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.Backend = null;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));
exports.BackendList = null;
utilities.lazyLoad(exports, ["BackendList"], () => require("./backendList"));
exports.BackendPatch = null;
utilities.lazyLoad(exports, ["BackendPatch"], () => require("./backendPatch"));
exports.BackendTrafficPolicy = null;
utilities.lazyLoad(exports, ["BackendTrafficPolicy"], () => require("./backendTrafficPolicy"));
exports.BackendTrafficPolicyList = null;
utilities.lazyLoad(exports, ["BackendTrafficPolicyList"], () => require("./backendTrafficPolicyList"));
exports.BackendTrafficPolicyPatch = null;
utilities.lazyLoad(exports, ["BackendTrafficPolicyPatch"], () => require("./backendTrafficPolicyPatch"));
exports.ClientTrafficPolicy = null;
utilities.lazyLoad(exports, ["ClientTrafficPolicy"], () => require("./clientTrafficPolicy"));
exports.ClientTrafficPolicyList = null;
utilities.lazyLoad(exports, ["ClientTrafficPolicyList"], () => require("./clientTrafficPolicyList"));
exports.ClientTrafficPolicyPatch = null;
utilities.lazyLoad(exports, ["ClientTrafficPolicyPatch"], () => require("./clientTrafficPolicyPatch"));
exports.EnvoyExtensionPolicy = null;
utilities.lazyLoad(exports, ["EnvoyExtensionPolicy"], () => require("./envoyExtensionPolicy"));
exports.EnvoyExtensionPolicyList = null;
utilities.lazyLoad(exports, ["EnvoyExtensionPolicyList"], () => require("./envoyExtensionPolicyList"));
exports.EnvoyExtensionPolicyPatch = null;
utilities.lazyLoad(exports, ["EnvoyExtensionPolicyPatch"], () => require("./envoyExtensionPolicyPatch"));
exports.EnvoyPatchPolicy = null;
utilities.lazyLoad(exports, ["EnvoyPatchPolicy"], () => require("./envoyPatchPolicy"));
exports.EnvoyPatchPolicyList = null;
utilities.lazyLoad(exports, ["EnvoyPatchPolicyList"], () => require("./envoyPatchPolicyList"));
exports.EnvoyPatchPolicyPatch = null;
utilities.lazyLoad(exports, ["EnvoyPatchPolicyPatch"], () => require("./envoyPatchPolicyPatch"));
exports.EnvoyProxy = null;
utilities.lazyLoad(exports, ["EnvoyProxy"], () => require("./envoyProxy"));
exports.EnvoyProxyList = null;
utilities.lazyLoad(exports, ["EnvoyProxyList"], () => require("./envoyProxyList"));
exports.EnvoyProxyPatch = null;
utilities.lazyLoad(exports, ["EnvoyProxyPatch"], () => require("./envoyProxyPatch"));
exports.HTTPRouteFilter = null;
utilities.lazyLoad(exports, ["HTTPRouteFilter"], () => require("./httprouteFilter"));
exports.HTTPRouteFilterList = null;
utilities.lazyLoad(exports, ["HTTPRouteFilterList"], () => require("./httprouteFilterList"));
exports.HTTPRouteFilterPatch = null;
utilities.lazyLoad(exports, ["HTTPRouteFilterPatch"], () => require("./httprouteFilterPatch"));
exports.SecurityPolicy = null;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));
exports.SecurityPolicyList = null;
utilities.lazyLoad(exports, ["SecurityPolicyList"], () => require("./securityPolicyList"));
exports.SecurityPolicyPatch = null;
utilities.lazyLoad(exports, ["SecurityPolicyPatch"], () => require("./securityPolicyPatch"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:Backend":
                return new exports.Backend(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendList":
                return new exports.BackendList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendPatch":
                return new exports.BackendPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendTrafficPolicy":
                return new exports.BackendTrafficPolicy(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendTrafficPolicyList":
                return new exports.BackendTrafficPolicyList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:BackendTrafficPolicyPatch":
                return new exports.BackendTrafficPolicyPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:ClientTrafficPolicy":
                return new exports.ClientTrafficPolicy(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:ClientTrafficPolicyList":
                return new exports.ClientTrafficPolicyList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:ClientTrafficPolicyPatch":
                return new exports.ClientTrafficPolicyPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyExtensionPolicy":
                return new exports.EnvoyExtensionPolicy(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyExtensionPolicyList":
                return new exports.EnvoyExtensionPolicyList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyExtensionPolicyPatch":
                return new exports.EnvoyExtensionPolicyPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyPatchPolicy":
                return new exports.EnvoyPatchPolicy(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyPatchPolicyList":
                return new exports.EnvoyPatchPolicyList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyPatchPolicyPatch":
                return new exports.EnvoyPatchPolicyPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyProxy":
                return new exports.EnvoyProxy(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyProxyList":
                return new exports.EnvoyProxyList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:EnvoyProxyPatch":
                return new exports.EnvoyProxyPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:HTTPRouteFilter":
                return new exports.HTTPRouteFilter(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:HTTPRouteFilterList":
                return new exports.HTTPRouteFilterList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:HTTPRouteFilterPatch":
                return new exports.HTTPRouteFilterPatch(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:SecurityPolicy":
                return new exports.SecurityPolicy(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:SecurityPolicyList":
                return new exports.SecurityPolicyList(name, undefined, { urn });
            case "kubernetes:gateway.envoyproxy.io/v1alpha1:SecurityPolicyPatch":
                return new exports.SecurityPolicyPatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("envoy-proxy", "gateway.envoyproxy.io/v1alpha1", _module);
//# sourceMappingURL=index.js.map